using System.Xml.Linq;

namespace Qhta.UnicodeBuild.NameGen;

/// <summary>
/// Comparer for names generated by <see cref="NameComparer"/>.
/// Names of function (between '\' and '{') are compared using case-insensitive comparison.
/// Other parts of the name are compared using case-sensitive comparison.
/// </summary>
public class NameComparer: IEqualityComparer<string>
{
  /// <summary>
  /// Compares two names for equality.
  /// </summary>
  /// <param name="name1"></param>
  /// <param name="name2"></param>
  /// <returns></returns>
  public bool Equals(string? name1, string? name2)
  {
    if (name1 is null && name2 is null) return true;
    if (name1 is null || name2 is null) return false;
    if (name1.Length!= name2.Length) return false;
    bool caseInsensitive = false;
    for (int i = 0; i < name1.Length; i++)
    {
      if (name1[i] == '\\' && name2[i] == '\\')
      {
        var nextSep = name1.IndexOfAny(['{', '\\', '}'], i + 1);
        if (nextSep < 0)
          caseInsensitive = true;
        else
          caseInsensitive = name1[nextSep] =='{';
      }
      else if (name1[i] == '{' && name2[i] == '{')
        caseInsensitive = false; // reset on '{' to avoid false positives in case of escaped characters
      else if (caseInsensitive)
      {
        if (char.ToLowerInvariant(name1[i]) != char.ToLowerInvariant(name2[i])) return false;
      }
      else 
      if ((name1[i]) != (name2[i])) return false;
    }
    return true;
  }

  /// <summary>
  /// Normalizes the case of a character name.
  /// Characters after '\' are turned to lower invariant.
  /// Characters inside '{' and '}' are left without changes.  
  /// </summary>
  /// <param name="name"></param>
  /// <returns></returns>
  public string NormalizeCase(string name)
  {
    var chars = name.ToCharArray();
    bool caseInsensitive = false;
    for (int i = 0; i < name.Length; i++)
    {
      if (name[i] == '\\')
      {
        var nextSep = name.IndexOfAny(['{', '\\', '}'], i + 1);
        if (nextSep < 0)
          caseInsensitive = true;
        else
          caseInsensitive = name[nextSep] == '{';
      }
      else if (name[i] == '{')
        caseInsensitive = false; // reset on '{' to avoid false positives in case of escaped characters
      else if (caseInsensitive)
      {
        chars[i] = char.ToLowerInvariant(name[i]);
      }
    }
    return new string(chars);
  }

  /// <summary>
  /// Returns a hash code for the specified name, using its normalized case.
  /// </summary>
  /// <param name="name">The name for which to compute the hash code. Can't be null.</param>
  /// <returns>An integer hash code for the specified string. If <paramref name="name"/> is null, the hash code for an empty
  /// string is returned.</returns>
  public int GetHashCode(string name)
  {
    return NormalizeCase(name).GetHashCode();
  }
}