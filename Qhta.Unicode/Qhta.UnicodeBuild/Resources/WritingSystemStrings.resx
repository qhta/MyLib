<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="IsUsed" xml:space="preserve">
    <value>Is used</value>
  </data>
  <data name="Name" xml:space="preserve">
    <value>Name</value>
  </data>
  <data name="Parent" xml:space="preserve">
    <value>Parent system</value>
  </data>
  <data name="Type" xml:space="preserve">
    <value>Type</value>
  </data>
  <data name="Kind" xml:space="preserve">
    <value>Kind</value>
  </data>
  <data name="KeyPhrase" xml:space="preserve">
    <value>Key phrase</value>
  </data>
  <data name="Ctg" xml:space="preserve">
    <value>Ctg</value>
    <comment>@MutedRule(PunctuationTail)</comment>
  </data>
  <data name="Iso" xml:space="preserve">
    <value>ISO</value>
  </data>
  <data name="Abbr" xml:space="preserve">
    <value>Abbr</value>
  </data>
  <data name="Ext" xml:space="preserve">
    <value>Ext</value>
    <comment>@MutedRule(PunctuationTail)</comment>
  </data>
  <data name="Description" xml:space="preserve">
    <value>Description</value>
  </data>
  <data name="IsUsedTooltip" xml:space="preserve">
    <value>Indicates whether the writing system is a parent for some other systems or is referenced in Unicode Blocks or Unicode Ranges.</value>
  </data>
  <data name="NameTooltip" xml:space="preserve">
    <value>Writing system name is a unique name starting with a letter and optionally containing letters, digits and spaces.</value>
  </data>
  <data name="ParentTooltip" xml:space="preserve">
    <value>Writing system parent is used to organize systems in a hierarchy.</value>
  </data>
  <data name="TypeTooltip" xml:space="preserve">
    <value>The type of writing system determines the primary purpose of the system.</value>
  </data>
  <data name="KindTooltip" xml:space="preserve">
    <value>The type of writing system determines the nature of the characters in that system.</value>
  </data>
  <data name="KeyPhraseTooltip" xml:space="preserve">
    <value>Key phrase should exist in a code point description to classify the code point to this writing system. Wildcards '*' can be used to define more sophisticated classification rules. E.g. a wildcard at the end of the key phrase means that it must occur at the beginning of the description.</value>
  </data>
  <data name="CtgTooltip" xml:space="preserve">
    <value>A category string is a value of "Ctg"  field of a code point which assigns the code point to this writing system. Wildcards '*' and alternative operators "|" can be used to define sophisticated classification rules.</value>
  </data>
  <data name="IsoTooltip" xml:space="preserve">
    <value>Identifier of the writing system (script or language) in ISO-15924 or ISO-639 standard.</value>
  </data>
  <data name="AbbrTooltip" xml:space="preserve">
    <value>Abbreviation is a string to identify the writing system in the output text.</value>
  </data>
  <data name="ExtTooltip" xml:space="preserve">
    <value>Extension is a string which is appended to the abbreviation to create a unique key for each writing system. It does not appear in the output text.</value>
  </data>
  <data name="NameAlreadyExistsMessage" xml:space="preserve">
    <value>Writing system {0} already exists.</value>
  </data>
  <data name="Category" xml:space="preserve">
    <value>Category</value>
  </data>
  <data name="Extension" xml:space="preserve">
    <value>Extension</value>
  </data>
  <data name="Abbreviation" xml:space="preserve">
    <value>Abbreviation</value>
  </data>
  <data name="NewWritingSystemTitle" xml:space="preserve">
    <value>New Writing System</value>
  </data>
  <data name="EditWritingSystemTitle" xml:space="preserve">
    <value>Edit Writing System</value>
  </data>
</root>