//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Qhta.UnicodeBuild.Resources {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public class NameGenMethodStrings {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal NameGenMethodStrings() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Qhta.UnicodeBuild.Resources.NameGenMethodStrings", typeof(NameGenMethodStrings).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Abbreviation.
        /// </summary>
        public static string Abbreviating {
            get {
                return ResourceManager.GetString("Abbreviating", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Names are generated by shortening the character description. You can specify the path to a file where you can define abbreviations for individual words. The first column of the file should contain the full forms of the words, the second column the abbreviated forms. If the word does not have an abbreviated form, only the first letter will be retained. If the result generates a name that already exists in the system, a unique integer will be added to it..
        /// </summary>
        public static string AbbreviatingTooltip {
            get {
                return ResourceManager.GetString("AbbreviatingTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No generation.
        /// </summary>
        public static string NoGeneration {
            get {
                return ResourceManager.GetString("NoGeneration", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Names are not generated..
        /// </summary>
        public static string NoGenerationTooltip {
            get {
                return ResourceManager.GetString("NoGenerationTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Ordinal.
        /// </summary>
        public static string Ordinal {
            get {
                return ResourceManager.GetString("Ordinal", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The names are generated such that subsequent code points have sequential ordinal numbers added to the short name of the writing system..
        /// </summary>
        public static string OrdinalTootip {
            get {
                return ResourceManager.GetString("OrdinalTootip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Predefined.
        /// </summary>
        public static string Predefined {
            get {
                return ResourceManager.GetString("Predefined", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Names are taken from a predefined list of names. You must provide the path to the filename with the predefined names list. The list must have two columns: first with code point hexadecimal codes, the second with then names..
        /// </summary>
        public static string PredefinedTooltip {
            get {
                return ResourceManager.GetString("PredefinedTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Procedural.
        /// </summary>
        public static string Procedural {
            get {
                return ResourceManager.GetString("Procedural", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The result of generating a name is a function (macro) that transforms another character. The function is preceded by the &apos;\&apos; character. You can specify the path to a file that specifies the functions to be used. The first column of the file should contain regular expressions found in the character description, the second column should contain the function names..
        /// </summary>
        public static string ProceduralTooltip {
            get {
                return ResourceManager.GetString("ProceduralTooltip", resourceCulture);
            }
        }
    }
}
