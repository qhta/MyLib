<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:helpers="clr-namespace:Qhta.UnicodeBuild.Helpers"
                    xmlns:converters="clr-namespace:Qhta.WPF.Converters;assembly=Qhta.WPF.Converters"
                    xmlns:viewModels="clr-namespace:Qhta.UnicodeBuild.ViewModels"
                    xmlns:resources="clr-namespace:Qhta.UnicodeBuild.Resources"
                    xmlns:sf="http://schemas.syncfusion.com/wpf"
                    xmlns:mvvm="clr-namespace:Qhta.MVVM;assembly=Qhta.MVVM"
                    xmlns:controls="clr-namespace:Qhta.UnicodeBuild.Controls"
                    xmlns:models="clr-namespace:Qhta.Unicode.Models"
                    x:Class="Qhta.UnicodeBuild.AppResourceDictionary">

  <helpers:ViewModelsBindingProxy x:Key="ViewModels"/>
  <converters:BoolToVisibilityConverter x:Key="BoolToVisibilityConverter"/>
  <converters:BoolToTextWrappingConverter x:Key="BoolToTextWrappingConverter"/>
  <converters:AddingConverter x:Key="AddingConverter"/>
  <helpers:MappingNameToValueConverter x:Key="MappingNameToValueConverter"/>
  <helpers:MappingNameBinder x:Key="MappingNameBinder"/>
  <helpers:CodeRangeComparer x:Key="CodeRangeComparer"/>
  <helpers:CodeRangeValueConverter x:Key="CodeRangeValueConverter"/>
  <helpers:CodePointValueConverter x:Key="CodePointValueConverter"/>
  <converters:NegateValueConverter x:Key="NegateValueConverter"/>
  <helpers:WritingSystemTypeToImageConverter x:Key="TypeToImageConverter" />
  <helpers:PropertyControlFactory x:Key="PropertyControlFactory"/>
  <helpers:PropertyModelOperator x:Key="PropertyModelOperator"/>
  <helpers:EnumToResourceConverter 
    ResourceType="{x:Type resources:WritingSystemType}" x:Key="WritingSystemTypeResourceConverter"/>
  <helpers:EnumToResourceConverter 
    ResourceType="{x:Type resources:WritingSystemKind}" x:Key="WritingSystemKindResourceConverter"/>
  <resources:Strings x:Key="Strings"/>

  <Style x:Key="MenuItemObjectStyle" TargetType="MenuItem">
    <Setter Property="Header" Value="{Binding Header}" />
    <Setter Property="Icon" Value="{Binding Icon}" />
    <Setter Property="ToolTip" Value="{Binding ToolTip}" />
    <Setter Property="Command" Value="{Binding Command}" />
    <Setter Property="CommandParameter" Value="{Binding CommandParameter}" />
  </Style>

  <ContextMenu x:Key="CommonContextMenu">
    <MenuItem Header="Copy" Command="Copy"/>
    <MenuItem Header="Paste" Command="Paste"/>
    <MenuItem Header="Cut" Command="Cut"/>
  </ContextMenu>

  <Style x:Key="FlatButtonStyle" TargetType="ButtonBase">
    <Setter Property="FontFamily" Value="Segoe UI Symbol"/>
    <Setter Property="Background" Value="Transparent"/>
    <Setter Property="BorderThickness" Value="0"/>
  </Style>

  <Style TargetType="TextBox">
    <Setter Property="Validation.ErrorTemplate">
      <Setter.Value>
        <ControlTemplate>
          <DockPanel>
            <Border DockPanel.Dock="Bottom" Background="Red" BorderBrush="Black" BorderThickness="1"
                    Padding="2">
              <TextBlock Foreground="White" Text="{Binding [0].ErrorContent}" />
            </Border>
            <AdornedElementPlaceholder />
          </DockPanel>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger Property="Validation.HasError" Value="True">
        <Setter Property="ToolTip" Value="{Binding RelativeSource={RelativeSource Self}, Path=(Validation.Errors)[0].ErrorContent}" />
      </Trigger>
    </Style.Triggers>
  </Style>

  <Style TargetType="ToolTip">
    <Setter Property="MaxWidth" Value="400"/>
    <Setter Property="ContentTemplate">
      <Setter.Value>
        <DataTemplate>
          <StackPanel>
            <TextBlock Text="{TemplateBinding Content}" TextWrapping="Wrap"/>
          </StackPanel>
        </DataTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <DataTemplate x:Key="RangeCellTemplate">
    <TextBlock 
        Text="{Binding Range, Converter={StaticResource CodeRangeValueConverter}}" 
        Padding="3"/>
  </DataTemplate>

  <DataTemplate x:Key="RangeEditTemplate">
    <TextBox >
      <TextBox.Text>
        <Binding Path="Range" 
                   Converter="{StaticResource CodeRangeValueConverter}"
                   UpdateSourceTrigger="PropertyChanged"
                   Mode="TwoWay">
          <Binding.ValidationRules>
            <helpers:CodeRangeValidationRule />
          </Binding.ValidationRules>
        </Binding>
      </TextBox.Text>
    </TextBox>
  </DataTemplate>

  <DataTemplate x:Key="CodePointTemplate">
    <TextBlock 
      Text="{Binding CP, Converter={StaticResource CodePointValueConverter}}" 
      Padding="3"/>
  </DataTemplate>

  <DataTemplate x:Key="CodePointEditTemplate">
    <TextBox >
      <TextBox.Text>
        <Binding Path="CP" 
                 Converter="{StaticResource CodePointValueConverter}"
                 UpdateSourceTrigger="PropertyChanged"
                 Mode="TwoWay">
          <Binding.ValidationRules>
            <helpers:CodePointValidationRule />
          </Binding.ValidationRules>
        </Binding>
      </TextBox.Text>
    </TextBox>
  </DataTemplate>

  <DataTemplate x:Key="TextCellTemplate" DataType="{x:Type mvvm:IViewModel}">
    <TextBlock      
      Text="{Binding Path=TemplatedParent, 
      RelativeSource={RelativeSource AncestorType=ContentPresenter}, 
      Converter={StaticResource MappingNameToValueConverter}}"
      Padding="2"
      ContextMenu="{StaticResource CommonContextMenu}" 
      />
  </DataTemplate>

  <DataTemplate x:Key="LongTextCellTemplate" DataType="{x:Type viewModels:ILongTextViewModel}">
    <Grid>
      <Grid.ColumnDefinitions>
        <ColumnDefinition Width="*"/>
        <ColumnDefinition Width="Auto"/>
      </Grid.ColumnDefinitions>
      <TextBlock 
        x:Name="LongTextBlock"
        Text="{Binding Path=LongText}" 
        Padding="3"
        TextWrapping="Wrap"
        />
      <Button 
        Grid.Column="1"
        Visibility="{Binding CanExpandLongText, 
          Converter={StaticResource BoolToVisibilityConverter}}"
        Height="20"
        VerticalAlignment="Top"
        Background="Transparent"
        BorderThickness="0"
        BorderBrush="Transparent"
        Content="▼"
        Click="ShowPopup_Click"/>
      <!--<controls:RowResizer Grid.Column="0" Grid.ColumnSpan="2" MaxRowHeight="360" Background="LightGray"/>-->
      <Popup Grid.Column="0" Grid.ColumnSpan="2" x:Name="LongTextPopup" Placement="Mouse" StaysOpen="false">
        <Border Background="LightGray" BorderBrush="Black" BorderThickness="1" Padding="3" 
                >
          <TextBlock 
            Text="{Binding Path=LongText}" 
            TextWrapping="Wrap"/>
        </Border>
      </Popup>
    </Grid>
  </DataTemplate>

  <DataTemplate x:Key="LongTextEditTemplate" DataType="{x:Type viewModels:ILongTextViewModel}">
    <Grid x:Name="EditedGrid">
      <TextBlock 
        Text="{Binding Path=LongText}" 
        Padding="3"
        TextWrapping="Wrap"/>
      <Popup 
         x:Name="LongTextEditPopup" 
         PlacementTarget="{Binding 
           RelativeSource={RelativeSource AncestorType={x:Type Grid}},
           BindsDirectlyToSource=true}"
         Placement = "Bottom"
         VerticalOffset="{Binding
           RelativeSource={RelativeSource AncestorType={x:Type Grid}},
           Path=ActualHeight,
           Converter = {StaticResource NegateValueConverter}}"
         Width="{Binding
           RelativeSource={RelativeSource AncestorType={x:Type Grid}},
           Path=ActualWidth}"
         IsOpen = "true"   
         StaysOpen="false">
        <Border Background="White" BorderBrush="Black" BorderThickness="1" Padding="3" 
        >
          <TextBox 
            Text="{Binding Path=LongText}" 
            BorderThickness="0"
            BorderBrush="Transparent"
            TextWrapping="Wrap"
            AcceptsReturn="True"
            sf:FocusManagerHelper.FocusedElement ="True"
            />
        </Border>
      </Popup>
    </Grid>
  </DataTemplate>

  <helpers:MultiValueToStringConverter x:Key="MultiValueToStringConverter" />

  <!--<DataTemplate x:Key="ValidationErrorTemplateEx">
    <TextBlock TextWrapping="Wrap" Text="{Binding ErrorMessage}" >
      <TextBlock.Style>
        <Style TargetType="{x:Type TextBlock}">
          <Setter Property="Foreground" Value="Red"/>
          <Style.Triggers>
            <DataTrigger Binding="{Binding Severity}" Value="{x:Static helpers:Severity.Warning}">
              <Setter Property="Foreground" Value="Orange"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Severity}" Value="{x:Null}">
              <Setter Property="Foreground" Value="Red"/>
            </DataTrigger>
          </Style.Triggers>
        </Style>
      </TextBlock.Style>
    </TextBlock>
  </DataTemplate>-->

  <Style x:Key="ErrorInToolTipStyleEx" TargetType="{x:Type FrameworkElement}">
    <Style.Triggers>
      <Trigger Property="Validation.HasError" Value="true">
        <Setter Property="ToolTip">
          <Setter.Value>
            <MultiBinding Converter="{StaticResource MultiValueToStringConverter}">
              <Binding RelativeSource="{RelativeSource Self}" Path="(Validation.Errors)" />
              <Binding RelativeSource="{RelativeSource Self}" Path="(Validation.Errors).Count" />
            </MultiBinding>
          </Setter.Value>
        </Setter>
      </Trigger>
    </Style.Triggers>
  </Style>

  <Style TargetType="sf:GridRowHeaderCell">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="sf:GridRowHeaderCell">
          <Border x:Name="PART_RowHeaderCellBorder"
                  Background="{TemplateBinding Background}"
                  BorderBrush="{TemplateBinding BorderBrush}"
                  BorderThickness="{TemplateBinding BorderThickness}">
            <Grid Height="{Binding RowHeight, Mode=TwoWay}">
              <TextBlock HorizontalAlignment="Center"
                         VerticalAlignment="Top"
                         Margin="0,3,0,0"
                         Text="{Binding RowIndex,RelativeSource={RelativeSource TemplatedParent}}"
                         TextAlignment="Center" />
              <controls:RowResizer Background="LightGray" MaxRowHeight="240"/>
            </Grid>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <!--<DataTemplate x:Key="WritingSystemTypeFilterPopupTemplate">
    <ComboBox ItemsSource="{helpers:EnumValues EnumType={x:Type models:WritingSystemType}}"
              SelectedItem="{Binding FilterValue, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}">
      <ComboBox.ItemTemplate>
        <DataTemplate>
          <TextBlock Text="{Binding Converter={StaticResource WritingSystemTypeResourceConverter}}" />
        </DataTemplate>
      </ComboBox.ItemTemplate>
    </ComboBox>
  </DataTemplate>-->
</ResourceDictionary>