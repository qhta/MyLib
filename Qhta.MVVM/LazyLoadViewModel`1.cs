using System.Threading.Tasks;

namespace Qhta.MVVM
{
  /// <summary>
  /// Abstract <see cref="LazyLoadViewModel{ModelType}"/> that implements <see cref="ILazyLoad"/> and <see cref="IExpandable"/> interfaces.
  /// </summary>
  /// <typeparam name="ModelType"></typeparam>
  public abstract class LazyLoadViewModel<ModelType>: VisibleViewModel<ModelType>, ILazyLoad, IExpandable
  {

    /// <summary>
    /// Determines whether a view model should load a model on init.
    /// </summary>
    [DataGridColumn(IsAutoGenerated = false)]
    public bool LoadOnInit
    {
      get => _LoadOnInit;
      set
      {
        if (_LoadOnInit!=value)
        {
          _LoadOnInit=value;
          NotifyPropertyChanged(nameof(LoadOnInit));
          if (value)
            StartLoading();
        }
      }
    }
    bool _LoadOnInit;

    /// <summary>
    /// Determines whether a view model should load items on expand.
    /// </summary>
    [DataGridColumn(IsAutoGenerated = false)]
    public bool LoadOnExpand
    {
      get => _LoadOnExpand;
      set
      {
        if (_LoadOnExpand!=value)
        {
          _LoadOnExpand=true;
          NotifyPropertyChanged(nameof(LoadOnExpand));
          if (value)
            PrepareLoadOnExpand();
        }
      }
    }
    bool _LoadOnExpand;

    /// <summary>
    /// Determines whether a view model is loading a model.
    /// </summary>
    [DataGridColumn(IsAutoGenerated = false)]
    public bool IsLoading
    {
      get => _IsLoading;
      protected set
      {
        if (_IsLoading!=value)
        {
          _IsLoading=value;
          NotifyPropertyChanged(nameof(IsLoading));
          if (value)
            StartWaiting();
          else
            StopWaiting();
        }
      }
    }
    bool _IsLoading;

    /// <summary>
    /// Determines whether a view model has already loaded a model.
    /// </summary>
    [DataGridColumn(IsAutoGenerated = false)]
    public bool IsLoaded
    {
      get => _IsLoaded;
      set
      {
        if (_IsLoaded!=value)
        {
          _IsLoaded=value;
          NotifyPropertyChanged(nameof(IsLoaded));
        }
      }
    }
    bool _IsLoaded;

    /// <summary>
    /// Determines whether a view model is expanded (e.g. as a tree view item).
    /// </summary>
    [DataGridColumn(IsAutoGenerated = false)]
    public override bool IsExpanded
    {
      get => base.IsExpanded;
      set
      {
        if (value==true && base.IsExpanded==false && 
          LoadOnExpand && !_IsLoaded && !IsLoading)
        {
          StartLoading().ContinueWith((task) => { base.IsExpanded=true; });
        }
        else
          base.IsExpanded = value;
      }
    }

    /// <summary>
    /// A method invoked before load on expand
    /// </summary>
    protected abstract void PrepareLoadOnExpand();

    /// <summary>
    /// A task to load items.
    /// </summary>
    /// <returns></returns>
    public abstract Task StartLoading();

  }
}
