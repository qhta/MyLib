namespace Qhta.MVVM
{
  /// <summary>
  /// ViewModel which implements <see cref="IVisible"/>, <see cref="ISelectable"/>, and <see cref="IExpandable"/> interfaces.
  /// </summary>
  public class VisibleViewModel : ViewModel, IVisible, ISelectable, IExpandable
  {
    /// <summary>
    /// Specifies whether the ViewModel is visible.
    /// </summary>
    [DataGridColumn(IsAutoGenerated = false)]
    public virtual bool IsVisible
    {
      get => _IsVisible;
      set
      {
        if (_IsVisible!=value)
        {
          _IsVisible = value;
          NotifyPropertyChanged(nameof(IsVisible));
        }
      }
    }
    /// <summary>
    /// Internal property that specifies whether the ViewModel is visible.
    /// </summary>
    protected bool _IsVisible = true;

    /// <summary>
    /// Specifies whether the ViewModel has details.
    /// </summary>
    [DataGridColumn(IsAutoGenerated = false)]
    public virtual bool HasRowDetails
    {
      get => _HasRowDetails;
      set
      {
        if (_HasRowDetails!=value)
        {
          _HasRowDetails = value;
          NotifyPropertyChanged(nameof(HasRowDetails));
        }
      }
    }
    /// <summary>
    /// Internal property that specifies whether the ViewModel has details.
    /// </summary>
    protected bool _HasRowDetails = false;

    /// <summary>
    /// Specifies whether the ViewModel is expanded.
    /// </summary>
    [DataGridColumn(IsAutoGenerated = false)]
    public virtual bool IsExpanded
    {
      get => _IsExpanded;
      set
      {
        if (_IsExpanded!=value)
        {
          _IsExpanded = value;
          NotifyPropertyChanged(nameof(IsExpanded));
        }
      }
    }
    /// <summary>
    /// Internal property that specifies whether the ViewModel is expanded.
    /// </summary>
    protected bool _IsExpanded = false;

    /// <summary>
    /// Specifies whether the ViewModel is selected.
    /// </summary>
    [DataGridColumn(IsAutoGenerated = false)]
    public bool IsSelected
    {
      get => _IsSelected;
      set
      {
        if (_IsSelected!=value)
        {
          _IsSelected = value;
          NotifyPropertyChanged(nameof(IsSelected));
        }
      }
    }
    /// <summary>
    /// Internal property that specifies whether the ViewModel is selected.
    /// </summary>
    protected bool _IsSelected = false;

    /// <summary>
    /// Observable collection of commands assigned to this ViewModel.
    /// </summary>
    [DataGridColumn(IsAutoGenerated = false)]
    public Commands? Commands { get; set; }

  }
}
