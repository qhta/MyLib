using System.ComponentModel;

namespace Qhta.MVVM
{
  /// <summary>
  /// Visible view model which has a model of a specific type.
  /// </summary>
  public class VisibleViewModel<ModelType> : VisibleViewModel, IVisible, IExpandable, ISelectable
  {
    /// <summary>
    /// Default constructor.
    /// </summary>
    public VisibleViewModel()
    {
    }

    /// <summary>
    /// A constructor with a parent ViewModel.
    /// </summary>
    /// <param name="parentViewModel"></param>
    public VisibleViewModel(IViewModel parentViewModel)
    {
      ParentViewModel = parentViewModel;
    }

    /// <summary>
    /// A parent ViewModel of this ViewModel.
    /// </summary>
    [DataGridColumn(IsAutoGenerated = false)]
    public IViewModel? ParentViewModel { get; private set; }

    /// <summary>
    /// A modeled object.
    /// </summary>
    [DataGridColumn(IsAutoGenerated = false)]
    public ModelType? Model
    {
      get => _Model;
      set
      {
        if (value?.Equals(_Model) !=true)
        {
          _Model = value;
          if (_Model is INotifyPropertyChanged observableModel)
            observableModel.PropertyChanged+=ObservableModel_PropertyChanged;
        }
      }
    }

    private void ObservableModel_PropertyChanged(object? sender, PropertyChangedEventArgs args)
    {
      if (args.PropertyName!=null)
        NotifyPropertyChanged(args.PropertyName);
    }

    private ModelType? _Model;

    /// <summary>
    /// Determines if a <see cref="_WaitCount"/> is greater than 0.
    /// </summary>
    [DataGridColumn(IsAutoGenerated = false)]
    public bool IsWaiting
    {
      get => _WaitCount>0;
    }
    int _WaitCount;

    /// <summary>
    /// Increments <see cref="_WaitCount"/> and notifies UI that <see cref="IsWaiting"/> property has been changed.
    /// </summary>
    public virtual void StartWaiting()
    {
      var waitCount = _WaitCount;
      _WaitCount++;
      if (waitCount == 0)
        NotifyPropertyChanged(nameof(IsWaiting));
    }

    /// <summary>
    /// Decrements <see cref="_WaitCount"/> and notifies UI that <see cref="IsWaiting"/> property has been changed.
    /// </summary>
    public virtual void StopWaiting()
    {
      if (_WaitCount>0)
      {
        _WaitCount--;
        if (_WaitCount == 0)
          NotifyPropertyChanged(nameof(IsWaiting));
      }
    }
  }
}
