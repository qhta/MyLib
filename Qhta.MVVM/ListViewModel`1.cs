namespace Qhta.MVVM
{
  /// <summary>
  /// <see cref="ListViewModel"/> with specified item type.
  /// </summary>
  /// <typeparam name="ItemType"></typeparam>
  public partial class ListViewModel<ItemType> : ObservableList<ItemType>, INotifySelectionChanged, IViewModel, ISelectable
         where ItemType : class, IValidated, ISelectable
  {
    /// <summary>
    /// Default constructor.
    /// </summary>
    public ListViewModel()
    {
    }

    /// <summary>
    /// Constructor with parent VIewModel.
    /// </summary>
    /// <param name="parentViewModel"></param>
    public ListViewModel(IViewModel parentViewModel) : this()
    {
      ParentViewModel = parentViewModel;
    }


    /// <summary>
    /// VIewModel that is a parent of this ViewModel.
    /// </summary>
    [DataGridColumn(IsAutoGenerated = false)]
    public IViewModel? ParentViewModel { get; private set; }

    /// <summary>
    /// An item that is currently selected.
    /// </summary>
    [DataGridColumn(IsAutoGenerated = false)]
    public ItemType? SelectedItem
    {
      get
      {
        ItemType? selectedItem = null;
        selectedItem = this.ToList().FirstOrDefault(item => item.IsSelected);
        return selectedItem;
      }
      set
      {
        foreach (var item in this.ToList())
          item.IsSelected = item.Equals(value);
      }
    }

    /// <summary>
    /// Number of valid items.
    /// </summary>
    [DataGridColumn(IsAutoGenerated = false)]
    public int ValidItemsCount
    {
      get
      {
        return this.ToList().Where(item => item.IsValid==true).Count();
      }
    }

    /// <summary>
    /// Number of invalid items.
    /// </summary>
    [DataGridColumn(IsAutoGenerated = false)]
    public int InvalidItemsCount
    {
      get
      {
        return this.ToList().Where(item => item.IsValid==false).Count();
      }
    }

    ///// <summary>
    ///// Event handler method to get notification of collection changing.
    ///// </summary>
    ///// <param name="arg"></param>
    //protected override void OnCollectionChanged(NotifyCollectionChangedEventArgs arg)
    //{
    //  base.AfterCollectionChanged(arg);
    //  NotifyPropertyChanged(nameof(ValidItemsCount));
    //  NotifyPropertyChanged(nameof(InvalidItemsCount));
    //  if (arg.Action==NotifyCollectionChangedAction.Add)
    //  {
    //    if (arg.NewItems!=null)
    //    foreach (var item in arg.NewItems)
    //    {
    //      if (item is INotifyPropertyChanged notifyPropertyChangedItem)
    //        notifyPropertyChangedItem.PropertyChanged+=Item_PropertyChanged;
    //      if (item is INumbered numberedItem)
    //      {
    //        if (numberedItem.Number==0)
    //          numberedItem.Number=this.Count();
    //      }
    //    }
    //  }
    //}

    /// <summary>
    /// Event handler method to send notification of property changing.
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="args"></param>
    private void Item_PropertyChanged(object? sender, PropertyChangedEventArgs args)
    {
      switch (args.PropertyName)
      {
        case "IsValid":
          NotifyPropertyChanged(nameof(ValidItemsCount));
          NotifyPropertyChanged(nameof(InvalidItemsCount));
          break;
        case "IsSelected":
          if (sender!=null)
            NotifySelectionChanged(sender);
          break;
        default:
          break;
      }
    }

    /// <summary>
    /// A method to notify that selection has been changed.
    /// </summary>
    /// <param name="item"></param>
    public void NotifySelectionChanged(object item)
    {
      List<object> selectedItems = new List<object>();
      List<object> unselectedItems = new List<object>();
      if (item is ISelectable selectable)
      {
        if (selectable.IsSelected)
          selectedItems.Add(item);
        else
          unselectedItems.Add(item);
      }
      OnSelectionChanged(new SelectionChangedEventArgs(selectedItems, unselectedItems));
    }

    /// <summary>
    /// An event to be called when selection has changed.
    /// </summary>
    public event SelectionChangedEventHandler? SelectionChanged
    {
      add { _SelectionChanged+=value; }
      remove { _SelectionChanged-=value; }
    }
    /// <summary>
    /// Protected event to be called when selection has changed.
    /// </summary>
    protected event SelectionChangedEventHandler? _SelectionChanged;

    /// <summary>
    /// A method invoked when selection has been changed.
    /// </summary>
    /// <param name="args"></param>
    public virtual void OnSelectionChanged(SelectionChangedEventArgs args)
    {
      //if (_SelectionChanged != null)
      //{
      //  if (Dispatcher.CurrentDispatcher==DispatchedObject.ApplicationDispatcher)
      //  {
      //    _SelectionChanged.Invoke(this, args);
      //    AfterSelectionChanged(args);
      //  }
      //  else
      //  {
      //    var action = new Action<NotifyCollectionChangedEventArgs>(OnCollectionChanged);
      //    DispatchedObject.ApplicationDispatcher.Invoke(action, new object[] { args });
      //  }
      //}
      //else
      //  AfterSelectionChanged(args);
    }

    /// <summary>
    /// A method called after selection has been changed. Notifies that a property has been changed.
    /// </summary>
    /// <param name="args"></param>
    protected virtual void AfterSelectionChanged(SelectionChangedEventArgs args)
    {
      NotifyPropertyChanged(nameof(SelectedItem));
    }

    /// <summary>
    /// Currently chosen item.
    /// </summary>
    [DataGridColumn(IsAutoGenerated = false)]
    public ItemType? CurrentItem
    {
      get => _CurrentItem;
      set
      {
        if (_CurrentItem!=value)
        {
          var oldValue = _CurrentItem;
          _CurrentItem=value;
          NotifyPropertyChanged(nameof(CurrentItem));
          if (CurrentItemChanged!=null)
            CurrentItemChanged(this, new CurrentItemChangedEventArgs(_CurrentItem, oldValue));
        }
      }
    }
    private ItemType? _CurrentItem;

    /// <summary>
    /// An event to call when <see cref="CurrentItem"/> property has been changed.
    /// </summary>
    public event CurrentItemChangedEventHandler? CurrentItemChanged;

    /// <summary>
    /// Currently selected item.
    /// </summary>
    [DataGridColumn(IsAutoGenerated = false)]
    public int SelectedIndex
    {
      get => _SelectedIndex;
      set
      {
        if (_SelectedIndex!=value)
        {
          _SelectedIndex=value;
          NotifyPropertyChanged(nameof(SelectedIndex));
          if (_SelectedIndex>=0)
            CurrentItem = this.ToList()[_SelectedIndex];
        }
      }
    }

    /// <summary>
    /// Specifies whether a view item is selected.
    /// </summary>
    [DataGridColumn(IsAutoGenerated = false)]
    public bool IsSelected
    {
      get => _IsSelected;
      set
      {
        if (_IsSelected!=value)
        {
          _IsSelected = value;
          NotifyPropertyChanged(nameof(IsSelected));
        }
      }
    }
    private bool _IsSelected = false;

    private int _SelectedIndex = -1;

  }
}
