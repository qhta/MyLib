using System;
using System.ComponentModel;

namespace Qhta.MVVM;

/// <summary>
/// This attribute can be used in DataGrid.AutoGeneratingColumns to format a column.
/// </summary>
[AttributeUsage(AttributeTargets.Property, AllowMultiple = false, Inherited = true)]
public class DataGridColumnAttribute : System.Attribute
{
  /// <summary>
  /// Indicates whether the user can change the column display position by dragging the column header.
  /// Default is true.
  /// </summary>
  public bool CanUserReorder { get; set; } = true;

  /// <summary>
  /// Indicates whether the user can adjust the column width by using the mouse.
  /// Default is true.
  /// </summary>
  public bool CanUserResize { get; set; } = true;

  /// <summary>
  /// Indicates whether the user can sort the column by clicking the column header.
  /// Default is true.
  /// </summary>
  public bool CanUserSort { get; set; } = true;

  /// <summary>
  /// Specifies the binding path of properties to use when getting or setting cell content for the clipboard.
  /// Default is null.
  /// </summary>
  public string? ClipboardContentPath { get; set; }

  /// <summary>
  /// Gets or sets the display position of the column relative to the other columns in the DataGrid.
  /// Default is -1.
  /// </summary>
  public int DisplayIndex { get; set; } = -1;

  /// <summary>
  /// Gets or sets the column header.
  /// Default is null.
  /// </summary>
  public string? Header { get; set; }

  /// <summary>
  /// Gets or sets the format pattern to apply to the content of the column header.
  /// Default is null.
  /// </summary>
  public string? HeaderStringFormat { get; set; }

  /// <summary>
  /// Gets a value that indicates whether the column should be auto-generated.
  /// Default is true.
  /// </summary>
  public bool IsAutoGenerated { get; set; } = true;

  /// <summary>
  /// Gets a value that indicates whether cells in the column can be edited.
  /// Default is null.
  /// </summary>
  public bool IsReadOnly { get; set; } = false;

  /// <summary>
  /// Gets or sets the maximum width constraint of the column. Default is PositiveInfinity.
  /// </summary>
  public double MaxWidth { get; set; } = double.PositiveInfinity;

  /// <summary>
  /// Gets or sets the minimum width constraint of the column. Default is 20.
  /// </summary>
  public double MinWidth { get; set; } = 20;

  /// <summary>
  /// Gets or sets the sort direction (ascending or descending) of the column. Default is null;
  /// </summary>
  public ListSortDirection? SortDirection { get; set; }

  /// <summary>
  /// Gets or sets a property name, or a period-delimited hierarchy of property names, 
  /// that indicates the member to sort by.
  /// Default is null.
  /// </summary>
  public string? SortMemberPath { get; set; }

  /// <summary>
  /// Gets or sets the visibility of the column. Default is Visible
  /// </summary>
  public Visibility Visibility { get; set; } = Visibility.Visible;

  /// <summary>
  /// Gets or sets the column width or automatic sizing mode.
  /// Default is NaN.
  /// </summary>
  public double Width { get; set; } = double.NaN;

  /// <summary>
  /// A key to Resource DataTemplate that defines layout of content bound column
  /// </summary>
  public string? ResourceDataTemplateKey { get; set; }

  /// <summary>
  /// A key to Resource DataEditingTemplate that defines layout of content bound column
  /// </summary>
  public string? ResourceDataEditingTemplateKey { get; set; }

  /// <summary>
  /// A key to Resource HeaderTemplate that defines layout of content bound column
  /// </summary>
  public string? ResourceHeaderTemplateKey { get; set; }
}
