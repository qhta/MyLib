The old way of the world! This is here for reference purposes and will more than likely be deleted at some point.

/*
unsafe
{
    Bitmap.Lock();
    int CurrentPixel = -1;
    byte* Start = (byte*)(void*)Bitmap.BackBuffer;

    switch (Orientation)
    {
        case Orientation.Horizontal:
            var RowUnit = (Maximum - Minimum) / Bitmap.PixelHeight;
            var CurrentRow = Reverse ? Minimum : Maximum;

            for (var Row = 0; Row < Bitmap.PixelHeight; Row++)
            {
                for (var Col = 0; Col < Bitmap.PixelWidth; Col++)
                {
                    var Rgba = Action.Invoke(Color, Col);

                    CurrentPixel++;
                    *(Start + CurrentPixel * 3 + 0) = Rgba.B;
                    *(Start + CurrentPixel * 3 + 1) = Rgba.G;
                    *(Start + CurrentPixel * 3 + 2) = Rgba.R;
                }
                if (Reverse) CurrentRow += RowUnit;
                else CurrentRow -= RowUnit;
            }
            break;
        case Orientation.Vertical:
            RowUnit = (Maximum - Minimum) / Bitmap.PixelHeight;
            CurrentRow = Reverse ? Minimum : Maximum;

            for (var Row = 0; Row < Bitmap.PixelHeight; Row++)
            {
                var Rgba = Action.Invoke(Color, CurrentRow);
                for (var Col = 0; Col < Bitmap.PixelWidth; Col++)
                {
                    CurrentPixel++;
                    *(Start + CurrentPixel * 3 + 0) = Rgba.B;
                    *(Start + CurrentPixel * 3 + 1) = Rgba.G;
                    *(Start + CurrentPixel * 3 + 2) = Rgba.R;
                }
                if (Reverse) CurrentRow += RowUnit;
                else CurrentRow -= RowUnit;
            }
            break;
    }
    Bitmap.AddDirtyRect(new Int32Rect(0, 0, Bitmap.PixelWidth, Bitmap.PixelHeight));
    Bitmap.Unlock();
}
*/
/*
unsafe
{
    Bitmap.Lock();

    int CurrentPixel = -1;
    byte* Start = (byte*)(void*)Bitmap.BackBuffer;

    for (var r = 0; r < Bitmap.PixelHeight; r++)
    {
        double CurrentColumn = 0;
        for (var c = 0; c < Bitmap.PixelWidth; c++)
        {
            var color = Action.Invoke(new RowColumn(CurrentRow, CurrentColumn), ComponentValue);

            CurrentPixel++;
            *(Start + CurrentPixel * 3 + 0) = color.B;
            *(Start + CurrentPixel * 3 + 1) = color.G;
            *(Start + CurrentPixel * 3 + 2) = color.R;
            CurrentColumn += position.Column;
        }
        CurrentRow -= position.Row;
    }

    Bitmap.AddDirtyRect(new Int32Rect(0, 0, Bitmap.PixelWidth, Bitmap.PixelHeight));
    Bitmap.Unlock();
}
*/