<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Imagin.Common.WPF</name>
    </assembly>
    <members>
        <member name="T:Imagin.Common.DependencyProperty`2">
            <summary>
            
            </summary>
            <typeparam name="TProperty"></typeparam>
            <typeparam name="TOwner"></typeparam>
        </member>
        <member name="M:Imagin.Common.DependencyProperty`2.#ctor(System.String,System.Windows.PropertyMetadata)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="metadata"></param>
        </member>
        <member name="P:Imagin.Common.DependencyProperty`2.Property">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.DependencyProperty`2.Get(`1)">
            <summary>
            
            </summary>
            <param name="owner"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.DependencyProperty`2.Set(`1,`0)">
            <summary>
            
            </summary>
            <param name="owner"></param>
            <param name="value"></param>
        </member>
        <member name="T:Imagin.Common.DirectionalNavigation">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.DirectionalNavigation.Circular">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.DirectionalNavigation.Linear">
            <summary>
            
            </summary>
        </member>
        <member name="T:Imagin.Common.Hexadecimal">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Hexadecimal.Length">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Hexadecimal.#ctor(System.Windows.Media.Color)">
            <summary>
            
            </summary>
            <param name="input"></param>
        </member>
        <member name="M:Imagin.Common.Hexadecimal.#ctor(System.Byte,System.Byte,System.Byte,System.Nullable{System.Byte})">
            <summary>
            
            </summary>
            <param name="r"></param>
            <param name="g"></param>
            <param name="b"></param>
            <param name="a"></param>
        </member>
        <member name="M:Imagin.Common.Hexadecimal.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="input"></param>
        </member>
        <member name="M:Imagin.Common.Hexadecimal.op_Implicit(System.Windows.Media.Color)~Imagin.Common.Hexadecimal">
            <summary>
            
            </summary>
            <param name="input"></param>
        </member>
        <member name="M:Imagin.Common.Hexadecimal.op_Implicit(Imagin.Common.Hexadecimal)~System.Windows.Media.Color">
            <summary>
            
            </summary>
            <param name="input"></param>
        </member>
        <member name="M:Imagin.Common.Hexadecimal.op_Implicit(System.String)~Imagin.Common.Hexadecimal">
            <summary>
            
            </summary>
            <param name="input"></param>
        </member>
        <member name="M:Imagin.Common.Hexadecimal.op_Implicit(Imagin.Common.Hexadecimal)~System.String">
            <summary>
            
            </summary>
            <param name="input"></param>
        </member>
        <member name="M:Imagin.Common.Hexadecimal.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Hexadecimal.ToString(System.Boolean)">
            <summary>
            
            </summary>
            <param name="withAlpha"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Input.TextSubmittedEventArgs">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Input.TextSubmittedEventArgs.Text">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Input.TextSubmittedEventArgs.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="Text"></param>
        </member>
        <member name="T:Imagin.Common.Input.DelegateCommand">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Input.DelegateCommand.#ctor(System.Action{System.Object},System.Func{System.Object,System.Boolean})">
            <summary>
            
            </summary>
            <param name="excuteMethod"></param>
            <param name="canExecuteMethod"></param>
        </member>
        <member name="M:Imagin.Common.Input.DelegateCommand.#ctor(System.Func{System.Object,System.Threading.Tasks.Task},System.Func{System.Object,System.Boolean})">
            <summary>
            
            </summary>
            <param name="excuteMethod"></param>
            <param name="canExecuteMethod"></param>
        </member>
        <member name="M:Imagin.Common.Input.DelegateCommand.RaiseCanExecuteChanger">
            <summary>
            
            </summary>
        </member>
        <member name="E:Imagin.Common.Input.DelegateCommand.CanExecuteChanged">
            <summary>
            
            </summary>
        </member>
        <member name="T:Imagin.Common.Input.IExecuteWithObject">
            <summary>
            This interface is meant for the <see cref="T:Imagin.Common.Input.WeakAction`1" /> class and can be 
            useful if you store multiple WeakAction{T} instances but don't know in advance
            what type T represents.
            </summary>
        </member>
        <member name="M:Imagin.Common.Input.IExecuteWithObject.ExecuteWithObject(System.Object)">
            <summary>
            Executes an action.
            </summary>
            <param name="parameter">A parameter passed as an object,
            to be casted to the appropriate type.</param>
        </member>
        <member name="T:Imagin.Common.Input.IExecuteWithObjectAndResult">
            <summary>
            This interface is meant for the <see cref="T:Imagin.Common.Input.WeakFunc`1" /> class and can be 
            useful if you store multiple WeakFunc{T} instances but don't know in advance
            what type T represents.
            </summary>
        </member>
        <member name="M:Imagin.Common.Input.IExecuteWithObjectAndResult.ExecuteWithObject(System.Object)">
            <summary>
            Executes a Func and returns the result.
            </summary>
            <param name="parameter">A parameter passed as an object,
            to be casted to the appropriate type.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="T:Imagin.Common.Input.INotifyPropertyEnabled">
            <summary>
            
            </summary>
        </member>
        <member name="E:Imagin.Common.Input.INotifyPropertyEnabled.PropertyEnabled">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Input.INotifyPropertyEnabled.OnPropertyEnabled(System.String,System.Boolean)">
            <summary>
            
            </summary>
            <param name="PropertyName"></param>
            <param name="IsEnabled"></param>
        </member>
        <member name="T:Imagin.Common.Input.MapType">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Input.MapType.MAPVK_VK_TO_VSC">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Input.MapType.MAPVK_VSC_TO_VK">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Input.MapType.MAPVK_VK_TO_CHAR">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Input.MapType.MAPVK_VSC_TO_VK_EX">
            <summary>
            
            </summary>
        </member>
        <member name="T:Imagin.Common.Input.MouseEvent">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Input.MouseEvent.None">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Input.MouseEvent.Default">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Input.MouseEvent.DelayedMouseDown">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Input.MouseEvent.MouseDown">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Input.MouseEvent.MouseUp">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Input.MouseEvent.MouseDoubleClick">
            <summary>
            
            </summary>
        </member>
        <member name="T:Imagin.Common.Input.PropertyEnabledEventArgs">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Input.PropertyEnabledEventArgs.PropertyName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Input.PropertyEnabledEventArgs.IsEnabled">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Input.PropertyEnabledEventArgs.#ctor(System.String,System.Boolean)">
            <summary>
            
            </summary>
            <param name="PropertyName"></param>
            <param name="IsEnabled"></param>
        </member>
        <member name="T:Imagin.Common.Input.PropertyEnabledEventHandler">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Imagin.Common.Input.RelayCommand">
            <summary>
            A command whose sole purpose is to relay its functionality to other
            objects by invoking delegates. The default return value for the CanExecute
            method is 'true'.  This class does not allow you to accept command parameters in the
            Execute and CanExecute callback methods.
            </summary>
            <remarks>If you are using this class in WPF4.5 or above, you need to use the 
            GalaSoft.MvvmLight.CommandWpf namespace (instead of GalaSoft.MvvmLight.Command).
            This will enable (or restore) the CommandManager class which handles
            automatic enabling/disabling of controls based on the CanExecute delegate.</remarks>
        </member>
        <member name="M:Imagin.Common.Input.RelayCommand.#ctor(System.Action)">
            <summary>
            Initializes a new instance of the RelayCommand class that 
            can always execute.
            </summary>
            <param name="execute">The execution logic.</param>
            <exception cref="T:System.ArgumentNullException">If the execute argument is null.</exception>
        </member>
        <member name="M:Imagin.Common.Input.RelayCommand.#ctor(System.Action,System.Func{System.Boolean})">
            <summary>
            Initializes a new instance of the RelayCommand class.
            </summary>
            <param name="execute">The execution logic.</param>
            <param name="canExecute">The execution status logic.</param>
            <exception cref="T:System.ArgumentNullException">If the execute argument is null.</exception>
        </member>
        <member name="M:Imagin.Common.Input.RelayCommand.#ctor(System.Action,System.Boolean)">
            <summary>
            
            </summary>
            <param name="execute"></param>
            <param name="canExecute"></param>
        </member>
        <member name="E:Imagin.Common.Input.RelayCommand.CanExecuteChanged">
            <summary>
            Occurs when changes occur that affect whether the command should execute.
            </summary>
        </member>
        <member name="M:Imagin.Common.Input.RelayCommand.RaiseCanExecuteChanged">
            <summary>
            Raises the <see cref="E:Imagin.Common.Input.RelayCommand.CanExecuteChanged" /> event.
            </summary>
        </member>
        <member name="M:Imagin.Common.Input.RelayCommand.CanExecute(System.Object)">
            <summary>
            Defines the method that determines whether the command can execute in its current state.
            </summary>
            <param name="parameter">This parameter will always be ignored.</param>
            <returns>true if this command can be executed; otherwise, false.</returns>
        </member>
        <member name="M:Imagin.Common.Input.RelayCommand.Execute(System.Object)">
            <summary>
            Defines the method to be called when the command is invoked. 
            </summary>
            <param name="parameter">This parameter will always be ignored.</param>
        </member>
        <member name="T:Imagin.Common.Input.RelayCommand`1">
            <summary>
            A generic command whose sole purpose is to relay its functionality to other
            objects by invoking delegates. The default return value for the CanExecute
            method is 'true'. This class allows you to accept command parameters in the
            Execute and CanExecute callback methods.
            </summary>
            <typeparam name="T">The type of the command parameter.</typeparam>
            <remarks>If you are using this class in WPF4.5 or above, you need to use the 
            GalaSoft.MvvmLight.CommandWpf namespace (instead of GalaSoft.MvvmLight.Command).
            This will enable (or restore) the CommandManager class which handles
            automatic enabling/disabling of controls based on the CanExecute delegate.</remarks>
        </member>
        <member name="M:Imagin.Common.Input.RelayCommand`1.#ctor(System.Action{`0})">
            <summary>
            Initializes a new instance of the RelayCommand class that 
            can always execute.
            </summary>
            <param name="execute">The execution logic.</param>
            <exception cref="T:System.ArgumentNullException">If the execute argument is null.</exception>
        </member>
        <member name="M:Imagin.Common.Input.RelayCommand`1.#ctor(System.Action{`0},System.Func{`0,System.Boolean})">
            <summary>
            Initializes a new instance of the RelayCommand class.
            </summary>
            <param name="execute">The execution logic.</param>
            <param name="canExecute">The execution status logic.</param>
            <exception cref="T:System.ArgumentNullException">If the execute argument is null.</exception>
        </member>
        <member name="M:Imagin.Common.Input.RelayCommand`1.#ctor(System.Action{`0},System.Boolean)">
            <summary>
            
            </summary>
            <param name="execute"></param>
            <param name="canExecute"></param>
        </member>
        <member name="E:Imagin.Common.Input.RelayCommand`1.CanExecuteChanged">
            <summary>
            Occurs when changes occur that affect whether the command should execute.
            </summary>
        </member>
        <member name="M:Imagin.Common.Input.RelayCommand`1.RaiseCanExecuteChanged">
            <summary>
            Raises the <see cref="E:Imagin.Common.Input.RelayCommand`1.CanExecuteChanged" /> event.
            </summary>
        </member>
        <member name="M:Imagin.Common.Input.RelayCommand`1.CanExecute(System.Object)">
            <summary>
            Defines the method that determines whether the command can execute in its current state.
            </summary>
            <param name="parameter">Data used by the command. If the command does not require data 
            to be passed, this object can be set to a null reference</param>
            <returns>true if this command can be executed; otherwise, false.</returns>
        </member>
        <member name="M:Imagin.Common.Input.RelayCommand`1.Execute(System.Object)">
            <summary>
            Defines the method to be called when the command is invoked. 
            </summary>
            <param name="parameter">Data used by the command. If the command does not require data 
            to be passed, this object can be set to a null reference</param>
        </member>
        <member name="T:Imagin.Common.Input.WeakAction">
            <summary>
            Stores an <see cref="T:System.Action" /> without causing a hard reference to be created to the Action's owner. The owner can be garbage collected at any time.
            </summary>
        </member>
        <member name="P:Imagin.Common.Input.WeakAction.Method">
            <summary>
            Gets or sets the <see cref="T:System.Reflection.MethodInfo" /> corresponding to this WeakAction's
            method passed in the constructor.
            </summary>
        </member>
        <member name="P:Imagin.Common.Input.WeakAction.MethodName">
            <summary>
            Gets the name of the method that this WeakAction represents.
            </summary>
        </member>
        <member name="P:Imagin.Common.Input.WeakAction.ActionReference">
            <summary>
            Gets or sets a WeakReference to this WeakAction's action's target.
            This is not necessarily the same as
            <see cref="P:Imagin.Common.Input.WeakAction.Reference" />, for example if the
            method is anonymous.
            </summary>
        </member>
        <member name="P:Imagin.Common.Input.WeakAction.Reference">
            <summary>
            Gets or sets a WeakReference to the target passed when constructing
            the WeakAction. This is not necessarily the same as
            <see cref="P:Imagin.Common.Input.WeakAction.ActionReference" />, for example if the
            method is anonymous.
            </summary>
        </member>
        <member name="P:Imagin.Common.Input.WeakAction.IsStatic">
            <summary>
            Gets a value indicating whether the WeakAction is static or not.
            </summary>
        </member>
        <member name="M:Imagin.Common.Input.WeakAction.#ctor">
            <summary>
            Initializes an empty instance of the <see cref="T:Imagin.Common.Input.WeakAction" /> class.
            </summary>
        </member>
        <member name="M:Imagin.Common.Input.WeakAction.#ctor(System.Action)">
            <summary>
            Initializes a new instance of the <see cref="T:Imagin.Common.Input.WeakAction" /> class.
            </summary>
            <param name="action">The action that will be associated to this instance.</param>
        </member>
        <member name="M:Imagin.Common.Input.WeakAction.#ctor(System.Object,System.Action)">
            <summary>
            Initializes a new instance of the <see cref="T:Imagin.Common.Input.WeakAction" /> class.
            </summary>
            <param name="target">The action's owner.</param>
            <param name="action">The action that will be associated to this instance.</param>
        </member>
        <member name="P:Imagin.Common.Input.WeakAction.IsAlive">
            <summary>
            Gets a value indicating whether the Action's owner is still alive, or if it was collected
            by the Garbage Collector already.
            </summary>
        </member>
        <member name="P:Imagin.Common.Input.WeakAction.Target">
            <summary>
            Gets the Action's owner. This object is stored as a 
            <see cref="T:System.WeakReference" />.
            </summary>
        </member>
        <member name="P:Imagin.Common.Input.WeakAction.ActionTarget">
            <summary>
            The target of the weak reference.
            </summary>
        </member>
        <member name="M:Imagin.Common.Input.WeakAction.Execute">
            <summary>
            Executes the action. This only happens if the action's owner
            is still alive.
            </summary>
        </member>
        <member name="M:Imagin.Common.Input.WeakAction.MarkForDeletion">
            <summary>
            Sets the reference that this instance stores to null.
            </summary>
        </member>
        <member name="T:Imagin.Common.Input.WeakAction`1">
            <summary>
            Stores an Action without causing a hard reference
            to be created to the Action's owner. The owner can be garbage collected at any time.
            </summary>
            <typeparam name="T">The type of the Action's parameter.</typeparam>
        </member>
        <member name="P:Imagin.Common.Input.WeakAction`1.MethodName">
            <summary>
            Gets the name of the method that this WeakAction represents.
            </summary>
        </member>
        <member name="P:Imagin.Common.Input.WeakAction`1.IsAlive">
            <summary>
            Gets a value indicating whether the Action's owner is still alive, or if it was collected
            by the Garbage Collector already.
            </summary>
        </member>
        <member name="M:Imagin.Common.Input.WeakAction`1.#ctor(System.Action{`0})">
            <summary>
            Initializes a new instance of the WeakAction class.
            </summary>
            <param name="action">The action that will be associated to this instance.</param>
        </member>
        <member name="M:Imagin.Common.Input.WeakAction`1.#ctor(System.Object,System.Action{`0})">
            <summary>
            Initializes a new instance of the WeakAction class.
            </summary>
            <param name="target">The action's owner.</param>
            <param name="action">The action that will be associated to this instance.</param>
        </member>
        <member name="M:Imagin.Common.Input.WeakAction`1.Execute">
            <summary>
            Executes the action. This only happens if the action's owner
            is still alive. The action's parameter is set to default(T).
            </summary>
        </member>
        <member name="M:Imagin.Common.Input.WeakAction`1.Execute(`0)">
            <summary>
            Executes the action. This only happens if the action's owner is still alive.
            </summary>
            <param name="parameter">A parameter to be passed to the action.</param>
        </member>
        <member name="M:Imagin.Common.Input.WeakAction`1.ExecuteWithObject(System.Object)">
            <summary>
            Executes the action with a parameter of type object. This parameter
            will be casted to T. This method implements <see cref="M:Imagin.Common.Input.IExecuteWithObject.ExecuteWithObject(System.Object)" />
            and can be useful if you store multiple WeakAction{T} instances but don't know in advance
            what type T represents.
            </summary>
            <param name="parameter">The parameter that will be passed to the action after
            being casted to T.</param>
        </member>
        <member name="M:Imagin.Common.Input.WeakAction`1.MarkForDeletion">
            <summary>
            Sets all the actions that this WeakAction contains to null,
            which is a signal for containing objects that this WeakAction
            should be deleted.
            </summary>
        </member>
        <member name="T:Imagin.Common.Input.WeakEventHandlerManager">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Input.WeakEventHandlerManager.AddWeakReferenceHandler(System.Collections.Generic.List{System.WeakReference}@,System.EventHandler,System.Int32)">
            <summary>
            
            </summary>
            <param name="handlers"></param>
            <param name="handler"></param>
            <param name="defaultListSize"></param>
        </member>
        <member name="M:Imagin.Common.Input.WeakEventHandlerManager.CallWeakReferenecHandlers(System.Object,System.Collections.Generic.List{System.WeakReference})">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="handlers"></param>
        </member>
        <member name="M:Imagin.Common.Input.WeakEventHandlerManager.RemoveWeakReferenceHandler(System.Collections.Generic.List{System.WeakReference},System.EventHandler)">
            <summary>
            
            </summary>
            <param name="handlers"></param>
            <param name="handler"></param>
        </member>
        <member name="T:Imagin.Common.Input.WeakFunc`1">
            <summary>
            Stores a Func&lt;T&gt; without causing a hard reference
            to be created to the Func's owner. The owner can be garbage collected at any time.
            </summary>
            <typeparam name="TResult">The type of the result of the Func that will be stored
            by this weak reference.</typeparam>
        </member>
        <member name="P:Imagin.Common.Input.WeakFunc`1.Method">
            <summary>
            Gets or sets the <see cref="T:System.Reflection.MethodInfo" /> corresponding to this WeakFunc's
            method passed in the constructor.
            </summary>
        </member>
        <member name="P:Imagin.Common.Input.WeakFunc`1.IsStatic">
            <summary>
            Get a value indicating whether the WeakFunc is static or not.
            </summary>
        </member>
        <member name="P:Imagin.Common.Input.WeakFunc`1.MethodName">
            <summary>
            Gets the name of the method that this WeakFunc represents.
            </summary>
        </member>
        <member name="P:Imagin.Common.Input.WeakFunc`1.FuncReference">
            <summary>
            Gets or sets a WeakReference to this WeakFunc's action's target.
            This is not necessarily the same as
            <see cref="P:Imagin.Common.Input.WeakFunc`1.Reference" />, for example if the
            method is anonymous.
            </summary>
        </member>
        <member name="P:Imagin.Common.Input.WeakFunc`1.Reference">
            <summary>
            Gets or sets a WeakReference to the target passed when constructing
            the WeakFunc. This is not necessarily the same as
            <see cref="P:Imagin.Common.Input.WeakFunc`1.FuncReference" />, for example if the
            method is anonymous.
            </summary>
        </member>
        <member name="M:Imagin.Common.Input.WeakFunc`1.#ctor">
            <summary>
            Initializes an empty instance of the WeakFunc class.
            </summary>
        </member>
        <member name="M:Imagin.Common.Input.WeakFunc`1.#ctor(System.Func{`0})">
            <summary>
            Initializes a new instance of the WeakFunc class.
            </summary>
            <param name="func">The Func that will be associated to this instance.</param>
        </member>
        <member name="M:Imagin.Common.Input.WeakFunc`1.#ctor(System.Object,System.Func{`0})">
            <summary>
            Initializes a new instance of the WeakFunc class.
            </summary>
            <param name="target">The Func's owner.</param>
            <param name="func">The Func that will be associated to this instance.</param>
        </member>
        <member name="P:Imagin.Common.Input.WeakFunc`1.IsAlive">
            <summary>
            Gets a value indicating whether the Func's owner is still alive, or if it was collected
            by the Garbage Collector already.
            </summary>
        </member>
        <member name="P:Imagin.Common.Input.WeakFunc`1.Target">
            <summary>
            Gets the Func's owner. This object is stored as a 
            <see cref="T:System.WeakReference" />.
            </summary>
        </member>
        <member name="P:Imagin.Common.Input.WeakFunc`1.FuncTarget">
            <summary>
            Gets the owner of the Func that was passed as parameter.
            This is not necessarily the same as
            <see cref="P:Imagin.Common.Input.WeakFunc`1.Target" />, for example if the
            method is anonymous.
            </summary>
        </member>
        <member name="M:Imagin.Common.Input.WeakFunc`1.Execute">
            <summary>
            Executes the action. This only happens if the Func's owner
            is still alive.
            </summary>
            <returns>The result of the Func stored as reference.</returns>
        </member>
        <member name="M:Imagin.Common.Input.WeakFunc`1.MarkForDeletion">
            <summary>
            Sets the reference that this instance stores to null.
            </summary>
        </member>
        <member name="T:Imagin.Common.Input.WeakFunc`2">
            <summary>
            Stores an Func without causing a hard reference
            to be created to the Func's owner. The owner can be garbage collected at any time.
            </summary>
            <typeparam name="T">The type of the Func's parameter.</typeparam>
            <typeparam name="TResult">The type of the Func's return value.</typeparam>
        </member>
        <member name="P:Imagin.Common.Input.WeakFunc`2.MethodName">
            <summary>
            Gets or sets the name of the method that this WeakFunc represents.
            </summary>
        </member>
        <member name="P:Imagin.Common.Input.WeakFunc`2.IsAlive">
            <summary>
            Gets a value indicating whether the Func's owner is still alive, or if it was collected by the garbage collector already.
            </summary>
        </member>
        <member name="M:Imagin.Common.Input.WeakFunc`2.#ctor(System.Func{`0,`1})">
            <summary>
            Initializes a new instance of the WeakFunc class.
            </summary>
            <param name="func">The Func that will be associated to this instance.</param>
        </member>
        <member name="M:Imagin.Common.Input.WeakFunc`2.#ctor(System.Object,System.Func{`0,`1})">
            <summary>
            Initializes a new instance of the WeakFunc class.
            </summary>
            <param name="target">The Func's owner.</param>
            <param name="func">The Func that will be associated to this instance.</param>
        </member>
        <member name="M:Imagin.Common.Input.WeakFunc`2.Execute">
            <summary>
            Executes the Func. This only happens if the Func's owner
            is still alive. The Func's parameter is set to default(T).
            </summary>
            <returns>The result of the Func stored as reference.</returns>
        </member>
        <member name="M:Imagin.Common.Input.WeakFunc`2.Execute(`0)">
            <summary>
            Executes the Func. This only happens if the Func's owner
            is still alive.
            </summary>
            <param name="parameter">A parameter to be passed to the action.</param>
            <returns>The result of the Func stored as reference.</returns>
        </member>
        <member name="M:Imagin.Common.Input.WeakFunc`2.ExecuteWithObject(System.Object)">
            <summary>
            Executes the Func with a parameter of type object. This parameter
            will be casted to T. This method implements <see cref="M:Imagin.Common.Input.IExecuteWithObject.ExecuteWithObject(System.Object)" />
            and can be useful if you store multiple WeakFunc{T} instances but don't know in advance
            what type T represents.
            </summary>
            <param name="parameter">The parameter that will be passed to the Func after
            being casted to T.</param>
            <returns>The result of the execution as object, to be casted to T.</returns>
        </member>
        <member name="M:Imagin.Common.Input.WeakFunc`2.MarkForDeletion">
            <summary>
            Sets all the funcs that this WeakFunc contains to null,
            which is a signal for containing objects that this WeakFunc
            should be deleted.
            </summary>
        </member>
        <member name="T:Imagin.Common.Interactivity.AutoPositionPopupBehavior">
            <summary>
            Auto-positions popup when the parent element's position changes (TO-DO: support scrolling).
            </summary>
        </member>
        <member name="M:Imagin.Common.Interactivity.AutoPositionPopupBehavior.OnAttached">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Interactivity.AutoPositionPopupBehavior.Update">
            <summary>
            
            </summary>
        </member>
        <member name="T:Imagin.Common.Lang.Main">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Imagin.Common.Lang.Main.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Imagin.Common.Lang.Main.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Imagin.Common.Lang.Main.ADay">
            <summary>
              Looks up a localized string similar to A day.
            </summary>
        </member>
        <member name="P:Imagin.Common.Lang.Main.Ago">
            <summary>
              Looks up a localized string similar to Ago.
            </summary>
        </member>
        <member name="P:Imagin.Common.Lang.Main.AMinute">
            <summary>
              Looks up a localized string similar to A minute.
            </summary>
        </member>
        <member name="P:Imagin.Common.Lang.Main.AMonth">
            <summary>
              Looks up a localized string similar to A month.
            </summary>
        </member>
        <member name="P:Imagin.Common.Lang.Main.AnHour">
            <summary>
              Looks up a localized string similar to An hour.
            </summary>
        </member>
        <member name="P:Imagin.Common.Lang.Main.Ascending">
            <summary>
              Looks up a localized string similar to Ascending.
            </summary>
        </member>
        <member name="P:Imagin.Common.Lang.Main.ASecond">
            <summary>
              Looks up a localized string similar to A second.
            </summary>
        </member>
        <member name="P:Imagin.Common.Lang.Main.AYear">
            <summary>
              Looks up a localized string similar to A year.
            </summary>
        </member>
        <member name="P:Imagin.Common.Lang.Main.Back">
            <summary>
              Looks up a localized string similar to Back.
            </summary>
        </member>
        <member name="P:Imagin.Common.Lang.Main.Background">
            <summary>
              Looks up a localized string similar to Background.
            </summary>
        </member>
        <member name="P:Imagin.Common.Lang.Main.Bind">
            <summary>
              Looks up a localized string similar to Bind.
            </summary>
        </member>
        <member name="P:Imagin.Common.Lang.Main.Bottom">
            <summary>
              Looks up a localized string similar to Bottom.
            </summary>
        </member>
        <member name="P:Imagin.Common.Lang.Main.BottomLeft">
            <summary>
              Looks up a localized string similar to Bottom left.
            </summary>
        </member>
        <member name="P:Imagin.Common.Lang.Main.BottomRight">
            <summary>
              Looks up a localized string similar to Bottom right.
            </summary>
        </member>
        <member name="P:Imagin.Common.Lang.Main.Center">
            <summary>
              Looks up a localized string similar to Center.
            </summary>
        </member>
        <member name="P:Imagin.Common.Lang.Main.Clear">
            <summary>
              Looks up a localized string similar to Clear.
            </summary>
        </member>
        <member name="P:Imagin.Common.Lang.Main.CollapseGroups">
            <summary>
              Looks up a localized string similar to Collapse Groups.
            </summary>
        </member>
        <member name="P:Imagin.Common.Lang.Main.Collection">
            <summary>
              Looks up a localized string similar to Collection.
            </summary>
        </member>
        <member name="P:Imagin.Common.Lang.Main.Current">
            <summary>
              Looks up a localized string similar to Current.
            </summary>
        </member>
        <member name="P:Imagin.Common.Lang.Main.Days">
            <summary>
              Looks up a localized string similar to Days.
            </summary>
        </member>
        <member name="P:Imagin.Common.Lang.Main.Decrease">
            <summary>
              Looks up a localized string similar to Decrease.
            </summary>
        </member>
        <member name="P:Imagin.Common.Lang.Main.Descending">
            <summary>
              Looks up a localized string similar to Descending.
            </summary>
        </member>
        <member name="P:Imagin.Common.Lang.Main.Disconnect">
            <summary>
              Looks up a localized string similar to Disconnect.
            </summary>
        </member>
        <member name="P:Imagin.Common.Lang.Main.Enter">
            <summary>
              Looks up a localized string similar to Enter.
            </summary>
        </member>
        <member name="P:Imagin.Common.Lang.Main.Font">
            <summary>
              Looks up a localized string similar to Font.
            </summary>
        </member>
        <member name="P:Imagin.Common.Lang.Main.FontSize">
            <summary>
              Looks up a localized string similar to Font Size.
            </summary>
        </member>
        <member name="P:Imagin.Common.Lang.Main.Foreground">
            <summary>
              Looks up a localized string similar to Foreground.
            </summary>
        </member>
        <member name="P:Imagin.Common.Lang.Main.FromNow">
            <summary>
              Looks up a localized string similar to From now.
            </summary>
        </member>
        <member name="P:Imagin.Common.Lang.Main.HideCategories">
            <summary>
              Looks up a localized string similar to Hide categories.
            </summary>
        </member>
        <member name="P:Imagin.Common.Lang.Main.HidePassword">
            <summary>
              Looks up a localized string similar to Hide password.
            </summary>
        </member>
        <member name="P:Imagin.Common.Lang.Main.Hours">
            <summary>
              Looks up a localized string similar to Hours.
            </summary>
        </member>
        <member name="P:Imagin.Common.Lang.Main.Increase">
            <summary>
              Looks up a localized string similar to Increase.
            </summary>
        </member>
        <member name="P:Imagin.Common.Lang.Main.Key">
            <summary>
              Looks up a localized string similar to Key.
            </summary>
        </member>
        <member name="P:Imagin.Common.Lang.Main.Left">
            <summary>
              Looks up a localized string similar to Left.
            </summary>
        </member>
        <member name="P:Imagin.Common.Lang.Main.Minutes">
            <summary>
              Looks up a localized string similar to Minutes.
            </summary>
        </member>
        <member name="P:Imagin.Common.Lang.Main.Months">
            <summary>
              Looks up a localized string similar to Months.
            </summary>
        </member>
        <member name="P:Imagin.Common.Lang.Main.Name">
            <summary>
              Looks up a localized string similar to Name.
            </summary>
        </member>
        <member name="P:Imagin.Common.Lang.Main.Never">
            <summary>
              Looks up a localized string similar to Never.
            </summary>
        </member>
        <member name="P:Imagin.Common.Lang.Main.New">
            <summary>
              Looks up a localized string similar to New.
            </summary>
        </member>
        <member name="P:Imagin.Common.Lang.Main.No">
            <summary>
              Looks up a localized string similar to No.
            </summary>
        </member>
        <member name="P:Imagin.Common.Lang.Main.Now">
            <summary>
              Looks up a localized string similar to Now.
            </summary>
        </member>
        <member name="P:Imagin.Common.Lang.Main.Options">
            <summary>
              Looks up a localized string similar to Options.
            </summary>
        </member>
        <member name="P:Imagin.Common.Lang.Main.Password">
            <summary>
              Looks up a localized string similar to Password.
            </summary>
        </member>
        <member name="P:Imagin.Common.Lang.Main.Repeat">
            <summary>
              Looks up a localized string similar to Repeat.
            </summary>
        </member>
        <member name="P:Imagin.Common.Lang.Main.Reset">
            <summary>
              Looks up a localized string similar to Reset.
            </summary>
        </member>
        <member name="P:Imagin.Common.Lang.Main.Right">
            <summary>
              Looks up a localized string similar to Right.
            </summary>
        </member>
        <member name="P:Imagin.Common.Lang.Main.Search">
            <summary>
              Looks up a localized string similar to Search.
            </summary>
        </member>
        <member name="P:Imagin.Common.Lang.Main.Seconds">
            <summary>
              Looks up a localized string similar to Seconds.
            </summary>
        </member>
        <member name="P:Imagin.Common.Lang.Main.ShowCategories">
            <summary>
              Looks up a localized string similar to Show categories.
            </summary>
        </member>
        <member name="P:Imagin.Common.Lang.Main.ShowPassword">
            <summary>
              Looks up a localized string similar to Show password.
            </summary>
        </member>
        <member name="P:Imagin.Common.Lang.Main.Sort">
            <summary>
              Looks up a localized string similar to Sort.
            </summary>
        </member>
        <member name="P:Imagin.Common.Lang.Main.SortDirection">
            <summary>
              Looks up a localized string similar to Sort Direction.
            </summary>
        </member>
        <member name="P:Imagin.Common.Lang.Main.Swap">
            <summary>
              Looks up a localized string similar to Swap.
            </summary>
        </member>
        <member name="P:Imagin.Common.Lang.Main.Tomorrow">
            <summary>
              Looks up a localized string similar to Tomorrow.
            </summary>
        </member>
        <member name="P:Imagin.Common.Lang.Main.Top">
            <summary>
              Looks up a localized string similar to Top.
            </summary>
        </member>
        <member name="P:Imagin.Common.Lang.Main.TopLeft">
            <summary>
              Looks up a localized string similar to Top left.
            </summary>
        </member>
        <member name="P:Imagin.Common.Lang.Main.TopRight">
            <summary>
              Looks up a localized string similar to Top right.
            </summary>
        </member>
        <member name="P:Imagin.Common.Lang.Main.Type">
            <summary>
              Looks up a localized string similar to Type.
            </summary>
        </member>
        <member name="P:Imagin.Common.Lang.Main.Unbind">
            <summary>
              Looks up a localized string similar to Unbind.
            </summary>
        </member>
        <member name="P:Imagin.Common.Lang.Main.Username">
            <summary>
              Looks up a localized string similar to Username.
            </summary>
        </member>
        <member name="P:Imagin.Common.Lang.Main.Value">
            <summary>
              Looks up a localized string similar to Value.
            </summary>
        </member>
        <member name="P:Imagin.Common.Lang.Main.Years">
            <summary>
              Looks up a localized string similar to Years.
            </summary>
        </member>
        <member name="P:Imagin.Common.Lang.Main.Yes">
            <summary>
              Looks up a localized string similar to Yes.
            </summary>
        </member>
        <member name="P:Imagin.Common.Lang.Main.Yesterday">
            <summary>
              Looks up a localized string similar to Yesterday.
            </summary>
        </member>
        <member name="T:Imagin.Common.Linq.ControlExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Linq.ControlExtensions.IsPossibleDropTarget">
            <summary>
            Indicates whether or not the current item is a possible drop target
            </summary>
        </member>
        <member name="F:Imagin.Common.Linq.ControlExtensions.ContentProperty">
            <summary>
            Enables assigning any FrameworkElement a 'content' object.
            </summary>
        </member>
        <member name="M:Imagin.Common.Linq.ControlExtensions.GetContent(System.Windows.Controls.Control)">
            <summary>
            
            </summary>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.ControlExtensions.SetContent(System.Windows.Controls.Control,System.Object)">
            <summary>
            
            </summary>
            <param name="d"></param>
            <param name="value"></param>
        </member>
        <member name="F:Imagin.Common.Linq.ControlExtensions.IsDraggingOverKey">
            <summary>
            Indicates whether or not the current item is a possible drop target
            </summary>
        </member>
        <member name="F:Imagin.Common.Linq.ControlExtensions.IsDraggingOverProperty">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Linq.ControlExtensions.GetIsDraggingOver(System.Windows.Controls.Control)">
            <summary>
            
            </summary>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="F:Imagin.Common.Linq.ControlExtensions.IsMouseDirectlyOverKey">
            <summary>
            Indicates whether or not the mouse is directly over an item.
            </summary>
        </member>
        <member name="F:Imagin.Common.Linq.ControlExtensions.IsMouseDirectlyOverProperty">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Linq.ControlExtensions.GetIsMouseDirectlyOver(System.Windows.Controls.Control)">
            <summary>
            
            </summary>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="F:Imagin.Common.Linq.ControlExtensions.IsReadOnlyProperty">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Linq.ControlExtensions.SetIsReadOnly(System.Windows.Controls.Control,System.Boolean)">
            <summary>
            
            </summary>
            <param name="d"></param>
            <param name="value"></param>
        </member>
        <member name="M:Imagin.Common.Linq.ControlExtensions.GetIsReadOnly(System.Windows.Controls.Control)">
            <summary>
            
            </summary>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.ControlExtensions.OnUpdateOverItem(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            This method is a listener for the UpdateOverItemEvent.  
            When it is received, it means that the sender is the 
            closest item to the mouse (closest logically, not visually).
            </summary>
        </member>
        <member name="M:Imagin.Common.Linq.ControlExtensions.OnDragOver(System.Object,System.Windows.DragEventArgs)">
            <summary>
            Called when an item is dragged over the control.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Windows.DragEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Imagin.Common.Linq.ControlExtensions.OnDragLeave(System.Object,System.Windows.DragEventArgs)">
            <summary>
            Called when the drag cursor leaves the control.
            </summary>
            <param name="sender">The sender.</param>
            <param name="args">The <see cref="T:System.Windows.DragEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:Imagin.Common.Linq.DataGridExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Linq.DataGridExtensions.ExtendsDefaultBehaviorProperty">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Linq.DataGridExtensions.GetExtendsDefaultBehavior(Imagin.Common.DataGrid)">
            <summary>
            
            </summary>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.DataGridExtensions.SetExtendsDefaultBehavior(Imagin.Common.DataGrid,System.Boolean)">
            <summary>
            
            </summary>
            <param name="d"></param>
            <param name="value"></param>
        </member>
        <member name="F:Imagin.Common.Linq.DataGridExtensions.AddCommand">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Linq.DataGridExtensions.DisplayRowNumberProperty">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Linq.DataGridExtensions.GetDisplayRowNumber(Imagin.Common.DataGrid)">
            <summary>
            
            </summary>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.DataGridExtensions.SetDisplayRowNumber(Imagin.Common.DataGrid,System.Boolean)">
            <summary>
            
            </summary>
            <param name="d"></param>
            <param name="value"></param>
        </member>
        <member name="F:Imagin.Common.Linq.DataGridExtensions.DisplayRowNumberOffsetProperty">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Linq.DataGridExtensions.GetDisplayRowNumberOffset(System.Windows.DependencyObject)">
            <summary>
            
            </summary>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.DataGridExtensions.SetDisplayRowNumberOffset(System.Windows.DependencyObject,System.Int32)">
            <summary>
            
            </summary>
            <param name="d"></param>
            <param name="value"></param>
        </member>
        <member name="F:Imagin.Common.Linq.DataGridExtensions._ScrollAddedIntoView">
            <summary>
            Stores reference to every <see cref="T:Imagin.Common.DataGrid"/> with <see cref="F:Imagin.Common.Linq.DataGridExtensions.ScrollAddedIntoViewProperty"/> enabled; the key is the hash code of the value's underlying collection.
            </summary>
        </member>
        <member name="F:Imagin.Common.Linq.DataGridExtensions.ScrollAddedIntoViewProperty">
            <summary>
            Gets or sets whether or not to scroll newly added items into view; note, the underlying collection MUST implement <see cref="T:Imagin.Common.Collections.Generic.IObservableCollection`1"/>.
            </summary>
        </member>
        <member name="M:Imagin.Common.Linq.DataGridExtensions.GetScrollAddedIntoView(Imagin.Common.DataGrid)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Linq.DataGridExtensions.SetScrollAddedIntoView(Imagin.Common.DataGrid,System.Boolean)">
            <summary>
            
            </summary>
            <param name="d"></param>
            <param name="value"></param>
        </member>
        <member name="M:Imagin.Common.Linq.DataGridExtensions.OnScrollAddedIntoViewChanged(System.Object,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Occurs when <see cref="F:Imagin.Common.Linq.DataGridExtensions.ScrollAddedIntoViewProperty"/> changes.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Imagin.Common.Linq.DataGridExtensions.OnScrollAddedIntoViewChanged(Imagin.Common.DataGrid,Imagin.Common.Collections.IObservableCollection,System.Boolean)">
            <summary>
            Adds/removes and registers/unregisters events associated with <see cref="F:Imagin.Common.Linq.DataGridExtensions.ScrollAddedIntoViewProperty"/>, respectively.
            </summary>
            <param name="DataGrid"></param>
            <param name="Collection"></param>
            <param name="Register"></param>
        </member>
        <member name="M:Imagin.Common.Linq.DataGridExtensions.OnScrollAddedIntoViewChanged(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Occurs when <see cref="T:Imagin.Common.DataGrid"/> loads.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Imagin.Common.Linq.DataGridExtensions.OnScrollAddedIntoViewChanged(System.Object,Imagin.Common.Input.EventArgs{System.Object})">
            <summary>
            Occurs when an item is added to the <see cref="T:Imagin.Common.DataGrid"/>.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Imagin.Common.Linq.FlowDocumentExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Linq.FlowDocumentExtensions.Paragraphs(System.Windows.Documents.FlowDocument)">
            <summary>
            Gets all paragraphs for the given <see cref="T:System.Windows.Documents.FlowDocument"/>.
            </summary>
            <param name="Document"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Linq.GridExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Linq.GridExtensions.ColumnsProperty">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Linq.GridExtensions.GetColumns(System.Windows.FrameworkElement)">
            <summary>
            
            </summary>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.GridExtensions.SetColumns(System.Windows.FrameworkElement,System.Int32)">
            <summary>
            
            </summary>
            <param name="d"></param>
            <param name="value"></param>
        </member>
        <member name="F:Imagin.Common.Linq.GridExtensions.RowsProperty">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Linq.GridExtensions.GetRows(System.Windows.FrameworkElement)">
            <summary>
            
            </summary>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.GridExtensions.SetRows(System.Windows.FrameworkElement,System.Int32)">
            <summary>
            
            </summary>
            <param name="d"></param>
            <param name="value"></param>
        </member>
        <member name="T:Imagin.Common.Linq.ItemsControlExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Linq.ItemsControlExtensions.AutoSizeColumnsProperty">
            <summary>
            Applies GridUnit.Star GridLength to all columns.
            </summary>
        </member>
        <member name="M:Imagin.Common.Linq.ItemsControlExtensions.GetAutoSizeColumns(System.Windows.Controls.ItemsControl)">
            <summary>
            
            </summary>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.ItemsControlExtensions.SetAutoSizeColumns(System.Windows.Controls.ItemsControl,System.Boolean)">
            <summary>
            
            </summary>
            <param name="d"></param>
            <param name="value"></param>
        </member>
        <member name="F:Imagin.Common.Linq.ItemsControlExtensions.CanDragSelectProperty">
            <summary>
            Gets or sets value indicating whether ItemsControl should allow drag selecting items.
            </summary>
        </member>
        <member name="M:Imagin.Common.Linq.ItemsControlExtensions.GetCanDragSelect(System.Windows.DependencyObject)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.ItemsControlExtensions.SetCanDragSelect(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <param name="value"></param>
        </member>
        <member name="F:Imagin.Common.Linq.ItemsControlExtensions.IsColumnMenuEnabledProperty">
            <summary>
            Determines whether or not to add a ContextMenu to the column header for toggling column visibility.
            </summary>
        </member>
        <member name="M:Imagin.Common.Linq.ItemsControlExtensions.GetIsColumnMenuEnabled(System.Windows.Controls.ItemsControl)">
            <summary>
            
            </summary>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.ItemsControlExtensions.SetIsColumnMenuEnabled(System.Windows.Controls.ItemsControl,System.Boolean)">
            <summary>
            
            </summary>
            <param name="d"></param>
            <param name="value"></param>
        </member>
        <member name="F:Imagin.Common.Linq.ItemsControlExtensions.DragScrollOffsetProperty">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Linq.ItemsControlExtensions.GetDragScrollOffset(System.Windows.DependencyObject)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.ItemsControlExtensions.SetDragScrollOffset(System.Windows.DependencyObject,System.Double)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <param name="value"></param>
        </member>
        <member name="F:Imagin.Common.Linq.ItemsControlExtensions.DragScrollToleranceProperty">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Linq.ItemsControlExtensions.GetDragScrollTolerance(System.Windows.DependencyObject)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.ItemsControlExtensions.SetDragScrollTolerance(System.Windows.DependencyObject,System.Double)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <param name="value"></param>
        </member>
        <member name="F:Imagin.Common.Linq.ItemsControlExtensions.SelectNoneOnEmptySpaceClickProperty">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Linq.ItemsControlExtensions.GetSelectNoneOnEmptySpaceClick(System.Windows.DependencyObject)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.ItemsControlExtensions.SetSelectNoneOnEmptySpaceClick(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <param name="value"></param>
        </member>
        <member name="M:Imagin.Common.Linq.ItemsControlExtensions.CollapseSiblings(System.Windows.Controls.ItemsControl,System.Windows.Controls.TreeViewItem)">
            <summary>
            Collapse all items in ItemsControl (siblings of <see langword="Source"/>).
            </summary>
            <param name="Parent"></param>
            <param name="Source"></param>
        </member>
        <member name="M:Imagin.Common.Linq.ItemsControlExtensions.ClearSelection(System.Windows.Controls.ItemsControl)">
            <summary>
            
            </summary>
            <param name="ToEvaluate"></param>
        </member>
        <member name="M:Imagin.Common.Linq.ItemsControlExtensions.Select(System.Windows.Controls.ItemsControl,System.Object)">
            <summary>
            
            </summary>
            <param name="Control"></param>
            <param name="Item"></param>
        </member>
        <member name="M:Imagin.Common.Linq.ItemsControlExtensions.TryClearSelection(System.Windows.Controls.ItemsControl)">
            <summary>
            
            </summary>
            <param name="ToEvaluate"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Linq.ListBoxExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Linq.ListBoxExtensions.IsDirectionalSelectionEnabledProperty">
            <summary>
            Determines whether or not directional keys can 
            be used to select items; intended for complex 
            views where items are organized in both rows 
            and columns.
            </summary>
            <pseudo>
            If up or left is clicked and nothing is selected, 
            select first. If bottom or right is clicked and 
            nothing is selected, select last. If first is 
            selected and clicking left or up, select last. 
            If last is selected and clicking right or down, 
            select first.
            </pseudo>
        </member>
        <member name="M:Imagin.Common.Linq.ListBoxExtensions.GetIsDirectionalSelectionEnabled(System.Windows.Controls.ListBox)">
            <summary>
            
            </summary>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.ListBoxExtensions.SetIsDirectionalSelectionEnabled(System.Windows.Controls.ListBox,System.Boolean)">
            <summary>
            
            </summary>
            <param name="d"></param>
            <param name="value"></param>
        </member>
        <member name="F:Imagin.Common.Linq.ListBoxExtensions.SelectionWrapProperty">
            <summary>
            Determines whether or not selections made with directional keys "wrap" ends.
            </summary>
            <remarks>
            IsDirectionalSelectionEnabled must be set to true.
            </remarks>
        </member>
        <member name="M:Imagin.Common.Linq.ListBoxExtensions.GetSelectionWrap(System.Windows.DependencyObject)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.ListBoxExtensions.SetSelectionWrap(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <param name="value"></param>
        </member>
        <member name="T:Imagin.Common.Linq.MenuItemExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Linq.MenuItemExtensions.elements">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Linq.MenuItemExtensions.IconTemplateProperty">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Linq.MenuItemExtensions.GetIconTemplate(System.Windows.FrameworkElement)">
            <summary>
            
            </summary>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.MenuItemExtensions.SetIconTemplate(System.Windows.FrameworkElement,System.Windows.DataTemplate)">
            <summary>
            
            </summary>
            <param name="d"></param>
            <param name="value"></param>
        </member>
        <member name="F:Imagin.Common.Linq.MenuItemExtensions.GroupNameProperty">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Linq.MenuItemExtensions.SetGroupName(System.Windows.Controls.MenuItem,System.String)">
            <summary>
            
            </summary>
            <param name="d"></param>
            <param name="Value"></param>
        </member>
        <member name="M:Imagin.Common.Linq.MenuItemExtensions.GetGroupName(System.Windows.Controls.MenuItem)">
            <summary>
            
            </summary>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="F:Imagin.Common.Linq.MenuItemExtensions.SelectionModeProperty">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Linq.MenuItemExtensions.SetSelectionMode(System.Windows.Controls.MenuItem,Imagin.Common.MenuItemSelectionMode)">
            <summary>
            
            </summary>
            <param name="d"></param>
            <param name="Value"></param>
        </member>
        <member name="M:Imagin.Common.Linq.MenuItemExtensions.GetSelectionMode(System.Windows.Controls.MenuItem)">
            <summary>
            
            </summary>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.MenuItemExtensions.OnChecked(System.Object,System.Windows.RoutedEventArgs)">
            <remarks>
            Let's assume the MenuItem was generated from
            a collection of enum values. The data context 
            for the MenuItem would be = to a unique enum 
            value. The GroupSource should be bound to a 
            property somewhere that stores a reference to 
            the current enum value. When checking a MenuItem,
            it is necessary to update the GroupSource so the
            source reflects the checked value. The GroupSource
            should only update when an initial value has
            been set. 
            </remarks>
        </member>
        <member name="T:Imagin.Common.Linq.OrientationExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Linq.OrientationExtensions.Invert(System.Windows.Controls.Orientation)">
            <summary>
            
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Linq.PanelExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Linq.PanelExtensions.HorizontalContentAlignmentProperty">
            <summary>
            Applies <see cref="T:System.Windows.HorizontalAlignment"/> to all children except those that define <see cref="F:Imagin.Common.Linq.FrameworkElementExtensions.HorizontalAlignmentProperty"/>.
            </summary>
        </member>
        <member name="M:Imagin.Common.Linq.PanelExtensions.SetHorizontalContentAlignment(System.Windows.Controls.Panel,System.Windows.HorizontalAlignment)">
            <summary>
            
            </summary>
            <param name="d"></param>
            <param name="value"></param>
        </member>
        <member name="M:Imagin.Common.Linq.PanelExtensions.GetHorizontalContentAlignment(System.Windows.Controls.Panel)">
            <summary>
            
            </summary>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="F:Imagin.Common.Linq.PanelExtensions.SpacingProperty">
            <summary>
            Applies <see cref="T:System.Windows.Thickness"/> to all children except those that define <see cref="F:Imagin.Common.Linq.FrameworkElementExtensions.MarginProperty"/>.
            </summary>
        </member>
        <member name="M:Imagin.Common.Linq.PanelExtensions.SetSpacing(System.Windows.Controls.Panel,System.Windows.Thickness)">
            <summary>
            
            </summary>
            <param name="d"></param>
            <param name="value"></param>
        </member>
        <member name="M:Imagin.Common.Linq.PanelExtensions.GetSpacing(System.Windows.Controls.Panel)">
            <summary>
            
            </summary>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="F:Imagin.Common.Linq.PanelExtensions.TrimFirstProperty">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Linq.PanelExtensions.SetTrimFirst(System.Windows.Controls.Panel,System.Boolean)">
            <summary>
            
            </summary>
            <param name="d"></param>
            <param name="value"></param>
        </member>
        <member name="M:Imagin.Common.Linq.PanelExtensions.GetTrimFirst(System.Windows.Controls.Panel)">
            <summary>
            
            </summary>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="F:Imagin.Common.Linq.PanelExtensions.TrimLastProperty">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Linq.PanelExtensions.SetTrimLast(System.Windows.Controls.Panel,System.Boolean)">
            <summary>
            
            </summary>
            <param name="d"></param>
            <param name="value"></param>
        </member>
        <member name="M:Imagin.Common.Linq.PanelExtensions.GetTrimLast(System.Windows.Controls.Panel)">
            <summary>
            
            </summary>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="F:Imagin.Common.Linq.PanelExtensions.VerticalContentAlignmentProperty">
            <summary>
            Applies <see cref="T:System.Windows.VerticalAlignment"/> to all children except those that define <see cref="F:Imagin.Common.Linq.FrameworkElementExtensions.VerticalAlignmentProperty"/>.
            </summary>
        </member>
        <member name="M:Imagin.Common.Linq.PanelExtensions.SetVerticalContentAlignment(System.Windows.Controls.Panel,System.Windows.VerticalAlignment)">
            <summary>
            
            </summary>
            <param name="d"></param>
            <param name="value"></param>
        </member>
        <member name="M:Imagin.Common.Linq.PanelExtensions.GetVerticalContentAlignment(System.Windows.Controls.Panel)">
            <summary>
            
            </summary>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Linq.TextBoxBaseExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Linq.TextBoxBaseExtensions.EnableCopyCommandProperty">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Linq.TextBoxBaseExtensions.SetEnableCopyCommand(System.Windows.Controls.Primitives.TextBoxBase,System.Boolean)">
            <summary>
            
            </summary>
            <param name="d"></param>
            <param name="value"></param>
        </member>
        <member name="M:Imagin.Common.Linq.TextBoxBaseExtensions.GetEnableCopyCommand(System.Windows.Controls.Primitives.TextBoxBase)">
            <summary>
            
            </summary>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="F:Imagin.Common.Linq.TextBoxBaseExtensions.EnableCutCommandProperty">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Linq.TextBoxBaseExtensions.SetEnableCutCommand(System.Windows.Controls.Primitives.TextBoxBase,System.Boolean)">
            <summary>
            
            </summary>
            <param name="d"></param>
            <param name="value"></param>
        </member>
        <member name="M:Imagin.Common.Linq.TextBoxBaseExtensions.GetEnableCutCommand(System.Windows.Controls.Primitives.TextBoxBase)">
            <summary>
            
            </summary>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="F:Imagin.Common.Linq.TextBoxBaseExtensions.EnablePasteCommandProperty">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Linq.TextBoxBaseExtensions.SetEnablePasteCommand(System.Windows.Controls.Primitives.TextBoxBase,System.Boolean)">
            <summary>
            
            </summary>
            <param name="d"></param>
            <param name="value"></param>
        </member>
        <member name="M:Imagin.Common.Linq.TextBoxBaseExtensions.GetEnablePasteCommand(System.Windows.Controls.Primitives.TextBoxBase)">
            <summary>
            
            </summary>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Linq.TreeViewExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Linq.TreeViewExtensions.Enumerate(System.Windows.Controls.ItemsControl,System.Action{System.Object,System.Windows.Controls.ItemsControl})">
            <summary>
            Enumerate <see cref="T:System.Windows.Controls.ItemsControl"/> performing given action for each child.
            <para>(recursive)</para>
            </summary>
            <param name="Control"></param>
            <param name="Action"></param>
        </member>
        <member name="M:Imagin.Common.Linq.TreeViewExtensions.Enumerate(System.Windows.Controls.ItemsControl,System.Func{System.Object,System.Windows.Controls.ItemsControl,System.Nullable{System.Boolean}})">
            <summary>
            Enumerate <see cref="T:System.Windows.Controls.ItemsControl"/> performing given action for each child; return false to continue (skip children, continue with next), null to break (skip everything else), or true (proceed normally).
            <para>(recursive)</para>
            </summary>
            <param name="Control"></param>
            <param name="Action"></param>
        </member>
        <member name="M:Imagin.Common.Linq.TreeViewExtensions.Enumerate(System.Windows.Controls.ItemsControl,System.Action{System.Object,System.Windows.Controls.ItemsControl},System.Int32[])">
            <summary>
            Enumerate given indices of <see cref="T:System.Windows.Controls.ItemsControl"/> and perform given action for each child.
            <para>(recursive)</para>
            </summary>
            <param name="Control"></param>
            <param name="Action"></param>
            <param name="Indices"></param>
        </member>
        <member name="M:Imagin.Common.Linq.TreeViewExtensions.Enumerate``1(System.Windows.Controls.ItemsControl,System.Action{``0,System.Windows.Controls.ItemsControl})">
            <summary>
            Enumerate <see cref="T:System.Windows.Controls.ItemsControl"/> performing given action for each child.
            <para>(recursive)</para>
            </summary>
            <param name="Control"></param>
            <param name="Action"></param>
        </member>
        <member name="M:Imagin.Common.Linq.TreeViewExtensions.Enumerate``1(System.Windows.Controls.ItemsControl,System.Func{``0,System.Windows.Controls.ItemsControl,System.Nullable{System.Boolean}})">
            <summary>
            Enumerate <see cref="T:System.Windows.Controls.ItemsControl"/> performing given action for each child; return false to continue (skip children, continue with next), null to break (skip everything else), or true (proceed normally). 
            <para>(recursive)</para>
            </summary>
            <param name="Control"></param>
            <param name="Action"></param>
        </member>
        <member name="M:Imagin.Common.Linq.TreeViewExtensions.Enumerate``1(System.Windows.Controls.ItemsControl,System.Action{``0,System.Windows.Controls.ItemsControl},System.Int32[])">
            <summary>
            Enumerate given indices of <see cref="T:System.Windows.Controls.ItemsControl"/> and perform given action for each child. 
            <para>(recursive)</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Control"></param>
            <param name="Action"></param>
            <param name="Indices"></param>
        </member>
        <member name="M:Imagin.Common.Linq.TreeViewExtensions.GetAllItems(System.Windows.Controls.ItemsControl,System.Collections.Generic.ICollection{System.Windows.Controls.TreeViewItem})">
            <summary>
            
            </summary>
            <param name="Control"></param>
            <param name="AllItems"></param>
        </member>
        <member name="M:Imagin.Common.Linq.TreeViewExtensions.SelectItem(Imagin.Common.TreeView,System.Windows.Controls.TreeViewItem)">
            <summary>
            
            </summary>
            <param name="TreeView"></param>
            <param name="Item"></param>
        </member>
        <member name="M:Imagin.Common.Linq.TreeViewExtensions.SelectItems(Imagin.Common.TreeView,System.Windows.Controls.TreeViewItem)">
            <summary>
            
            </summary>
            <param name="TreeView"></param>
            <param name="Item"></param>
        </member>
        <member name="M:Imagin.Common.Linq.TreeViewExtensions.SelectItemsContinuously(Imagin.Common.TreeView,System.Windows.Controls.TreeViewItem,System.Boolean)">
            <summary>
            
            </summary>
            <param name="TreeView"></param>
            <param name="TreeViewItem"></param>
            <param name="ShiftControl"></param>
        </member>
        <member name="M:Imagin.Common.Linq.TreeViewExtensions.SelectItemsRandomly(Imagin.Common.TreeView,System.Windows.Controls.TreeViewItem)">
            <summary>
            
            </summary>
            <param name="TreeView"></param>
            <param name="TreeViewItem"></param>
        </member>
        <member name="M:Imagin.Common.Linq.TreeViewExtensions.SelectNone(System.Windows.Controls.ItemsControl)">
            <summary>
            
            </summary>
            <param name="Control"></param>
        </member>
        <member name="F:Imagin.Common.Linq.TreeViewExtensions.SelectedItemsProperty">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Linq.TreeViewExtensions.GetSelectedItems(Imagin.Common.TreeView)">
            <summary>
            
            </summary>
            <param name="TreeView"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.TreeViewExtensions.SetSelectedItems(Imagin.Common.TreeView,System.Collections.IList)">
            <summary>
            
            </summary>
            <param name="TreeView"></param>
            <param name="Value"></param>
        </member>
        <member name="F:Imagin.Common.Linq.TreeViewExtensions.SelectionModeProperty">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Linq.TreeViewExtensions.GetSelectionMode(Imagin.Common.TreeView)">
            <summary>
            
            </summary>
            <param name="TreeView"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.TreeViewExtensions.SetSelectionMode(Imagin.Common.TreeView,Imagin.Common.TreeViewSelectionMode)">
            <summary>
            
            </summary>
            <param name="TreeView"></param>
            <param name="Value"></param>
        </member>
        <member name="T:Imagin.Common.Linq.TreeViewItemExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Linq.TreeViewItemExtensions.CollapseSiblings(System.Windows.Controls.TreeViewItem)">
            <summary>
            Collapses siblings of <param name="Item"/>.
            </summary>
        </member>
        <member name="M:Imagin.Common.Linq.TreeViewItemExtensions.GetDepth(System.Windows.Controls.TreeViewItem)">
            <summary>
            Get depth for given node.
            </summary>
        </member>
        <member name="F:Imagin.Common.Linq.TreeViewItemExtensions.CollapseSiblingsOnClickProperty">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Linq.TreeViewItemExtensions.GetCollapseSiblingsOnClick(System.Windows.Controls.TreeViewItem)">
            <summary>
            
            </summary>
            <param name="Item"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.TreeViewItemExtensions.SetCollapseSiblingsOnClick(System.Windows.Controls.TreeViewItem,System.Boolean)">
            <summary>
            
            </summary>
            <param name="Item"></param>
            <param name="Value"></param>
        </member>
        <member name="F:Imagin.Common.Linq.TreeViewItemExtensions.IsSelectedProperty">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Linq.TreeViewItemExtensions.GetIsSelected(System.Windows.Controls.TreeViewItem)">
            <summary>
            
            </summary>
            <param name="Item"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.TreeViewItemExtensions.SetIsSelected(System.Windows.Controls.TreeViewItem,System.Boolean)">
            <summary>
            
            </summary>
            <param name="Item"></param>
            <param name="Value"></param>
        </member>
        <member name="F:Imagin.Common.Linq.TreeViewItemExtensions.ExpandOnClickProperty">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Linq.TreeViewItemExtensions.GetExpandOnClick(System.Windows.Controls.TreeViewItem)">
            <summary>
            
            </summary>
            <param name="Item"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.TreeViewItemExtensions.SetExpandOnClick(System.Windows.Controls.TreeViewItem,System.Boolean)">
            <summary>
            
            </summary>
            <param name="Item"></param>
            <param name="Value"></param>
        </member>
        <member name="F:Imagin.Common.Linq.TreeViewItemExtensions.SelectOnRightClickProperty">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Linq.TreeViewItemExtensions.GetSelectOnRightClick(System.Windows.Controls.TreeViewItem)">
            <summary>
            
            </summary>
            <param name="Item"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.TreeViewItemExtensions.SetSelectOnRightClick(System.Windows.Controls.TreeViewItem,System.Boolean)">
            <summary>
            
            </summary>
            <param name="Item"></param>
            <param name="Value"></param>
        </member>
        <member name="T:Imagin.Common.Linq.WindowExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="T:Imagin.Common.Linq.WindowExtensions.MONITORINFO">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Linq.WindowExtensions.MONITORINFO.cbSize">
            <summary>
            </summary>            
        </member>
        <member name="F:Imagin.Common.Linq.WindowExtensions.MONITORINFO.rcMonitor">
            <summary>
            </summary>            
        </member>
        <member name="F:Imagin.Common.Linq.WindowExtensions.MONITORINFO.rcWork">
            <summary>
            </summary>            
        </member>
        <member name="F:Imagin.Common.Linq.WindowExtensions.MONITORINFO.dwFlags">
            <summary>
            </summary>            
        </member>
        <member name="F:Imagin.Common.Linq.WindowExtensions.SinkerProperty">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Linq.WindowExtensions.GetSinker(System.Windows.DependencyObject)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.WindowExtensions.SetSinker(System.Windows.DependencyObject,Imagin.Common.WindowSinker)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <param name="value"></param>
        </member>
        <member name="F:Imagin.Common.Linq.WindowExtensions.AlwaysOnBottomProperty">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Linq.WindowExtensions.GetAlwaysOnBottom(System.Windows.DependencyObject)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.WindowExtensions.SetAlwaysOnBottom(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <param name="value"></param>
        </member>
        <member name="F:Imagin.Common.Linq.WindowExtensions.IconProperty">
            <summary>
            Gets or sets a value indicating whether window should implement default behavior; this is only applicable when window
            a) overrides default style,
            b) allows transparency, and
            c) style is set to 'None'.
            </summary>
        </member>
        <member name="M:Imagin.Common.Linq.WindowExtensions.GetIcon(System.Windows.DependencyObject)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.WindowExtensions.SetIcon(System.Windows.DependencyObject,System.Windows.Media.ImageSource)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <param name="value"></param>
        </member>
        <member name="F:Imagin.Common.Linq.WindowExtensions.OverridesDefaultBehaviorProperty">
            <summary>
            Gets or sets a value indicating whether window should implement default behavior; this is only applicable when window
            a) overrides default style,
            b) allows transparency, and
            c) style is set to 'None'.
            </summary>
        </member>
        <member name="M:Imagin.Common.Linq.WindowExtensions.GetOverridesDefaultBehavior(System.Windows.DependencyObject)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.WindowExtensions.SetOverridesDefaultBehavior(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <param name="value"></param>
        </member>
        <member name="T:Imagin.Common.Linq.WindowExtensions.MINMAXINFO">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Linq.WindowExtensions.MINMAXINFO.ptReserved">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Linq.WindowExtensions.MINMAXINFO.ptMaxSize">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Linq.WindowExtensions.MINMAXINFO.ptMaxPosition">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Linq.WindowExtensions.MINMAXINFO.ptMinTrackSize">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Linq.WindowExtensions.MINMAXINFO.ptMaxTrackSize">
            <summary>
            
            </summary>
        </member>
        <member name="T:Imagin.Common.Linq.WindowExtensions.POINT">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Linq.WindowExtensions.POINT.x">
            <summary>
            x coordinate of point.
            </summary>
        </member>
        <member name="F:Imagin.Common.Linq.WindowExtensions.POINT.y">
            <summary>
            y coordinate of point.
            </summary>
        </member>
        <member name="M:Imagin.Common.Linq.WindowExtensions.POINT.#ctor(System.Int32,System.Int32)">
            <summary>
            Construct a point of coordinates (x,y).
            </summary>
        </member>
        <member name="T:Imagin.Common.Linq.WindowExtensions.RECT">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Linq.WindowExtensions.RECT.left">
            <summary> Win32 </summary>
        </member>
        <member name="F:Imagin.Common.Linq.WindowExtensions.RECT.top">
            <summary> Win32 </summary>
        </member>
        <member name="F:Imagin.Common.Linq.WindowExtensions.RECT.right">
            <summary> Win32 </summary>
        </member>
        <member name="F:Imagin.Common.Linq.WindowExtensions.RECT.bottom">
            <summary> Win32 </summary>
        </member>
        <member name="F:Imagin.Common.Linq.WindowExtensions.RECT.Empty">
            <summary> Win32 </summary>
        </member>
        <member name="P:Imagin.Common.Linq.WindowExtensions.RECT.Width">
            <summary> Win32 </summary>
        </member>
        <member name="P:Imagin.Common.Linq.WindowExtensions.RECT.Height">
            <summary> Win32 </summary>
        </member>
        <member name="M:Imagin.Common.Linq.WindowExtensions.RECT.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary> Win32 </summary>
        </member>
        <member name="M:Imagin.Common.Linq.WindowExtensions.RECT.#ctor(Imagin.Common.Linq.WindowExtensions.RECT)">
            <summary> Win32 </summary>
        </member>
        <member name="P:Imagin.Common.Linq.WindowExtensions.RECT.IsEmpty">
            <summary> Win32 </summary>
        </member>
        <member name="M:Imagin.Common.Linq.WindowExtensions.RECT.ToString">
            <summary> Return a user friendly representation of this struct </summary>
        </member>
        <member name="M:Imagin.Common.Linq.WindowExtensions.RECT.Equals(System.Object)">
            <summary> Determine if 2 RECT are equal (deep compare) </summary>
        </member>
        <member name="M:Imagin.Common.Linq.WindowExtensions.RECT.GetHashCode">
            <summary>Return the HashCode for this struct (not garanteed to be unique)</summary>
        </member>
        <member name="M:Imagin.Common.Linq.WindowExtensions.RECT.op_Equality(Imagin.Common.Linq.WindowExtensions.RECT,Imagin.Common.Linq.WindowExtensions.RECT)">
            <summary> Determine if 2 RECT are equal (deep compare)</summary>
        </member>
        <member name="M:Imagin.Common.Linq.WindowExtensions.RECT.op_Inequality(Imagin.Common.Linq.WindowExtensions.RECT,Imagin.Common.Linq.WindowExtensions.RECT)">
            <summary> Determine if 2 RECT are different(deep compare)</summary>
        </member>
        <member name="T:Imagin.Common.Linq.BooleanExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Linq.BooleanExtensions.ToVisibility(System.Boolean,System.Windows.Visibility)">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <param name="FalseVisibility"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Linq.BrushExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Linq.BrushExtensions.Duplicate(System.Windows.Media.Brush)">
            <summary>
            Creates <see cref="T:System.Windows.Media.Brush"/> from specified <see cref="T:System.Windows.Media.Brush"/> and it's values.
            </summary>
        </member>
        <member name="T:Imagin.Common.Linq.ColorExtensions">
            <summary>
            
            </summary>
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Linq.ColorExtensions.ToMedia(System.Drawing.Color)">
            <summary>
            
            </summary>
            <param name="color"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.ColorExtensions.DistanceFrom(System.Windows.Media.Color,System.Windows.Media.Color)">
            <summary>
            Gets distance to a color from given color.
            </summary>
            <param name="First"></param>
            <param name="Second"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.ColorExtensions.GetHue(System.Windows.Media.Color)">
            <summary>
            
            </summary>
            <param name="color"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.ColorExtensions.ToDrawing(System.Windows.Media.Color)">
            <summary>
            
            </summary>
            <param name="color"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.ColorExtensions.ToHex(System.Windows.Media.Color)">
            <summary>
            Converts color to hex string without alpha component.
            </summary>
        </member>
        <member name="M:Imagin.Common.Linq.ColorExtensions.ToHexWithAlpha(System.Windows.Media.Color)">
            <summary>
            Converts color to hex string with alpha component.
            </summary>
        </member>
        <member name="M:Imagin.Common.Linq.ColorExtensions.WithAlpha(System.Windows.Media.Color,System.Byte)">
            <summary>
            Creates new color with specified alpha component from specified color.
            </summary>
        </member>
        <member name="T:Imagin.Common.Linq.ConsoleExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Linq.ConsoleExtensions.ClearLine">
            <summary>
            
            </summary>
        </member>
        <member name="T:Imagin.Common.Linq.DependencyObjectExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Linq.DependencyObjectExtensions.IsVisibleProperty">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Linq.DependencyObjectExtensions.SetIsVisible(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            
            </summary>
            <param name="d"></param>
            <param name="value"></param>
        </member>
        <member name="M:Imagin.Common.Linq.DependencyObjectExtensions.GetIsVisible(System.Windows.DependencyObject)">
            <summary>
            
            </summary>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.DependencyObjectExtensions.Bind(System.Windows.DependencyObject,System.Windows.DependencyProperty,System.Windows.Data.Binding)">
            <summary>
            
            </summary>
            <param name="source"></param>
            <param name="property"></param>
            <param name="binding"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.DependencyObjectExtensions.CollapseAll(System.Windows.DependencyObject)">
            <summary>
            
            </summary>
            <param name="Object"></param>
        </member>
        <member name="M:Imagin.Common.Linq.DependencyObjectExtensions.ExpandAll(System.Windows.DependencyObject)">
            <summary>
            
            </summary>
            <param name="Object"></param>
        </member>
        <member name="M:Imagin.Common.Linq.DependencyObjectExtensions.FindChild``1(System.Windows.DependencyObject,System.String,System.Int32,System.Int32@)">
            <summary>
            Finds a Child of a given item in the visual tree. 
            </summary>
            <param name="parent">A direct parent of the queried item.</param>
            <typeparam name="T">The type of the queried item.</typeparam>
            <param name="childName">x:Name or Name of child. </param>
            <param name="findIndex">the index of the item to be found.  0 to find the first name/type match, 1 to find the second match, etc </param>
            <param name="foundCount">recursion counter to keep track of the number of name/type matches found so far. </param>
            <returns>The first parent item that matches the submitted type parameter. 
            If not matching item can be found, a null parent is being returned.</returns>
        </member>
        <member name="M:Imagin.Common.Linq.DependencyObjectExtensions.FindChild``1(System.Windows.DependencyObject,System.String,System.Int32)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="parent"></param>
            <param name="childName"></param>
            <param name="findIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.DependencyObjectExtensions.GetChildOfType``1(System.Windows.DependencyObject)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Object"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.DependencyObjectExtensions.GetParent(System.Windows.DependencyObject)">
            <summary>
            Attempts to find parent for specified object in following order: 
            VisualParent -> LogicalParent -> LogicalTemplatedParent.
            </summary>
            <remarks>
            Visual, FrameworkElement, and FrameworkContentElement types are supported. If the logical parent is not found, we try TemplatedParent.
            </remarks>
            <param name="Child">The object to get the parent for.</param>
        </member>
        <member name="M:Imagin.Common.Linq.DependencyObjectExtensions.GetParent``1(System.Windows.DependencyObject)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Object"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.DependencyObjectExtensions.GetLogicalParent(System.Windows.DependencyObject)">
            <summary>
            
            </summary>
            <param name="Child"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.DependencyObjectExtensions.GetLogicalParent``1(System.Windows.DependencyObject)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Child"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.DependencyObjectExtensions.GetLogicalChildren``1(System.Windows.DependencyObject)">
            <summary>
            Gets all logical children for the given <see cref="T:System.Windows.DependencyObject"/>.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Parent"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.DependencyObjectExtensions.GetVisualChildren``1(System.Windows.DependencyObject)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Parent"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.DependencyObjectExtensions.GetVisualParent(System.Windows.DependencyObject)">
            <summary>
            
            </summary>
            <param name="Child"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.DependencyObjectExtensions.GetVisualParent``1(System.Windows.DependencyObject)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Child"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.DependencyObjectExtensions.IsDescendantOf(System.Windows.DependencyObject,System.Windows.DependencyObject)">
            <summary>
            Returns true if the specified element is a child of parent somewhere in the visual 
            tree. This method will work for Visual, FrameworkElement and FrameworkContentElement.
            </summary>
            <param name="Object">The element that is potentially a child of the specified parent.</param>
            <param name="Parent">The element that is potentially a parent of the specified element.</param>
        </member>
        <member name="M:Imagin.Common.Linq.DependencyObjectExtensions.Select(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Select the given element, if supported; element is valid if supports <see cref="M:System.Windows.Controls.Primitives.Selector.SetIsSelected(System.Windows.DependencyObject,System.Boolean)"/> or is <see cref="T:System.Windows.Controls.TreeViewItem"/>.
            </summary>
            <param name="Value"></param>
            <param name="IsSelected"></param>
        </member>
        <member name="M:Imagin.Common.Linq.DependencyObjectExtensions.ToggleAll(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Sets IsExpanded property to specified value on all TreeViewItems found.
            </summary>
        </member>
        <member name="M:Imagin.Common.Linq.DependencyObjectExtensions.TrySelect(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Attempt to select the given element, if supported; element is valid if supports <see cref="M:System.Windows.Controls.Primitives.Selector.SetIsSelected(System.Windows.DependencyObject,System.Boolean)"/> or is <see cref="T:System.Windows.Controls.TreeViewItem"/>.
            </summary>
            <param name="Object"></param>
            <param name="IsSelected"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Linq.DispatcherExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Linq.DispatcherExtensions.BeginInvoke(System.Windows.Threading.Dispatcher,System.Action,System.Windows.Threading.DispatcherPriority)">
            <summary>
            
            </summary>
            <param name="Dispatcher"></param>
            <param name="Action"></param>
            <param name="Priority"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.DispatcherExtensions.Invoke(System.Windows.Threading.Dispatcher,System.Action,System.Windows.Threading.DispatcherPriority)">
            <summary>
            
            </summary>
            <param name="Dispatcher"></param>
            <param name="Action"></param>
            <param name="Priority"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Linq.EncodingExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Linq.EncodingExtensions.GetEncoding(Imagin.Common.Text.Encoding)">
            <summary>
            
            </summary>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Linq.FrameworkElementExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Linq.FrameworkElementExtensions._ContextMenuProperty">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Linq.FrameworkElementExtensions.Get_ContextMenu(System.Windows.FrameworkElement)">
            <summary>
            
            </summary>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.FrameworkElementExtensions.Set_ContextMenu(System.Windows.FrameworkElement,System.Windows.Controls.ContextMenu)">
            <summary>
            
            </summary>
            <param name="d"></param>
            <param name="value"></param>
        </member>
        <member name="F:Imagin.Common.Linq.FrameworkElementExtensions.BackgroundProperty">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Linq.FrameworkElementExtensions.GetBackground(System.Windows.FrameworkElement)">
            <summary>
            
            </summary>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.FrameworkElementExtensions.SetBackground(System.Windows.FrameworkElement,System.Windows.Media.Brush)">
            <summary>
            
            </summary>
            <param name="d"></param>
            <param name="value"></param>
        </member>
        <member name="F:Imagin.Common.Linq.FrameworkElementExtensions.BorderBrushProperty">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Linq.FrameworkElementExtensions.GetBorderBrush(System.Windows.FrameworkElement)">
            <summary>
            
            </summary>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.FrameworkElementExtensions.SetBorderBrush(System.Windows.FrameworkElement,System.Windows.Media.Brush)">
            <summary>
            
            </summary>
            <param name="d"></param>
            <param name="value"></param>
        </member>
        <member name="F:Imagin.Common.Linq.FrameworkElementExtensions.BorderThicknessProperty">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Linq.FrameworkElementExtensions.GetBorderThickness(System.Windows.FrameworkElement)">
            <summary>
            
            </summary>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.FrameworkElementExtensions.SetBorderThickness(System.Windows.FrameworkElement,System.Windows.Thickness)">
            <summary>
            
            </summary>
            <param name="d"></param>
            <param name="value"></param>
        </member>
        <member name="F:Imagin.Common.Linq.FrameworkElementExtensions.CornerRadiusProperty">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Linq.FrameworkElementExtensions.GetCornerRadius(System.Windows.FrameworkElement)">
            <summary>
            
            </summary>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.FrameworkElementExtensions.SetCornerRadius(System.Windows.FrameworkElement,System.Windows.CornerRadius)">
            <summary>
            
            </summary>
            <param name="d"></param>
            <param name="value"></param>
        </member>
        <member name="F:Imagin.Common.Linq.FrameworkElementExtensions.EnableContextMenuProperty">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Linq.FrameworkElementExtensions.GetEnableContextMenu(System.Windows.FrameworkElement)">
            <summary>
            
            </summary>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.FrameworkElementExtensions.SetEnableContextMenu(System.Windows.FrameworkElement,System.Boolean)">
            <summary>
            
            </summary>
            <param name="d"></param>
            <param name="value"></param>
        </member>
        <member name="F:Imagin.Common.Linq.FrameworkElementExtensions.HorizontalAlignmentProperty">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Linq.FrameworkElementExtensions.SetHorizontalAlignment(System.Windows.FrameworkElement,System.Nullable{System.Windows.HorizontalAlignment})">
            <summary>
            
            </summary>
            <param name="d"></param>
            <param name="value"></param>
        </member>
        <member name="M:Imagin.Common.Linq.FrameworkElementExtensions.GetHorizontalAlignment(System.Windows.FrameworkElement)">
            <summary>
            
            </summary>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="F:Imagin.Common.Linq.FrameworkElementExtensions.MarginProperty">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Linq.FrameworkElementExtensions.SetMargin(System.Windows.FrameworkElement,System.Nullable{System.Windows.Thickness})">
            <summary>
            
            </summary>
            <param name="d"></param>
            <param name="value"></param>
        </member>
        <member name="M:Imagin.Common.Linq.FrameworkElementExtensions.GetMargin(System.Windows.FrameworkElement)">
            <summary>
            
            </summary>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="F:Imagin.Common.Linq.FrameworkElementExtensions.VerticalAlignmentProperty">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Linq.FrameworkElementExtensions.SetVerticalAlignment(System.Windows.FrameworkElement,System.Nullable{System.Windows.VerticalAlignment})">
            <summary>
            
            </summary>
            <param name="d"></param>
            <param name="value"></param>
        </member>
        <member name="M:Imagin.Common.Linq.FrameworkElementExtensions.GetVerticalAlignment(System.Windows.FrameworkElement)">
            <summary>
            
            </summary>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="F:Imagin.Common.Linq.FrameworkElementExtensions.IsDragMoveEnabledProperty">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Linq.FrameworkElementExtensions.GetIsDragMoveEnabled(System.Windows.FrameworkElement)">
            <summary>
            
            </summary>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.FrameworkElementExtensions.SetIsDragMoveEnabled(System.Windows.FrameworkElement,System.Boolean)">
            <summary>
            
            </summary>
            <param name="d"></param>
            <param name="value"></param>
        </member>
        <member name="M:Imagin.Common.Linq.FrameworkElementExtensions.ContainsMouse(System.Windows.FrameworkElement)">
            <summary>
            Helper method to determine if the given framework element has the mouse over it or not.
            </summary>
            <param name="element">The FrameworkElement to test for mouse containment.</param>
            <returns>True, if the mouse is over the FrameworkElement; false, otherwise.</returns>
        </member>
        <member name="M:Imagin.Common.Linq.FrameworkElementExtensions.FindStyle``1(``0)">
            <summary>
            
            </summary>
            <typeparam name="TElement"></typeparam>
            <param name="Element"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.FrameworkElementExtensions.TryFindStyle``1(``0,System.Windows.Style@)">
            <summary>
            
            </summary>
            <typeparam name="TElement"></typeparam>
            <param name="Element"></param>
            <param name="Style"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Linq.IntPtrExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Linq.IntPtrExtensions.Dispose(System.IntPtr)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Linq.KeyboardExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Linq.KeyboardExtensions.IsAnyKeyDown(System.Windows.Input.Key[])">
            <summary>
            
            </summary>
            <param name="Keys"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.KeyboardExtensions.IsKeyModifyingPopupState(System.Windows.Input.KeyEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.KeyboardExtensions.ToUnicode(System.UInt32,System.UInt32,System.Byte[],System.Text.StringBuilder,System.Int32,System.UInt32)">
            <summary>
            
            </summary>
            <param name="wVirtKey"></param>
            <param name="wScanCode"></param>
            <param name="lpKeyState"></param>
            <param name="pwszBuff"></param>
            <param name="cchBuff"></param>
            <param name="wFlags"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.KeyboardExtensions.GetKeyboardState(System.Byte[])">
            <summary>
            
            </summary>
            <param name="lpKeyState"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.KeyboardExtensions.MapVirtualKey(System.UInt32,Imagin.Common.Input.MapType)">
            <summary>
            
            </summary>
            <param name="uCode"></param>
            <param name="uMapType"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.KeyboardExtensions.ToChar(System.Windows.Input.Key)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Linq.ModifierKeysExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Linq.ModifierKeysExtensions.IsPressed(System.Windows.Input.ModifierKeys)">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Linq.PointExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Linq.PointExtensions.Add(System.Windows.Point,System.Double)">
            <summary>
            Adds given value (a.X + b, a.Y + b).
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.PointExtensions.Add(System.Windows.Point,System.Windows.Point)">
            <summary>
            Adds given point (a.X + b.X, a.Y + b.Y).
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.PointExtensions.Coerce(System.Windows.Point,System.Windows.Point,System.Windows.Point)">
            <summary>
            
            </summary>
            <param name="source"></param>
            <param name="maximum"></param>
            <param name="minimum"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.PointExtensions.Divide(System.Windows.Point,System.Double)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.PointExtensions.Divide(System.Windows.Point,System.Windows.Point)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.PointExtensions.Multiply(System.Windows.Point,System.Double)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.PointExtensions.Multiply(System.Windows.Point,System.Windows.Point)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.PointExtensions.Subtract(System.Windows.Point,System.Double)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.PointExtensions.Subtract(System.Windows.Point,System.Windows.Point)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Linq.RectExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Linq.RectExtensions.CoerceSize(System.Windows.Rect,System.Windows.Size)">
            <summary>
            Bound rect to given size.
            </summary>
            <param name="Rect">The rect to bind.</param>
            <param name="Bounds">The size of the binding.</param>
            <returns>A rect bound to given size.</returns>
        </member>
        <member name="M:Imagin.Common.Linq.RectExtensions.CoercePoint(System.Windows.Rect,System.Windows.Size)">
            <summary>
            Bound rect based on given sizes.
            </summary>
        </member>
        <member name="T:Imagin.Common.Linq.SolidColorBrushExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Linq.SolidColorBrushExtensions.ToHex(System.Windows.Media.SolidColorBrush)">
            <summary>
            
            </summary>
            <param name="Brush"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.SolidColorBrushExtensions.ToHexWithAlpha(System.Windows.Media.SolidColorBrush)">
            <summary>
            
            </summary>
            <param name="Brush"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Linq.SpecialFolderExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Linq.SpecialFolderExtensions.GetPath(System.Environment.SpecialFolder)">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Linq.StringExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Linq.StringExtensions.GetFtpDirectoryName(System.String)">
            <summary>
            Gets the directory name of a path formatted for a FTP server.
            </summary>
            <param name="Path">The path</param>
            <returns>The parent directory path</returns>
        </member>
        <member name="M:Imagin.Common.Linq.StringExtensions.GetFtpFileName(System.String)">
            <summary>
            Gets the file name from the path.
            </summary>
            <param name="Path">The full path to the file</param>
            <returns>The file name</returns>
        </member>
        <member name="M:Imagin.Common.Linq.StringExtensions.GetFtpPath(System.String)">
            <summary>
            Converts the specified path into a valid FTP file system path.
            </summary>
            <param name="Path">The file system path</param>
            <returns>A path formatted for FTP</returns>
        </member>
        <member name="M:Imagin.Common.Linq.StringExtensions.Append(System.String,System.String[])">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <param name="Append"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.StringExtensions.Capitalize(System.String)">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.StringExtensions.DirectoryExists(System.String)">
            <summary>
            Invokes <see cref="M:System.IO.Directory.Exists(System.String)"/>.
            </summary>
            <param name="Path"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.StringExtensions.FileExists(System.String)">
            <summary>
            Invokes <see cref="M:System.IO.File.Exists(System.String)"/>.
            </summary>
            <param name="Path"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.StringExtensions.GetDirectoryName(System.String,System.String)">
            <summary>
            Invokes <see cref="M:System.IO.Path.GetDirectoryName(System.String)"/>.
            </summary>
            <param name="Path"></param>
            <param name="Scheme"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.StringExtensions.GetExtension(System.String,System.Boolean)">
            <summary>
            Invokes <see cref="M:System.IO.Path.GetExtension(System.String)"/>.
            </summary>
            <param name="Path"></param>
            <param name="WithoutPeriod"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.StringExtensions.GetFileName(System.String,System.Boolean,System.String)">
            <summary>
            Invokes <see cref="M:System.IO.Path.GetFileName(System.String)"/>.
            </summary>
            <param name="Path"></param>
            <param name="WithoutExtension"></param>
            <param name="Scheme"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.StringExtensions.GetFileType(System.String,System.Func{System.String,System.String})">
            <summary>
            
            </summary>
            <param name="Path"></param>
            <param name="GetTypeDescription"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.StringExtensions.FindType(System.String)">
            <summary>
            
            </summary>
            <param name="TypeName"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.StringExtensions.IsValidUrl(System.String,System.String[])">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <param name="Schemes"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.StringExtensions.Prepend(System.String,System.String[])">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <param name="Prepend"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.StringExtensions.TryRun(System.String,System.String)">
            <summary>
            Attempt to run program at path.
            </summary>
        </member>
        <member name="M:Imagin.Common.Linq.StringExtensions.ToSecureString(System.String)">
            <summary>
            
            </summary>
            <param name="ToConvert"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.StringExtensions.ToSolidColorBrush(System.String)">
            <summary>
            Converts alphanumeric hexadecimal to SolidColorBrush.
            </summary>
        </member>
        <member name="T:Imagin.Common.Linq.TimeSpanExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Linq.TimeSpanExtensions.ToDuration(System.TimeSpan)">
            <summary>
            
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.TimeSpanExtensions.ToShortTime(System.TimeSpan)">
            <summary>
            
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Linq.UIElementExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Linq.UIElementExtensions.AnimateAsync(System.Windows.UIElement,System.Windows.Media.Animation.Storyboard)">
            <summary>
            
            </summary>
            <param name="element"></param>
            <param name="storyboard"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.UIElementExtensions.FadeInAsync(System.Windows.UIElement,System.Windows.Duration)">
            <summary>
            
            </summary>
            <param name="Element"></param>
            <param name="Duration"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.UIElementExtensions.FadeOutAsync(System.Windows.UIElement,System.Windows.Duration,System.EventHandler)">
            <summary>
            
            </summary>
            <param name="Element"></param>
            <param name="Duration"></param>
            <param name="Callback"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Linq.UriExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Linq.UriExtensions.GetResourceStream(System.Uri)">
            <summary>
            Returns a Uri that represents a resource.
            </summary>
        </member>
        <member name="T:Imagin.Common.Linq.VisibilityExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Linq.VisibilityExtensions.Invert(System.Windows.Visibility)">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Linq.VisibilityExtensions.ToBoolean(System.Windows.Visibility)">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Linq.WriteableBitmapExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Linq.WriteableBitmapExtensions.ForEach(System.Windows.Media.Imaging.WriteableBitmap,System.Func{Imagin.Common.Media.Pixel,System.Drawing.Color})">
            <summary>
            
            </summary>
            <param name="bitmap"></param>
            <param name="action"></param>
        </member>
        <member name="M:Imagin.Common.Linq.WriteableBitmapExtensions.ForEach(System.Windows.Media.Imaging.WriteableBitmap,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Func{System.Int32,System.Int32},System.Func{System.Int32,System.Int32},System.Func{Imagin.Common.Media.Pixel,System.Drawing.Color},System.Action{System.Int32},System.Action{System.Int32},System.Action{System.Int32},System.Action{System.Int32})">
            <summary>
            
            </summary>
            <param name="bitmap"></param>
            <param name="start"></param>
            <param name="xstart"></param>
            <param name="xend"></param>
            <param name="ystart"></param>
            <param name="yend"></param>
            <param name="xincrement"></param>
            <param name="yincrement"></param>
            <param name="action"></param>
            <param name="xpre"></param>
            <param name="xpost"></param>
            <param name="ypre"></param>
            <param name="ypost"></param>
        </member>
        <member name="T:Imagin.Common.LocalPathValidateHandler">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.LocalPathValidateHandler.FileExists(System.String)">
            <summary>
            
            </summary>
            <param name="Path"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.LocalPathValidateHandler.FolderExists(System.String)">
            <summary>
            
            </summary>
            <param name="Path"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.PathValidateHandler">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.PathValidateHandler.FileOrFolderProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.PathValidateHandler.FileOrFolder">
            <summary>
            Gets or sets whether or not path represents a file or a folder.
            </summary>
        </member>
        <member name="M:Imagin.Common.PathValidateHandler.FileExists(System.String)">
            <summary>
            Gets whether or not the file at given path exists.
            </summary>
            <param name="Path"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.PathValidateHandler.FolderExists(System.String)">
            <summary>
            Gets whether or not the folder at given path exists.
            </summary>
            <param name="Path"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.PathValidateHandler.Validate(System.String)">
            <summary>
            Validates given path based on whether or not it is a file or a folder.
            </summary>
            <param name="Path"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.PathValidateHandler.Validate(System.Object[])">
            <summary>
            Validates path based on given arguments.
            </summary>
            <param name="Arguments"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.DecimalRangeRule">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.DecimalRangeRule.DefaultMax">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.DecimalRangeRule.DefaultMin">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.DecimalRangeRule.Validate(System.Object)">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.DoubleRangeRule">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.DoubleRangeRule.DefaultMax">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.DoubleRangeRule.DefaultMin">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.DoubleRangeRule.Validate(System.Object)">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Int16RangeRule">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Int16RangeRule.DefaultMax">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Int16RangeRule.DefaultMin">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Int16RangeRule.Validate(System.Object)">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Int32RangeRule">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Int32RangeRule.DefaultMax">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Int32RangeRule.DefaultMin">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Int32RangeRule.Validate(System.Object)">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Int64RangeRule">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Int64RangeRule.DefaultMax">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Int64RangeRule.DefaultMin">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Int64RangeRule.Validate(System.Object)">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.NamedRule">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.NamedRule.Name">
            <summary>
            
            </summary>
        </member>
        <member name="T:Imagin.Common.PathExistsRule">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.PathExistsRule.Handler">
            <summary>
            A handler used to validate the path.
            </summary>
        </member>
        <member name="M:Imagin.Common.PathExistsRule.Validate(System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="cultureInfo"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.RangeRule`1">
            <summary>
            
            </summary>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="P:Imagin.Common.RangeRule`1.DefaultMax">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.RangeRule`1.DefaultMin">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.RangeRule`1.Max">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.RangeRule`1.Min">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.RangeRule`1.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.RangeRule`1.ValidateMax">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.RangeRule`1.ValidateMin">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.RangeRule`1.Validate(System.Object)">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.RangeRule`1.Validate(System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="cultureInfo"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.RequiredRule">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.RequiredRule.Name">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.RequiredRule.Validate(System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="cultureInfo"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.AlignableWrapPanel">
            <summary>
            A WrapPanel with alignable content.
            </summary>
            <remarks>
            Borrowed from http://stackoverflow.com/questions/806777/wpf-how-can-i-center-all-items-in-a-wrappanel.
            </remarks>
        </member>
        <member name="F:Imagin.Common.AlignableWrapPanel.ItemWidthProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.AlignableWrapPanel.ItemWidth">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.AlignableWrapPanel.ItemHeightProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.AlignableWrapPanel.ItemHeight">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.AlignableWrapPanel.OrientationProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.AlignableWrapPanel.Orientation">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.AlignableWrapPanel.HorizontalContentAlignmentProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.AlignableWrapPanel.HorizontalContentAlignment">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.AlignableWrapPanel.VerticalContentAlignmentProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.AlignableWrapPanel.VerticalContentAlignment">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.AlignableWrapPanel.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.AlignableWrapPanel.MeasureOverride(System.Windows.Size)">
            <summary>
            
            </summary>
            <param name="constraint"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.AlignableWrapPanel.ArrangeOverride(System.Windows.Size)">
            <summary>
            
            </summary>
            <param name="finalSize"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.AnglePicker">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.AnglePicker.AngleProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.AnglePicker.Angle">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.AnglePicker.OriginFillProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.AnglePicker.OriginFill">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.AnglePicker.OriginStrokeProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.AnglePicker.OriginStroke">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.AnglePicker.OriginStrokeThicknessProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.AnglePicker.OriginStrokeThickness">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.AnglePicker.OriginVisibilityProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.AnglePicker.OriginVisibility">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.AnglePicker.NeedleStrokeProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.AnglePicker.NeedleStroke">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.AnglePicker.NeedleStrokeThicknessProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.AnglePicker.NeedleStrokeThickness">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.AnglePicker.RadiansProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.AnglePicker.Radians">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.AnglePicker.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.AnglePicker.OnAngleChanged(System.Double)">
            <summary>
            
            </summary>
            <param name="Value"></param>
        </member>
        <member name="M:Imagin.Common.AnglePicker.OnRadiansChanged(System.Double)">
            <summary>
            
            </summary>
            <param name="Value"></param>
        </member>
        <member name="M:Imagin.Common.AnglePicker.OnApplyTemplate">
            <summary>
            
            </summary>
        </member>
        <member name="T:Imagin.Common.ButtonChrome">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.ButtonChrome.CornerRadiusProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.ButtonChrome.CornerRadius">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.ButtonChrome.InnerCornerRadiusProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.ButtonChrome.InnerCornerRadius">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.ButtonChrome.RenderCheckedProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.ButtonChrome.RenderChecked">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.ButtonChrome.RenderEnabledProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.ButtonChrome.RenderEnabled">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.ButtonChrome.RenderFocusedProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.ButtonChrome.RenderFocused">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.ButtonChrome.RenderMouseOverProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.ButtonChrome.RenderMouseOver">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.ButtonChrome.RenderNormalProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.ButtonChrome.RenderNormal">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.ButtonChrome.RenderPressedProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.ButtonChrome.RenderPressed">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.ButtonChrome.OnCornerRadiusChanged(System.Windows.CornerRadius,System.Windows.CornerRadius)">
            <summary>
            
            </summary>
            <remarks>
            The <see cref="P:Imagin.Common.ButtonChrome.InnerCornerRadius"/> should be one less than the <see cref="P:Imagin.Common.ButtonChrome.CornerRadius"/>.
            </remarks>
            <param name="oldValue"></param>
            <param name="newValue"></param>
        </member>
        <member name="T:Imagin.Common.CheckerBoard">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.CheckerBoard.DrawingBrush">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.CheckerBoard.CheckerForegroundProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.CheckerBoard.CheckerForeground">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.CheckerBoard.CheckerBackgroundProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.CheckerBoard.CheckerBackground">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.CheckerBoard.CheckerSizeProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.CheckerBoard.CheckerSize">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.CheckerBoard.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="T:Imagin.Common.Collections.Concurrent.ConcurrentCollection`1">
            <summary>
            Provides a collection that can be modified safely on other threads. The notify event is thrown using the dispatcher from the event listener(s).
            </summary>
            <typeparam name="T">The type of the elements in the collection.</typeparam>
        </member>
        <member name="E:Imagin.Common.Collections.Concurrent.ConcurrentCollection`1.ItemAdded">
            <summary>
            Occurs when a single item is added.
            </summary>
        </member>
        <member name="E:Imagin.Common.Collections.Concurrent.ConcurrentCollection`1.ItemsChanged">
            <summary>
            Occurs when the collection changes.
            </summary>
        </member>
        <member name="E:Imagin.Common.Collections.Concurrent.ConcurrentCollection`1.ItemsCleared">
            <summary>
            Occurs when the collection is cleared.
            </summary>
        </member>
        <member name="E:Imagin.Common.Collections.Concurrent.ConcurrentCollection`1.ItemInserted">
            <summary>
            Occurs when a single item is inserted.
            </summary>
        </member>
        <member name="E:Imagin.Common.Collections.Concurrent.ConcurrentCollection`1.ItemRemoved">
            <summary>
            Occurs when a single item is removed.
            </summary>
        </member>
        <member name="E:Imagin.Common.Collections.Concurrent.ConcurrentCollection`1.PreviewItemsCleared">
            <summary>
            Occurs just before the collection is cleared.
            </summary>
        </member>
        <member name="E:Imagin.Common.Collections.Concurrent.ConcurrentCollection`1.PropertyChanged">
            <summary>
            Occurs when a property changes.
            </summary>
        </member>
        <member name="P:Imagin.Common.Collections.Concurrent.ConcurrentCollection`1.Count">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Collections.Concurrent.ConcurrentCollection`1.IsEmpty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Collections.Concurrent.ConcurrentCollection`1.IsReadOnly">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Collections.Concurrent.ConcurrentCollection`1.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Collections.Concurrent.ConcurrentCollection`1.#ctor(`0)">
            <summary>
            
            </summary>
            <param name="Item"></param>
        </member>
        <member name="M:Imagin.Common.Collections.Concurrent.ConcurrentCollection`1.#ctor(`0[])">
            <summary>
            
            </summary>
            <param name="Items"></param>
        </member>
        <member name="M:Imagin.Common.Collections.Concurrent.ConcurrentCollection`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            
            </summary>
            <param name="Items"></param>
        </member>
        <member name="M:Imagin.Common.Collections.Concurrent.ConcurrentCollection`1.#ctor(System.Collections.Generic.IEnumerable{`0}[])">
            <summary>
            
            </summary>
            <param name="Items"></param>
        </member>
        <member name="P:Imagin.Common.Collections.Concurrent.ConcurrentCollection`1.Item(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Collections.Concurrent.ConcurrentCollection`1.Add(`0)">
            <summary>
            
            </summary>
            <param name="Item"></param>
        </member>
        <member name="M:Imagin.Common.Collections.Concurrent.ConcurrentCollection`1.Clear">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Collections.Concurrent.ConcurrentCollection`1.Contains(`0)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Collections.Concurrent.ConcurrentCollection`1.CopyTo(`0[],System.Int32)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="arrayIndex"></param>
        </member>
        <member name="M:Imagin.Common.Collections.Concurrent.ConcurrentCollection`1.IndexOf(`0)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Collections.Concurrent.ConcurrentCollection`1.Insert(System.Int32,`0)">
            <summary>
            
            </summary>
            <param name="i"></param>
            <param name="Item"></param>
        </member>
        <member name="M:Imagin.Common.Collections.Concurrent.ConcurrentCollection`1.Remove(`0)">
            <summary>
            
            </summary>
            <param name="Item"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Collections.Concurrent.ConcurrentCollection`1.RemoveAt(System.Int32)">
            <summary>
            
            </summary>
            <param name="i"></param>
        </member>
        <member name="M:Imagin.Common.Collections.Concurrent.ConcurrentCollection`1.BeginClear">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Collections.Concurrent.ConcurrentCollection`1.OnItemAdded(`0)">
            <summary>
            
            </summary>
            <param name="Item"></param>
        </member>
        <member name="M:Imagin.Common.Collections.Concurrent.ConcurrentCollection`1.OnItemsChanged">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Collections.Concurrent.ConcurrentCollection`1.OnItemsCleared">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Collections.Concurrent.ConcurrentCollection`1.OnItemInserted(`0,System.Int32)">
            <summary>
            
            </summary>
            <param name="Item"></param>
            <param name="Index"></param>
        </member>
        <member name="M:Imagin.Common.Collections.Concurrent.ConcurrentCollection`1.OnItemRemoved(`0)">
            <summary>
            
            </summary>
            <param name="Item"></param>
        </member>
        <member name="M:Imagin.Common.Collections.Concurrent.ConcurrentCollection`1.OnPreviewItemsCleared">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Collections.Concurrent.ConcurrentCollection`1.OnPropertyChanged(System.String)">
            <summary>
            
            </summary>
            <param name="Name"></param>
        </member>
        <member name="T:Imagin.Common.Collections.Concurrent.ConcurrentCollectionBase`1">
            <summary>
            This class provides the base for concurrent collections that 
            can be bound to user interface elements
            </summary>
            <notes>
            Could do with a more performant enumerable implementation
            but this is what I have so far. I create a snapshot of the collection
            and use the enumerable from that. When the collection is updated
            I set a flag indicating that a new snapshot is required.
            </notes>
        </member>
        <member name="P:Imagin.Common.Collections.Concurrent.ConcurrentCollectionBase`1.IsDispatcherThread">
            <summary>
            Gets if the calling thread is the same as the dispatcher thread
            </summary>
        </member>
        <member name="E:Imagin.Common.Collections.Concurrent.ConcurrentCollectionBase`1.CollectionChanged">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Collections.Concurrent.ConcurrentCollectionBase`1.ReadWriteLock">
            <summary>
            The lock that controls read/write access to the base collection
            </summary>
        </member>
        <member name="F:Imagin.Common.Collections.Concurrent.ConcurrentCollectionBase`1.BaseCollection">
            <summary>
            The underlying base enumerable that is used to store the items,
            used for creating an immutable collection from which an enumerator
            can be obtained.
            </summary>
        </member>
        <member name="F:Imagin.Common.Collections.Concurrent.ConcurrentCollectionBase`1.NewSnapshotRequired">
            <summary>
            Flag indicating that a write has occured, so anything that depends on
            taking a snapshot of the collection needs to be updated.
            </summary>
        </member>
        <member name="F:Imagin.Common.Collections.Concurrent.ConcurrentCollectionBase`1.SnapshotLock">
            <summary>
            The enumerable lock to prevent threading conflicts on allocating
            the enumerable of the fixed collection
            </summary>
        </member>
        <member name="F:Imagin.Common.Collections.Concurrent.ConcurrentCollectionBase`1.BaseSnapshot">
            <summary>
            The collection used for generating an enumerable that iterates
            over a snapshot of the base collection
            </summary>
        </member>
        <member name="F:Imagin.Common.Collections.Concurrent.ConcurrentCollectionBase`1.Subscribers">
            <summary>
            A list of observers
            </summary>
        </member>
        <member name="F:Imagin.Common.Collections.Concurrent.ConcurrentCollectionBase`1.SubscriberKey">
            <summary>
            The key for new observers, incremented with each new observer
            </summary>
        </member>
        <member name="F:Imagin.Common.Collections.Concurrent.ConcurrentCollectionBase`1.IsDisposed">
            <summary>
            Flag indicating this collection is disposed
            </summary>
        </member>
        <member name="P:Imagin.Common.Collections.Concurrent.ConcurrentCollectionBase`1.Snapshot">
            <summary>
            Gets an immutable snapshot of the collection
            </summary>
        </member>
        <member name="P:Imagin.Common.Collections.Concurrent.ConcurrentCollectionBase`1.ReadCollection">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Collections.Concurrent.ConcurrentCollectionBase`1.viewModel">
            <summary>
            The view model that is used to allow this collection to be bound to the UI.
            Relevant methods determine if they are being called on the UI thread, and if
            so then the view model is used.
            </summary>
        </member>
        <member name="P:Imagin.Common.Collections.Concurrent.ConcurrentCollectionBase`1.ViewModel">
            <summary>
            Access this directly if getting the error "An ItemsControl is inconsistent with its items source".
            </summary>
        </member>
        <member name="P:Imagin.Common.Collections.Concurrent.ConcurrentCollectionBase`1.WriteCollection">
            <summary>
            Gets the base collection that holds the values
            </summary>
        </member>
        <member name="M:Imagin.Common.Collections.Concurrent.ConcurrentCollectionBase`1.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:Imagin.Common.Collections.Concurrent.ConcurrentCollectionBase`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Constructor that takes an eumerable
            </summary>
        </member>
        <member name="M:Imagin.Common.Collections.Concurrent.ConcurrentCollectionBase`1.Finalize">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Collections.Concurrent.ConcurrentCollectionBase`1.Dispose(System.Boolean)">
            <summary>
            
            </summary>
            <param name="Disposing"></param>
        </member>
        <member name="M:Imagin.Common.Collections.Concurrent.ConcurrentCollectionBase`1.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Collections.Concurrent.ConcurrentCollectionBase`1.OnNext(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Imagin.Common.Collections.Concurrent.ConcurrentCollectionBase`1.OnError(System.Exception)">
            <summary>
            
            </summary>
            <param name="Exception"></param>
        </member>
        <member name="M:Imagin.Common.Collections.Concurrent.ConcurrentCollectionBase`1.OnCompleted">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Collections.Concurrent.ConcurrentCollectionBase`1.Subscribe(System.IObserver{System.Collections.Specialized.NotifyCollectionChangedEventArgs})">
            <summary>
            
            </summary>
            <param name="Observer"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Collections.Concurrent.ConcurrentCollectionBase`1.DisposeDelegate">
            <summary>
            Result returned from <see cref="M:Imagin.Common.Collections.Concurrent.ConcurrentCollectionBase`1.Subscribe(System.IObserver{System.Collections.Specialized.NotifyCollectionChangedEventArgs})"/> method.
            </summary>
        </member>
        <member name="M:Imagin.Common.Collections.Concurrent.ConcurrentCollectionBase`1.GetEnumerator">
            <summary>
            Gets the enumerator for a snapshot of the collection
            </summary>
            <remarks>
            Note that the Enumerator should really only be used on the Dispatcher thread,
            if not then should enumerate over the Snapshot instead.
            
            </remarks>
        </member>
        <member name="M:Imagin.Common.Collections.Concurrent.ConcurrentCollectionBase`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets the enumerator for a snapshot of the collection
            </summary>
        </member>
        <member name="M:Imagin.Common.Collections.Concurrent.ConcurrentCollectionBase`1.UpdateSnapshot">
            <summary>
            Updates the snapshot that is used to generate an Enumerator
            </summary>
        </member>
        <member name="M:Imagin.Common.Collections.Concurrent.ConcurrentCollectionBase`1.DoBaseClear(System.Action)">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <remarks>
            Don't use BaseCollection.Clear(), it causes problems because it
            sends a reset event, and then the collection needs to be read out through
            an enumerator. Use RemoveAt instead until the collection is empty.
            Using remove from end after testing with this speed test:
            </remarks>
        </member>
        <member name="M:Imagin.Common.Collections.Concurrent.ConcurrentCollectionBase`1.HandleBaseCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Handles when the base collection changes. Pipes the event through IObservable.OnNext
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
            <remarks>
            As this is a concurrent collection we don't want a change event to result in the listener
            later coming back to enumerate over the whole collection again, possible before the listener
            gets other changed events, but after the collection has been added to.
            </remarks>
        </member>
        <member name="M:Imagin.Common.Collections.Concurrent.ConcurrentCollectionBase`1.DoBaseRead(System.Action)">
            <summary>
            Handles read access from the base collection
            </summary>
            <param name="readFunc"></param>
        </member>
        <member name="M:Imagin.Common.Collections.Concurrent.ConcurrentCollectionBase`1.DoBaseRead``1(System.Func{``0})">
            <summary>
            Handles read access from the base collection when a return value is required
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="ReadAction"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Collections.Concurrent.ConcurrentCollectionBase`1.DoBaseReadWrite``1(System.Func{System.Boolean},System.Func{``0},System.Func{``0})">
            <summary>
            Calls the read function passed in, and if it returns true,
            then calls the next read function, else calls the write
            function.
            </summary>
        </member>
        <member name="M:Imagin.Common.Collections.Concurrent.ConcurrentCollectionBase`1.DoBaseReadWrite``1(System.Func{System.Boolean},System.Func{``0},System.Action,System.Func{``0})">
            <summary>
            Calls the read function passed in, and if it returns true,
            then calls the next read function, else unlocks the collection,
            calls the pre-write function, then chains to DoBaseReadWrite
            calls the write
            function.
            </summary>
        </member>
        <member name="M:Imagin.Common.Collections.Concurrent.ConcurrentCollectionBase`1.DoBaseWrite(System.Action)">
            <summary>
            Handles write access to the base collection
            </summary>
            <param name="WriteAction"></param>
        </member>
        <member name="M:Imagin.Common.Collections.Concurrent.ConcurrentCollectionBase`1.DoBaseWrite``1(System.Func{``0})">
            <summary>
            Handles write access to the base collection when a return value is required
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="WriteFunc"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Collections.Concurrent.ConcurrentCollectionViewModel`1">
            <summary>
            The view model for <see cref="T:Imagin.Common.Collections.Concurrent.ConcurrentCollectionBase`1"/>; this is exposed by <see cref="T:Imagin.Common.Collections.Concurrent.ConcurrentCollectionBase`1"/> when it is used on the dispatcher thread.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:Imagin.Common.Collections.Concurrent.ConcurrentCollectionViewModel`1.UnsubscribeToken">
            <summary>
            Token that comes back when subscribing to the <see cref="T:System.IObserver`1"/>.
            </summary>
        </member>
        <member name="F:Imagin.Common.Collections.Concurrent.ConcurrentCollectionViewModel`1.SubscriptionActionToken">
            <summary>
            Token for removing the subscription action from the queue
            </summary>
        </member>
        <member name="M:Imagin.Common.Collections.Concurrent.ConcurrentCollectionViewModel`1.ProcessCommand(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Processes a NotifyCollectionChangedEventArgs event argument
            </summary>
            <param name="Command"></param>
        </member>
        <member name="M:Imagin.Common.Collections.Concurrent.ConcurrentCollectionViewModel`1.Dispose(System.Boolean)">
            <summary>
            Disposes of this object, and supresses the finalizer
            </summary>
            <param name="IsDisposing"></param>
        </member>
        <member name="M:Imagin.Common.Collections.Concurrent.ConcurrentCollectionViewModel`1.#ctor(System.IObservable{System.Collections.Specialized.NotifyCollectionChangedEventArgs})">
            <summary>
            Constructor. Queues subscribing to the IObservable passed in.
            </summary>
            <param name="Observable"></param>
            <remarks>
            We create a subscribe action, which has a reference to this object.
            If the DispatcherQueueProcessor isn't started (because the Dispatcher hasn't been
            created), then the subscriber action will sit in the queue forever, hence will
            never be garbage collection, hence this view model will never be garbage
            collected. To get around this the dispatcher subscription queue stores a weak
            reference. As such the Subscribe Action needs to be referenced in this class
            otherwise it will be garbage collected once we leave the scope of this constructor.
            the return token holds a reference to the Subscribe Action
            </remarks>
        </member>
        <member name="M:Imagin.Common.Collections.Concurrent.ConcurrentCollectionViewModel`1.Finalize">
            <summary>
            Finalizer, disposes of the object
            </summary>
        </member>
        <member name="M:Imagin.Common.Collections.Concurrent.ConcurrentCollectionViewModel`1.Dispose">
            <summary>
            Disposes of the current object
            </summary>
        </member>
        <member name="M:Imagin.Common.Collections.Concurrent.ConcurrentCollectionViewModel`1.OnCompleted">
            <summary>
             IObserver implementation
            </summary>
        </member>
        <member name="M:Imagin.Common.Collections.Concurrent.ConcurrentCollectionViewModel`1.OnError(System.Exception)">
            <summary>
             IObserver implementation
            </summary>
        </member>
        <member name="M:Imagin.Common.Collections.Concurrent.ConcurrentCollectionViewModel`1.OnNext(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
             IObserver implementation
            </summary>
        </member>
        <member name="T:Imagin.Common.Collections.Concurrent.DispatcherQueueProcessor">
            <summary>
            Executes a stream on actions on the dispatcher thread.
            </summary>
        </member>
        <member name="F:Imagin.Common.Collections.Concurrent.DispatcherQueueProcessor._instance">
            <summary>
            This class is a singleton class. Below is the instance.
            </summary>
        </member>
        <member name="F:Imagin.Common.Collections.Concurrent.DispatcherQueueProcessor.ActionQueue">
            <summary>
            A queue of actions to be called on the dispatcher thread
            </summary>
        </member>
        <member name="F:Imagin.Common.Collections.Concurrent.DispatcherQueueProcessor.SubscriberQueue">
            <summary>
            A list of pending subscribers, processed once the Dispather is created.
            Using a ConcurrentDictionary because this is the only framework collection
            that has a remove method.
            </summary>
        </member>
        <member name="F:Imagin.Common.Collections.Concurrent.DispatcherQueueProcessor.Dispatcher">
            <summary>
            The Application Dispatcher
            </summary>
        </member>
        <member name="F:Imagin.Common.Collections.Concurrent.DispatcherQueueProcessor.ActionWaiting">
            <summary>
            The current action that is awaiting processing on the Dispatcher thread
            </summary>
        </member>
        <member name="F:Imagin.Common.Collections.Concurrent.DispatcherQueueProcessor.ActionWaitingSemaphore">
            <summary>
            Semaphore used to prevent a race condition on ActionWaiting 
            </summary>
        </member>
        <member name="P:Imagin.Common.Collections.Concurrent.DispatcherQueueProcessor.Instance">
            <summary>
            Gets the instance of the singleton class
            </summary>
        </member>
        <member name="P:Imagin.Common.Collections.Concurrent.DispatcherQueueProcessor.IsDispatcherThread">
            <summary>
            Tests if the calling thread is the same as the dispatcher thread
            </summary>
        </member>
        <member name="M:Imagin.Common.Collections.Concurrent.DispatcherQueueProcessor.#ctor">
            <summary>
            Private constructor for this singleton class. Use the Instance property to
            get an instance of this class.
            </summary>
        </member>
        <member name="M:Imagin.Common.Collections.Concurrent.DispatcherQueueProcessor.CheckIfDispatcherCreated">
            <summary>
            Checks if the dispatcher has been created yet
            </summary>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Collections.Concurrent.DispatcherQueueProcessor.StartQueueProcessing">
            <summary>
            Starts the thread that processes the queue of actions that are to be
            executed on the dispatcher thread.
            </summary>
        </member>
        <member name="M:Imagin.Common.Collections.Concurrent.DispatcherQueueProcessor.Add(System.Action)">
             <summary>
             Adds an action to the processing queue
             </summary>
             <remarks>
             If we are running on the dispatcher thread, we could call the
             action directly, but then we've got the problem with queue
             jumping. It's desirable to immediately update the view model,
             as if we don't the code that added the item won't see it
             if an iteration is done over the collection, which would confuse
             the person using this collection.
            
             So, we need to add it to the queue and then process the queue
             so the view is consistent with the Add action.
             </remarks>
             <param name="Action"></param>
        </member>
        <member name="M:Imagin.Common.Collections.Concurrent.DispatcherQueueProcessor.QueueSubscribe(System.Action)">
            <summary>
            Adds a subscribe action to the subscriber queue
            </summary>
            <remarks>
            Subscriber queue is set to null after the 
            Dispatcher has been created. So subscriptions 
            can be handled directly once the dispatcher 
            queue is being processed.
            </remarks>
            <param name="SubscribeAction"></param>
        </member>
        <member name="T:Imagin.Common.Collections.Concurrent.DispatcherQueueProcessor.DisposeDelegate">
            <summary>
            Result returned by "QueueSubscribe" method.
            </summary>
        </member>
        <member name="T:Imagin.Common.Collections.DataTemplateCollection">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Collections.DataTemplateCollection.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="T:Imagin.Common.Collections.FrameworkElementCollection">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Collections.FrameworkElementCollection.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="T:Imagin.Common.ContentTemplate">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.ContentTemplate.Value">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.ContentTemplate.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="T:Imagin.Common.ContentTemplateSelector">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.ContentTemplateSelector.Templates">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.ContentTemplateSelector.VisibilityParameter">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.ContentTemplateSelector.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.ContentTemplateSelector.SelectTemplate(System.Object,System.Windows.DependencyObject)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <param name="container"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Transparency">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Transparency.Opaque">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Transparency.Transparent">
            <summary>
            
            </summary>
        </member>
        <member name="T:Imagin.Common.ClippedBorder">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.ClippedBorder.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="T:Imagin.Common.ColumnResizeMode">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.ColumnResizeMode.None">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.ColumnResizeMode.Resize">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.ColumnResizeMode.ResizeWithPreview">
            <summary>
            
            </summary>
        </member>
        <member name="T:Imagin.Common.ComboBox">
            <summary>
            
            </summary>
        </member>
        <member name="E:Imagin.Common.ComboBox.Entered">
            <summary>
            
            </summary>
        </member>
        <member name="E:Imagin.Common.ComboBox.PropertyChanged">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.ComboBox.CheckedToolTipProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.ComboBox.CheckedToolTip">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.ComboBox.PlaceholderProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.ComboBox.Placeholder">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.ComboBox.UncheckedToolTipProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.ComboBox.UncheckedToolTip">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.ComboBox.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.ComboBox.OnApplyTemplate">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.ComboBox.OnEntered(System.String)">
            <summary>
            
            </summary>
            <param name="Text"></param>
        </member>
        <member name="M:Imagin.Common.ComboBox.OnPropertyChanged(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
        </member>
        <member name="T:Imagin.Common.FontFamilyBox">
            <summary>
            A ComboBox containing system font families.
            </summary>
            <summary>
            FontFamilyBox
            </summary>
        </member>
        <member name="F:Imagin.Common.FontFamilyBox.ShowPreviewProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.FontFamilyBox.ShowPreview">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.FontFamilyBox.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.FontFamilyBox.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Imagin.Common.FontSizeBox">
            <summary>
            A ComboBox containing traditional font sizes.
            </summary>
            <summary>
            FontSizeBox
            </summary>
        </member>
        <member name="P:Imagin.Common.FontSizeBox.Default">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.FontSizeBox.WheelTickMaxProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.FontSizeBox.WheelTickMax">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.FontSizeBox.WheelTickMinProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.FontSizeBox.WheelTickMin">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.FontSizeBox.SizesProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.FontSizeBox.Sizes">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.FontSizeBox.WheelTickProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.FontSizeBox.WheelTick">
            <summary>
            Value to incremenet/decrement on mouse wheel; set 0 to stick to default values.
            </summary>
        </member>
        <member name="M:Imagin.Common.FontSizeBox.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.FontSizeBox.#ctor(System.Double[])">
            <summary>
            
            </summary>
            <param name="Values"></param>
        </member>
        <member name="M:Imagin.Common.FontSizeBox.OnPreviewMouseWheel(System.Windows.Input.MouseWheelEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Imagin.Common.FontSizeBox.Set(System.Double[])">
            <summary>
            
            </summary>
            <param name="Values"></param>
        </member>
        <member name="M:Imagin.Common.FontSizeBox.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Imagin.Common.TreeViewComboBox">
            <summary>
            
            </summary>
        </member>
        <member name="E:Imagin.Common.TreeViewComboBox.SelectedItemChanged">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.TreeViewComboBox.ContentTemplateProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.TreeViewComboBox.ContentTemplate">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.TreeViewComboBox.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.TreeViewComboBox.OnSelectionChanged(System.Object,System.Windows.Controls.SelectionChangedEventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Imagin.Common.TreeViewComboBox.OnSelectedItemChanged(System.Object,System.Windows.RoutedPropertyChangedEventArgs{System.Object})">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Imagin.Common.TreeViewComboBox.OnApplyTemplate">
            <summary>
            
            </summary>
        </member>
        <member name="T:Imagin.Common.ContentControlBase">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.ContentControlBase.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="T:Imagin.Common.Transitions">
            <summary>
            enumeration for the different transition types
            </summary>
        </member>
        <member name="F:Imagin.Common.Transitions.Default">
            <summary>
            Use the VisualState DefaultTransition
            </summary>
        </member>
        <member name="F:Imagin.Common.Transitions.Normal">
            <summary>
            Use the VisualState Normal
            </summary>
        </member>
        <member name="F:Imagin.Common.Transitions.Up">
            <summary>
            Use the VisualState UpTransition
            </summary>
        </member>
        <member name="F:Imagin.Common.Transitions.Down">
            <summary>
            Use the VisualState DownTransition
            </summary>
        </member>
        <member name="F:Imagin.Common.Transitions.Right">
            <summary>
            Use the VisualState RightTransition
            </summary>
        </member>
        <member name="F:Imagin.Common.Transitions.RightReplace">
            <summary>
            Use the VisualState RightReplaceTransition
            </summary>
        </member>
        <member name="F:Imagin.Common.Transitions.Left">
            <summary>
            Use the VisualState LeftTransition
            </summary>
        </member>
        <member name="F:Imagin.Common.Transitions.LeftReplace">
            <summary>
            Use the VisualState LeftReplaceTransition
            </summary>
        </member>
        <member name="F:Imagin.Common.Transitions.Custom">
            <summary>
            Use a custom VisualState, the name must be set using CustomVisualStatesName property
            </summary>
        </member>
        <member name="T:Imagin.Common.TransitionalContentControl">
            <summary>
            A <see cref="T:System.Windows.Controls.ContentControl"/> that animates content as it loads and unloads.
            </summary>
            <license>
            (c) Copyright Microsoft Corporation.
            This source is subject to the Microsoft Public License (Ms-PL).
            Please see http://go.microsoft.com/fwlink/?LinkID=131993 for details.
            All other rights reserved.
            </license>
        </member>
        <member name="F:Imagin.Common.TransitionalContentControl.DefaultTransitionState">
            <summary>
            
            </summary>
        </member>
        <member name="E:Imagin.Common.TransitionalContentControl.TransitionCompleted">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.TransitionalContentControl.IsTransitioningProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.TransitionalContentControl.IsTransitioning">
            <summary>
            Gets/sets if the content is transitioning.
            </summary>
        </member>
        <member name="F:Imagin.Common.TransitionalContentControl.TransitionProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.TransitionalContentControl.Transition">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.TransitionalContentControl.RestartTransitionOnContentChangeProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.TransitionalContentControl.RestartTransitionOnContentChange">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.TransitionalContentControl.CustomVisualStatesProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.TransitionalContentControl.CustomVisualStates">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.TransitionalContentControl.CustomVisualStatesNameProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.TransitionalContentControl.CustomVisualStatesName">
            <summary>
            Gets or sets the name of the custom transition visual state.
            </summary>
        </member>
        <member name="M:Imagin.Common.TransitionalContentControl.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.TransitionalContentControl.OnContentChanged(System.Object,System.Object)">
            <summary>
            
            </summary>
            <param name="oldContent"></param>
            <param name="newContent"></param>
        </member>
        <member name="M:Imagin.Common.TransitionalContentControl.OnApplyTemplate">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.TransitionalContentControl.OnRestartTransitionOnContentChangeChanged(System.Boolean,System.Boolean)">
            <summary>
            
            </summary>
            <param name="oldValue"></param>
            <param name="newValue"></param>
        </member>
        <member name="M:Imagin.Common.TransitionalContentControl.AbortTransition">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.TransitionalContentControl.ReloadTransition">
            <summary>
            Reload the current transition if the content is the same.
            </summary>
        </member>
        <member name="T:Imagin.Common.DataGrid">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.DataGrid.SelectedItemsProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.DataGrid.SelectedItems">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.DataGrid.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.DataGrid.OnSelectedItemsChanged(System.Collections.IList)">
            <summary>
            
            </summary>
            <param name="Value"></param>
        </member>
        <member name="T:Imagin.Common.DirectionPad">
            <summary>
            A rectangular <see cref="T:System.Windows.Controls.UserControl"/> that enables specifying a <see cref="T:Imagin.Common.CardinalDirection"/> relative to any given <see cref="T:Imagin.Common.CardinalDirection"/>. 
            </summary>
            <summary>
            DirectionPad
            </summary>
        </member>
        <member name="F:Imagin.Common.DirectionPad.DirectionProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.DirectionPad.Direction">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.DirectionPad.ELabelProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.DirectionPad.ELabel">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.DirectionPad.EIconProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.DirectionPad.EIcon">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.DirectionPad.NLabelProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.DirectionPad.NLabel">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.DirectionPad.NIconProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.DirectionPad.NIcon">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.DirectionPad.NELabelProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.DirectionPad.NELabel">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.DirectionPad.NEIconProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.DirectionPad.NEIcon">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.DirectionPad.NWLabelProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.DirectionPad.NWLabel">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.DirectionPad.NWIconProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.DirectionPad.NWIcon">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.DirectionPad.OriginLabelProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.DirectionPad.OriginLabel">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.DirectionPad.OriginIconProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.DirectionPad.OriginIcon">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.DirectionPad.SLabelProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.DirectionPad.SLabel">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.DirectionPad.SIconProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.DirectionPad.SIcon">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.DirectionPad.SELabelProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.DirectionPad.SELabel">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.DirectionPad.SEIconProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.DirectionPad.SEIcon">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.DirectionPad.SWLabelProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.DirectionPad.SWLabel">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.DirectionPad.SWIconProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.DirectionPad.SWIcon">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.DirectionPad.WLabelProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.DirectionPad.WLabel">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.DirectionPad.WIconProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.DirectionPad.WIcon">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.DirectionPad.#ctor">
            <summary>
            Initializes an instance of <see cref="T:Imagin.Common.DirectionPad"/>.
            </summary>
        </member>
        <member name="M:Imagin.Common.DirectionPad.Shift(Imagin.Common.CardinalDirection)">
            <summary>
            Shift all relative to the specified <see cref="T:Imagin.Common.CardinalDirection"/>.
            </summary>
            <param name="direction"></param>
        </member>
        <member name="M:Imagin.Common.DirectionPad.Set(Imagin.Common.DirectionPad.ButtonViewModel)">
            <summary>
            Set <see cref="P:Imagin.Common.DirectionPad.Direction"/> relative to the specified <see cref="T:Imagin.Common.DirectionPad.ButtonViewModel"/>.
            </summary>
            <param name="button"></param>
        </member>
        <member name="M:Imagin.Common.DirectionPad.OnDirectionChanged(Imagin.Common.CardinalDirection)">
            <summary>
            Occurs when <see cref="P:Imagin.Common.DirectionPad.Direction"/> changes.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Imagin.Common.DirectionPad.OnLabelChanged">
            <summary>
            Occurs when <see cref="P:Imagin.Common.DirectionPad.NWLabel"/>, <see cref="P:Imagin.Common.DirectionPad.NLabel"/>, <see cref="P:Imagin.Common.DirectionPad.NELabel"/>, <see cref="P:Imagin.Common.DirectionPad.WLabel"/>, <see cref="P:Imagin.Common.DirectionPad.OriginLabel"/>, <see cref="P:Imagin.Common.DirectionPad.ELabel"/>, <see cref="P:Imagin.Common.DirectionPad.SWLabel"/>, <see cref="P:Imagin.Common.DirectionPad.SLabel"/>, or <see cref="P:Imagin.Common.DirectionPad.SELabel"/> changes.
            </summary>
        </member>
        <member name="M:Imagin.Common.DirectionPad.OnIconChanged">
            <summary>
            Occurs when <see cref="P:Imagin.Common.DirectionPad.NWIcon"/>, <see cref="P:Imagin.Common.DirectionPad.NIcon"/>, <see cref="P:Imagin.Common.DirectionPad.NEIcon"/>, <see cref="P:Imagin.Common.DirectionPad.WIcon"/>, <see cref="P:Imagin.Common.DirectionPad.OriginIcon"/>, <see cref="P:Imagin.Common.DirectionPad.EIcon"/>, <see cref="P:Imagin.Common.DirectionPad.SWIcon"/>, <see cref="P:Imagin.Common.DirectionPad.SIcon"/>, or <see cref="P:Imagin.Common.DirectionPad.SEIcon"/> changes.
            </summary>
        </member>
        <member name="P:Imagin.Common.DirectionPad.ShiftCommand">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.DirectionPad.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Imagin.Common.DragSelection">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.DragSelection.SelectionProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.DragSelection.Selection">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.DragSelection.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.DragSelection.OnSelectionChanged(Imagin.Common.Selection)">
            <summary>
            
            </summary>
            <param name="Value"></param>
        </member>
        <member name="M:Imagin.Common.DragSelection.OnApplyTemplate">
            <summary>
            
            </summary>
        </member>
        <member name="T:Imagin.Common.DragSelector">
            <summary>
            Provides logic for drag selecting over an ItemsControl.
            </summary>
        </member>
        <member name="P:Imagin.Common.DragSelector.Grid">
            <summary>
            Element defined in template that wraps <see cref="T:System.Windows.Controls.ItemsPresenter"/>; used for mouse events.
            </summary>
        </member>
        <member name="P:Imagin.Common.DragSelector.ScrollContentPresenter">
            <summary>
            <see cref="T:System.Windows.Controls.ScrollContentPresenter"/> associated with <see cref="P:Imagin.Common.DragSelector.ScrollViewer"/>.
            </summary>
        </member>
        <member name="P:Imagin.Common.DragSelector.ScrollViewer">
            <summary>
            Scrolling element defined in template.
            </summary>
        </member>
        <member name="F:Imagin.Common.DragSelector.Hash">
            <summary>
            Stores reference to ScrollViewer's style's hash code.
            </summary>
        </member>
        <member name="P:Imagin.Common.DragSelector.IsDragging">
            <summary>
            Indicates if we're currently dragging.
            </summary>
        </member>
        <member name="P:Imagin.Common.DragSelector.PreviousSelection">
            <summary>
            Stores reference to previously selected area.
            </summary>
        </member>
        <member name="P:Imagin.Common.DragSelector.StartPoint">
            <summary>
            Point indicating where the drag started.
            </summary>
        </member>
        <member name="M:Imagin.Common.DragSelector.OnMouseDown(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Occurs when mouse is down; begins drag.
            </summary>
        </member>
        <member name="M:Imagin.Common.DragSelector.OnMouseMove(System.Object,System.Windows.Input.MouseEventArgs)">
            <summary>
            Ocurrs whenever mouse moves; drag is evaluated.
            </summary>
        </member>
        <member name="M:Imagin.Common.DragSelector.OnMouseUp(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Occurs when mouse is up; ends drag.
            </summary>
        </member>
        <member name="M:Imagin.Common.DragSelector.FindPresenter">
            <summary>
            Find and store reference to <see cref="P:Imagin.Common.DragSelector.ScrollContentPresenter"/> by searching <see cref="P:Imagin.Common.DragSelector.ScrollViewer"/> template.
            </summary>
        </member>
        <member name="M:Imagin.Common.DragSelector.Scroll(System.Windows.Point)">
            <summary>
            Scroll based on current position.
            </summary>
            <param name="Position"></param>
        </member>
        <member name="M:Imagin.Common.DragSelector.IntersectsWith(System.Windows.Rect,System.Windows.Rect,System.Windows.Rect)">
            <summary>
            Gets whether or not the given <see cref="T:System.Windows.Rect"/> intersects with either of the other two given <see cref="T:System.Windows.Rect"/>s: True if first, false if second, null if neither.
            </summary>
            <param name="Rect1"></param>
            <param name="Rect2"></param>
            <param name="Rect3"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.DragSelector.IntersectedWith(System.Windows.Rect)">
            <summary>
            Gets whether or not the given <see cref="T:System.Windows.Rect"/> intersects with any previous selection.
            </summary>
            <param name="Bounds"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.DragSelector.Select(System.Windows.Controls.ItemsControl,System.Windows.Rect)">
            <summary>
            Select items in control based on given area.
            </summary>
            <param name="Control"></param>
            <param name="Area"></param>
        </member>
        <member name="T:Imagin.Common.FlagCheckView">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.FlagCheckView.FlagsProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.FlagCheckView.Flags">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.FlagCheckView.ItemsProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.FlagCheckView.Items">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.FlagCheckView.ItemsPanelProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.FlagCheckView.ItemsPanel">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.FlagCheckView.ItemTemplateProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.FlagCheckView.ItemTemplate">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.FlagCheckView.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.FlagCheckView.OnFlagsChanged(System.Object,System.Object)">
            <summary>
            
            </summary>
            <param name="OldValue"></param>
            <param name="NewValue"></param>
        </member>
        <member name="M:Imagin.Common.FlagCheckView.OnItemAdded(System.Object,Imagin.Common.Input.EventArgs{Imagin.Common.CheckableObject{System.Object}})">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Imagin.Common.FlagCheckView.OnItemChecked(System.Object,System.EventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Imagin.Common.FlagCheckView.OnItemUnchecked(System.Object,System.EventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Imagin.Common.StoragePickerDialog">
            <summary>
            
            </summary>
            <summary>
            StoragePickerDialog
            </summary>
        </member>
        <member name="F:Imagin.Common.StoragePickerDialog.CheckedPathsProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.StoragePickerDialog.CheckedPaths">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.StoragePickerDialog.#ctor">
            <summary>
            CheckedPaths
            </summary>
        </member>
        <member name="M:Imagin.Common.StoragePickerDialog.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Imagin.Common.ItemView">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.ItemView.ItemContainerStyleProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.ItemView.ItemContainerStyle">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.ItemView.ItemTemplateProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.ItemView.ItemTemplate">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.ItemView.ItemWidthProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.ItemView.ItemWidth">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.ItemView.ItemHeightProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.ItemView.ItemHeight">
            <summary>
            
            </summary>
        </member>
        <member name="T:Imagin.Common.Line">
            <summary>
             A flexible separator.
            </summary>
        </member>
        <member name="F:Imagin.Common.Line.ContentProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Line.Content">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Line.ContentStringFormatProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Line.ContentStringFormat">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Line.ContentTemplateProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Line.ContentTemplate">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Line.OrientationProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Line.Orientation">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Line.StrokeProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Line.Stroke">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Line.StrokeThicknessProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Line.StrokeThickness">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Line.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="T:Imagin.Common.Link">
            <summary>
            Opens up a web link in default browser when clicked.
            </summary>
        </member>
        <member name="F:Imagin.Common.Link.TextDecorationsProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Link.TextDecorations">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Link.TextTrimmingProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Link.TextTrimming">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Link.TextWrappingProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Link.TextWrapping">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Link.UriProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Link.Uri">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Link.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Link.OnApplyTemplate">
            <summary>
            
            </summary>
        </member>
        <member name="T:Imagin.Common.ListView">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.ListView.SelectedValuesProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.ListView.SelectedValues">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.ListView.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="T:Imagin.Common.LocalizedTextBlock">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.LocalizedTextBlock.LocalizedTextProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.LocalizedTextBlock.LocalizedText">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.LocalizedTextBlock.TextProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.LocalizedTextBlock.Text">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.LocalizedTextBlock.TextStyleProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.LocalizedTextBlock.TextStyle">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.LocalizedTextBlock.TextTrimmingProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.LocalizedTextBlock.TextTrimming">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.LocalizedTextBlock.TextWrappingProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.LocalizedTextBlock.TextWrapping">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.LocalizedTextBlock.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.LocalizedTextBlock.OnTextChanged(System.Object)">
            <summary>
            
            </summary>
            <param name="Value"></param>
        </member>
        <member name="M:Imagin.Common.LocalizedTextBlock.OnTextStyleChanged(System.Windows.Style)">
            <summary>
            
            </summary>
            <param name="Value"></param>
        </member>
        <member name="T:Imagin.Common.MaskedButton">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.MaskedButton.ContentMarginProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.MaskedButton.ContentMargin">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.MaskedButton.DropDownProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.MaskedButton.DropDown">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.MaskedButton.DropDownAnimationProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.MaskedButton.DropDownAnimation">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.MaskedButton.DropDownButtonToolTipProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.MaskedButton.DropDownButtonToolTip">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.MaskedButton.DropDownButtonVisibilityProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.MaskedButton.DropDownButtonVisibility">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.MaskedButton.DropDownDataContextProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.MaskedButton.DropDownDataContext">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.MaskedButton.DropDownPlacementProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.MaskedButton.DropDownPlacement">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.MaskedButton.IsCheckedProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.MaskedButton.IsChecked">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.MaskedButton.IsRippleEnabledProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.MaskedButton.IsRippleEnabled">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.MaskedButton.SourceProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.MaskedButton.Source">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.MaskedButton.SourceColorProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.MaskedButton.SourceColor">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.MaskedButton.SourceHeightProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.MaskedButton.SourceHeight">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.MaskedButton.SourceWidthProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.MaskedButton.SourceWidth">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.MaskedButton.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.MaskedButton.OnApplyTemplate">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.MaskedButton.OnDropDownChanged(System.Windows.Controls.ContextMenu)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Imagin.Common.MaskedButton.OnLoaded(System.Windows.RoutedEventArgs)">
            <summary>
            
            </summary>
        </member>
        <member name="T:Imagin.Common.MaskedDropDownButton">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.MaskedDropDownButton.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.MaskedDropDownButton.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Imagin.Common.MaskedDropDownButton.OnDropDownChanged(System.Windows.Controls.ContextMenu)">
            <summary>
            
            </summary>
            <param name="Value"></param>
        </member>
        <member name="M:Imagin.Common.MaskedDropDownButton.OnDropDownDataContextChanged(System.Object)">
            <summary>
            
            </summary>
            <param name="Value"></param>
        </member>
        <member name="M:Imagin.Common.MaskedDropDownButton.OnLoaded(System.Windows.RoutedEventArgs)">
            <summary>
            
            </summary>
        </member>
        <member name="T:Imagin.Common.MaskedImage">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.MaskedImage.SourceProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.MaskedImage.Source">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.MaskedImage.SourceColorProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.MaskedImage.SourceColor">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.MaskedImage.SourceHeightProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.MaskedImage.SourceHeight">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.MaskedImage.SourceWidthProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.MaskedImage.SourceWidth">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.MaskedImage.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.MaskedImage.OnSourceChanged(System.Windows.Media.ImageSource)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Imagin.Common.MaskedImage.OnApplyTemplate">
            <summary>
            
            </summary>
        </member>
        <member name="T:Imagin.Common.MaskedToggleButton">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.MaskedToggleButton.CheckedContentProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.MaskedToggleButton.CheckedContent">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.MaskedToggleButton.CheckedSourceProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.MaskedToggleButton.CheckedSource">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.MaskedToggleButton.CheckedToolTipProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.MaskedToggleButton.CheckedToolTip">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.MaskedToggleButton.ContentMarginProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.MaskedToggleButton.ContentMargin">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.MaskedToggleButton.DropDownProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.MaskedToggleButton.DropDown">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.MaskedToggleButton.DropDownAnimationProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.MaskedToggleButton.DropDownAnimation">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.MaskedToggleButton.DropDownButtonToolTipProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.MaskedToggleButton.DropDownButtonToolTip">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.MaskedToggleButton.DropDownButtonVisibilityProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.MaskedToggleButton.DropDownButtonVisibility">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.MaskedToggleButton.DropDownDataContextProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.MaskedToggleButton.DropDownDataContext">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.MaskedToggleButton.DropDownPlacementProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.MaskedToggleButton.DropDownPlacement">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.MaskedToggleButton.DropDownVisibilityProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.MaskedToggleButton.DropDownVisibility">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.MaskedToggleButton.GroupNameProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.MaskedToggleButton.GroupName">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.MaskedToggleButton.IsRippleEnabledProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.MaskedToggleButton.IsRippleEnabled">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.MaskedToggleButton.SourceProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.MaskedToggleButton.Source">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.MaskedToggleButton.SourceColorProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.MaskedToggleButton.SourceColor">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.MaskedToggleButton.SourceHeightProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.MaskedToggleButton.SourceHeight">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.MaskedToggleButton.SourceWidthProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.MaskedToggleButton.SourceWidth">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.MaskedToggleButton.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.MaskedToggleButton.OnChecked(System.Object,System.EventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Imagin.Common.MaskedToggleButton.OnApplyTemplate">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.MaskedToggleButton.OnDropDownChanged(System.Windows.Controls.ContextMenu)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Imagin.Common.MaskedToggleButton.OnGroupNameChanged(System.String)">
            <summary>
            
            </summary>
            <param name="Value"></param>
        </member>
        <member name="T:Imagin.Common.Menu">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Menu.AdjacentContentProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Menu.AdjacentContent">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Menu.OpposingContentProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Menu.OpposingContent">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Menu.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="T:Imagin.Common.MenuItemSelectionMode">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.MenuItemSelectionMode.Single">
            <summary>
            One item may be checked.
            </summary>
        </member>
        <member name="F:Imagin.Common.MenuItemSelectionMode.SingleOrNone">
            <summary>
            Either one or no items may be checked.
            </summary>
        </member>
        <member name="F:Imagin.Common.MenuItemSelectionMode.Multiple">
            <summary>
            Any number of items may be checked; equivalent to
            not specifying a group name.
            </summary>
        </member>
        <member name="T:Imagin.Common.IPropertyGrid`1">
            <summary>
            Defines a grid that displays properties.
            </summary>
            <typeparam name="TSource"></typeparam>
        </member>
        <member name="M:Imagin.Common.IPropertyGrid`1.LoadPropertiesAsync(`0)">
            <summary>
            Loads a collection of properties served by the given <see langword="TSource"/>.
            </summary>
            <param name="source">The source in which properties are served.</param>
        </member>
        <member name="T:Imagin.Common.PropertyGrid">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.PropertyGrid.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.PropertyGrid.OnSourceLocked(System.Object,System.EventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Imagin.Common.PropertyGrid.OnSourceUnlocked(System.Object,System.EventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Imagin.Common.PropertyGrid.OnSourcePropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Imagin.Common.PropertyGrid.OnSourceDeleted(System.Object,System.EventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Imagin.Common.PropertyGrid.FollowSource(System.Object)">
            <summary>
            
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:Imagin.Common.PropertyGrid.IgnoreSource(System.Object)">
            <summary>
            
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:Imagin.Common.PropertyGrid.GetSource">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.PropertyGrid.Nest(System.Object)">
            <summary>
            
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:Imagin.Common.PropertyGrid.RewindNest">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.PropertyGrid.OnSourceLocked">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.PropertyGrid.OnSourceUnlocked">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.PropertyGrid.OnSourcePropertyChanged(System.String)">
            <summary>
            
            </summary>
            <param name="propertyName"></param>
        </member>
        <member name="M:Imagin.Common.PropertyGrid.OnSourceDeleted(System.Object)">
            <summary>
            
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:Imagin.Common.PropertyGrid.LoadPropertiesAsync(System.Object)">
            <summary>
            Loads a collection of properties served by the given <see cref="T:System.Object"/>.
            </summary>
            <param name="source">The source in which properties are served.</param>
        </member>
        <member name="T:Imagin.Common.PropertyGridBase">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.PropertyGridBase.isNesting">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.PropertyGridBase.nest">
            <summary>
            Stores a reference to every nested property relative to the original host; properties are stored in order of depth.
            </summary>
        </member>
        <member name="F:Imagin.Common.PropertyGridBase.AcceptsNullObjectsProperty">
            <summary>
            Identifies the <see cref="P:Imagin.Common.PropertyGridBase.AcceptsNullObjects"/> <see cref="T:System.Windows.DependencyProperty"/>.
            </summary>
        </member>
        <member name="P:Imagin.Common.PropertyGridBase.AcceptsNullObjects">
            <summary>
            Gets or sets whether or not a <see langword="null"/> object may be assigned.
            </summary>
        </member>
        <member name="F:Imagin.Common.PropertyGridBase.HeaderButtonsProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.PropertyGridBase.HeaderButtons">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.PropertyGridBase.DateTimeFormatProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.PropertyGridBase.DateTimeFormat">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.PropertyGridBase.DescriptionResizeModeProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.PropertyGridBase.DescriptionResizeMode">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.PropertyGridBase.DescriptionStringFormatProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.PropertyGridBase.DescriptionStringFormat">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.PropertyGridBase.DescriptionTemplateProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.PropertyGridBase.DescriptionTemplate">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.PropertyGridBase.DescriptionTemplateSelectorProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.PropertyGridBase.DescriptionTemplateSelector">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.PropertyGridBase.DescriptionVisibilityProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.PropertyGridBase.DescriptionVisibility">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.PropertyGridBase.FileSizeFormatProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.PropertyGridBase.FileSizeFormat">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.PropertyGridBase.GroupNameProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.PropertyGridBase.GroupName">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.PropertyGridBase.GroupVisibilityProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.PropertyGridBase.GroupVisibility">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.PropertyGridBase.HeaderVisibilityProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.PropertyGridBase.HeaderVisibility">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.PropertyGridBase.LoaderTemplateProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.PropertyGridBase.LoaderTemplate">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.PropertyGridBase.IsLoadingProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.PropertyGridBase.IsLoading">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.PropertyGridBase.IsSourceEnabledProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.PropertyGridBase.IsSourceEnabled">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.PropertyGridBase.NestedPropertyStringFormatProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.PropertyGridBase.NestedPropertyStringFormat">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.PropertyGridBase.NestedPropertyTemplateProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.PropertyGridBase.NestedPropertyTemplate">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.PropertyGridBase.NestedPropertyTemplateSelectorProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.PropertyGridBase.NestedPropertyTemplateSelector">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.PropertyGridBase.PropertiesProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.PropertyGridBase.Properties">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.PropertyGridBase.PropertiesViewProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.PropertyGridBase.PropertiesView">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.PropertyGridBase.NameColumnHeaderProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.PropertyGridBase.NameColumnHeader">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.PropertyGridBase.PropertyColumnWidthProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.PropertyGridBase.PropertyColumnWidth">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.PropertyGridBase.SearchQueryProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.PropertyGridBase.SearchQuery">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.PropertyGridBase.SortDirectionProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.PropertyGridBase.SortDirection">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.PropertyGridBase.SortNameProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.PropertyGridBase.SortName">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.PropertyGridBase.SplitterStyleProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.PropertyGridBase.SplitterStyle">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.PropertyGridBase.TokenStyleProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.PropertyGridBase.TokenStyle">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.PropertyGridBase.TypeStringFormatProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.PropertyGridBase.TypeStringFormat">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.PropertyGridBase.TypeTemplateProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.PropertyGridBase.TypeTemplate">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.PropertyGridBase.TypeTemplateSelectorProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.PropertyGridBase.TypeTemplateSelector">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.PropertyGridBase.TypeVisibilityProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.PropertyGridBase.TypeVisibility">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.PropertyGridBase.ValueColumnHeaderProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.PropertyGridBase.ValueColumnHeader">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.PropertyGridBase.ValueColumnWidthProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.PropertyGridBase.ValueColumnWidth">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.PropertyGridBase.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.PropertyGridBase.GetSource">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.PropertyGridBase.Nest(System.Object)">
            <summary>
            
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:Imagin.Common.PropertyGridBase.RewindNest">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.PropertyGridBase.DisconnectSourceCommand">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.PropertyGridBase.GroupCommand">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.PropertyGridBase.NestCommand">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.PropertyGridBase.ResetSourceCommand">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.PropertyGridBase.RewindNestCommand">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.PropertyGridBase.SortCommand">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.PropertyGridBase.OnApplyTemplate">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.PropertyGridBase.OnItemContainerStyleChanged(System.Windows.Style,System.Windows.Style)">
            <summary>
            
            </summary>
            <param name="oldItemContainerStyle"></param>
            <param name="newItemContainerStyle"></param>
        </member>
        <member name="M:Imagin.Common.PropertyGridBase.OnDescriptionResizeModeChanged(System.Boolean)">
            <summary>
            
            </summary>
            <param name="Value"></param>
        </member>
        <member name="M:Imagin.Common.PropertyGridBase.OnDescriptionVisibilityChanged(System.Windows.Visibility)">
            <summary>
            
            </summary>
            <param name="Value"></param>
        </member>
        <member name="M:Imagin.Common.PropertyGridBase.OnGroupDirectionChanged(System.ComponentModel.ListSortDirection)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Imagin.Common.PropertyGridBase.OnGroupNameChanged(Imagin.Common.PropertyGridGroupName)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Imagin.Common.PropertyGridBase.OnLanguageChanged(System.Object,Imagin.Common.Input.EventArgs{System.Globalization.CultureInfo})">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Imagin.Common.PropertyGridBase.OnLoaded(System.Windows.RoutedEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Imagin.Common.PropertyGridBase.OnNameColumnHeaderChanged(System.Object)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Imagin.Common.PropertyGridBase.OnPresented">
            <summary>
            Occurs when <see cref="T:Imagin.Common.PropertyGridBase"/> loads for the first time.
            </summary>
        </member>
        <member name="M:Imagin.Common.PropertyGridBase.OnPropertiesChanged(Imagin.Common.PropertyModelCollection)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Imagin.Common.PropertyGridBase.OnPropertiesViewChanged(System.Windows.Data.ListCollectionView)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Imagin.Common.PropertyGridBase.OnUnloaded(System.Windows.RoutedEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Imagin.Common.PropertyGridBase.OnSortDirectionChanged(System.ComponentModel.ListSortDirection)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Imagin.Common.PropertyGridBase.OnSortNameChanged(Imagin.Common.PropertyGridSortName)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Imagin.Common.PropertyGridBase.OnNameColumnWidthChanged(System.Windows.Controls.DataGridLength)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Imagin.Common.PropertyGridBase.OnValueColumnHeaderChanged(System.Object)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Imagin.Common.PropertyGridBase.OnValueColumnWidthChanged(System.Windows.Controls.DataGridLength)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="T:Imagin.Common.PropertyGridBase`1">
            <summary>
            
            </summary>
            <typeparam name="TSource"></typeparam>
        </member>
        <member name="E:Imagin.Common.PropertyGridBase`1.SourceChanged">
            <summary>
            Occurs when the selected object changes.
            </summary>
        </member>
        <member name="F:Imagin.Common.PropertyGridBase`1.SourceProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.PropertyGridBase`1.Source">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.PropertyGridBase`1.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.PropertyGridBase`1.DisconnectSourceCommand">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.PropertyGridBase`1.OnUnloaded(System.Windows.RoutedEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Imagin.Common.PropertyGridBase`1.FollowSource(`0)">
            <summary>
            
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:Imagin.Common.PropertyGridBase`1.LoadPropertiesAsync(`0)">
            <summary>
            Loads a collection of properties served by the given <see cref="T:System.Object"/>.
            </summary>
            <param name="source">The source in which properties are served.</param>
        </member>
        <member name="M:Imagin.Common.PropertyGridBase`1.IgnoreSource(`0)">
            <summary>
            
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:Imagin.Common.PropertyGridBase`1.OnSourceChanged(`0,`0)">
            <summary>
            
            </summary>
            <param name="oldSource"></param>
            <param name="newSource"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.PropertyGridGroupName">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.PropertyGridGroupName.None">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.PropertyGridGroupName.Category">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.PropertyGridGroupName.Name">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.PropertyGridGroupName.Type">
            <summary>
            
            </summary>
        </member>
        <member name="T:Imagin.Common.PropertyGridSortName">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.PropertyGridSortName.Name">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.PropertyGridSortName.Type">
            <summary>
            
            </summary>
        </member>
        <member name="T:Imagin.Common.PropertyType">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.PropertyType.Default">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.PropertyType.Host">
            <summary>
            
            </summary>
        </member>
        <member name="T:Imagin.Common.PropertyTemplateSelector">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.PropertyTemplateSelector.Resources">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.PropertyTemplateSelector.SelectTemplate(System.Object,System.Windows.DependencyObject)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <param name="container"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.ResourceDictionaryEditor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.ResourceDictionaryEditor.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.ResourceDictionaryEditor.FollowSource(System.Windows.ResourceDictionary)">
            <summary>
            
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:Imagin.Common.ResourceDictionaryEditor.GetSource">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.ResourceDictionaryEditor.IgnoreSource(System.Windows.ResourceDictionary)">
            <summary>
            
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:Imagin.Common.ResourceDictionaryEditor.Nest(System.Object)">
            <summary>
            
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:Imagin.Common.ResourceDictionaryEditor.RewindNest">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.ResourceDictionaryEditor.LoadPropertiesAsync(System.Windows.ResourceDictionary)">
            <summary>
            Loads a collection of properties served by the given <see cref="T:System.Windows.ResourceDictionary"/>.
            </summary>
            <param name="source">The source in which properties are served.</param>
        </member>
        <member name="T:Imagin.Common.PropertyAttribute">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.PropertyAttribute.Type">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.PropertyAttribute.Attribute">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.PropertyAttribute.#ctor(System.Attribute)">
            <summary>
            
            </summary>
            <param name="Attribute"></param>
        </member>
        <member name="M:Imagin.Common.PropertyAttribute.SetAttribute(System.Attribute)">
            <summary>
            
            </summary>
            <param name="Attribute"></param>
        </member>
        <member name="T:Imagin.Common.PropertyAttribute`1">
            <summary>
            
            </summary>
            <typeparam name="TAttribute"></typeparam>
        </member>
        <member name="P:Imagin.Common.PropertyAttribute`1.Type">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.PropertyAttribute`1.#ctor(`0)">
            <summary>
            
            </summary>
            <param name="Attribute"></param>
        </member>
        <member name="T:Imagin.Common.PropertyAttributes">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.PropertyAttributes.#ctor(Imagin.Common.PropertyAttribute[])">
            <summary>
            
            </summary>
            <param name="Attributes"></param>
        </member>
        <member name="M:Imagin.Common.PropertyAttributes.ExtractFrom(System.Reflection.PropertyInfo)">
            <summary>
            
            </summary>
            <param name="Property"></param>
        </member>
        <member name="M:Imagin.Common.PropertyAttributes.Get``1">
            <summary>
            
            </summary>
            <typeparam name="TAttribute"></typeparam>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.PropertyModelCollection">
            <summary>
            A collection of <see cref="T:Imagin.Common.PropertyModel"/> objects.
            </summary>
        </member>
        <member name="P:Imagin.Common.PropertyModelCollection.ActiveProperty">
            <summary>
            The active, or selected, property.
            </summary>
        </member>
        <member name="P:Imagin.Common.PropertyModelCollection.Featured">
            <summary>
            Gets the featured property, which is placed above all others.
            </summary>
        </member>
        <member name="P:Imagin.Common.PropertyModelCollection.Source">
            <summary>
            Gets or sets the object that is currently hosted.
            </summary>
        </member>
        <member name="M:Imagin.Common.PropertyModelCollection.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.PropertyModelCollection.IsSupported(System.Reflection.PropertyInfo)">
            <summary>
            If the property is public (i.e., have public getter AND setter) AND:
            
            a) Has a type that is supported (nullable or not), 
            b) Is <see cref="T:System.Enum"/>, or 
            c) Implements <see cref="T:System.Collections.IList"/>.
            </summary>
            <param name="Property"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.PropertyModelCollection.OnItemAdded(Imagin.Common.PropertyModel)">
            <summary>
            
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Imagin.Common.PropertyModelCollection.LoadAsync(System.Object,System.Action)">
            <summary>
            Set properties by enumerating the properties of an <see cref="T:System.Object"/>.
            </summary>
            <param name="source">The object to examine.</param>
            <param name="callback">What to do afterwards.</param>
            <remarks>
            TO-DO: Evaluate dynamic properties if the object implements a certain interface? 
            
            Dynamic properties would be properties that don't need to be owned by the object
            and cannot be modified, but should be displayed to the user anyway. 
            
            The object would have to specify how to get the value for each dynamic property 
            internally using an <see cref="T:System.Action"/>; the <see cref="T:System.Action"/> simply returns 
            the object we want.
            
            The interface would expose a method that accepts the latter-described action,
            invokes it, and returns the resulting object (the current value of the 
            dynamic property). Note, this enables you to calculate the value for the 
            dynamic property however you like.
            
            If the object implements this interface, we can safely check for dynamic 
            properties. While enumerating, we'd get the initial value; subsequently,
            we'd need a way of updating it when it should be (another TO-DO).
            
            Assuming each dynamic property specifies a general type, we'll know what type
            to cast to when retrieving the it's value.
            
            Ultimately, this would enable you to display properties in addition to the ones
            the object already owns without the additional overhead.
            </remarks>
        </member>
        <member name="M:Imagin.Common.PropertyModelCollection.LoadAsync(System.Windows.ResourceDictionary,System.Action)">
            <summary>
            Set properties by enumerating the elements of a <see cref="T:System.Windows.ResourceDictionary"/>.
            </summary>
            <param name="source">The dictionary to enumerate.</param>
            <param name="callback">What to do afterwards.</param>
        </member>
        <member name="M:Imagin.Common.PropertyModelCollection.Reset(System.Object)">
            <summary>
            Clear all properties and assign the given <see cref="T:System.Object"/>, if any.
            </summary>
            <param name="source"></param>
        </member>
        <member name="T:Imagin.Common.CoercedPropertyModel`1">
            <summary>
            Represents a property that has both a minimum and maximum value.
            </summary>
            <typeparam name="TPrimitive"></typeparam>
        </member>
        <member name="P:Imagin.Common.CoercedPropertyModel`1.Maximum">
            <summary>
            Gets or sets the maximum value.
            </summary>
        </member>
        <member name="P:Imagin.Common.CoercedPropertyModel`1.Minimum">
            <summary>
            Gets or sets the minimum value.
            </summary>
        </member>
        <member name="M:Imagin.Common.CoercedPropertyModel`1.SetRange(System.Object,System.Object)">
            <summary>
            Sets the constraint with the given minimum and maximum values.
            </summary>
            <param name="minimum"></param>
            <param name="maximum"></param>
        </member>
        <member name="M:Imagin.Common.CoercedPropertyModel`1.Imagin#Common#IRange#Coerce(System.Object)">
            <summary>
            This particular method is neither needed nor supported.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.CoercedVariantPropertyModel`2">
            <summary>
            Represents a property with a type that uses another type to modify it, and has both a minimum and maximum value.
            </summary>
            <typeparam name="TVariant">The type used to modify the property.</typeparam>
            <typeparam name="TPrimitive">The actual type of the property.</typeparam>
        </member>
        <member name="P:Imagin.Common.CoercedVariantPropertyModel`2.Variant">
            <summary>
            The value of type <see langword="TVariant"/> that corresponds to the value of type <see langword="TPrimitive"/>.
            </summary>
        </member>
        <member name="M:Imagin.Common.CoercedVariantPropertyModel`2.OnValueChanged(System.Object)">
            <summary>
            Occurs when <see cref="P:Imagin.Common.PropertyModel.Value"/> changes.
            </summary>
            <param name="Value">The new value.</param>
        </member>
        <member name="M:Imagin.Common.CoercedVariantPropertyModel`2.OnVariantChanged(System.Object,Imagin.Common.Input.EventArgs{`1})">
            <summary>
            Occurs when <see cref="P:Imagin.Common.CoercedVariantPropertyModel`2.Variant"/> changes.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Imagin.Common.NestedPropertyModel">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.NestedPropertyModel.Primitive">
            <summary>
            Gets the underlying property type (if the property is <see cref="T:System.Nullable"/>, this will be the underlying type).
            </summary>
        </member>
        <member name="M:Imagin.Common.NestedPropertyModel.OnValueChanged(System.Object)">
            <summary>
            Occurs when the value changes.
            </summary>
            <param name="Value">The new value.</param>
        </member>
        <member name="T:Imagin.Common.PropertyModel">
            <summary>
            The base implementation for an object that represents a property.
            </summary>
            <summary>
            The base implementation for an object that represents a property.
            </summary>
        </member>
        <member name="F:Imagin.Common.PropertyModel.source">
            <summary>
            Gets or sets the object this property belongs to.
            </summary>
        </member>
        <member name="F:Imagin.Common.PropertyModel.info">
            <summary>
            Gets the <see cref="T:System.Reflection.PropertyInfo"/> for the property.
            </summary>
        </member>
        <member name="F:Imagin.Common.PropertyModel.HostPropertyChangeHandled">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.PropertyModel.ValueChangeHandled">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.PropertyModel.Category">
            <summary>
            Gets or sets the property category.
            </summary>
        </member>
        <member name="P:Imagin.Common.PropertyModel.Description">
            <summary>
            Gets or sets the property description.
            </summary>
        </member>
        <member name="P:Imagin.Common.PropertyModel.DisplayName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.PropertyModel.Format">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.PropertyModel.IsFeatured">
            <summary>
            Gets whether or not the property is featured.
            </summary>
        </member>
        <member name="P:Imagin.Common.PropertyModel.IsEnabled">
            <summary>
            Gets whether or not the property is enabled.
            </summary>
        </member>
        <member name="P:Imagin.Common.PropertyModel.IsReadOnly">
            <summary>
            Gets whether or not the property is readonly.
            </summary>
        </member>
        <member name="P:Imagin.Common.PropertyModel.Name">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.PropertyModel.Primitive">
            <summary>
            Gets the actual property type (note, if the property is nullable, this will be the underlying type).
            </summary>
        </member>
        <member name="P:Imagin.Common.PropertyModel.StringFormat">
            <summary>
            Gets or sets the string format for the property.
            </summary>
        </member>
        <member name="P:Imagin.Common.PropertyModel.Tag">
            <summary>
            An object for general use.
            </summary>
        </member>
        <member name="P:Imagin.Common.PropertyModel.Type">
            <summary>
            Gets the <see cref="T:System.String"/> representation of the property's type.
            </summary>
            <remarks>
            Used for sorting only.
            </remarks>
        </member>
        <member name="P:Imagin.Common.PropertyModel.Value">
            <summary>
            Gets or sets the current value for the property.
            </summary>
        </member>
        <member name="M:Imagin.Common.PropertyModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Imagin.Common.PropertyModel"/> class.
            </summary>
        </member>
        <member name="M:Imagin.Common.PropertyModel.OnPreviewValueChanged(System.Object,System.Object)">
            <summary>
            Occurs before <see cref="P:Imagin.Common.PropertyModel.Value"/> changes.
            </summary>
            <param name="OldValue">The old value.</param>
            <param name="NewValue">The new value.</param>
            <returns>The value to assign.</returns>
        </member>
        <member name="M:Imagin.Common.PropertyModel.OnValueChanged(System.Object)">
            <summary>
            Occurs when <see cref="P:Imagin.Common.PropertyModel.Value"/> changes.
            </summary>
            <param name="Value">The new value.</param>
        </member>
        <member name="M:Imagin.Common.PropertyModel.RefreshValue">
            <summary>
            
            </summary>
        </member>
        <member name="T:Imagin.Common.PropertyModel.Selector">
            <summary>
            A utility for creating a <see cref="T:Imagin.Common.PropertyModel"/> based on various parameters.
            To support additional types, the type's model and the type must be defined in <see cref="F:Imagin.Common.PropertyModel.Selector.Models"/> 
            and <see cref="F:Imagin.Common.PropertyModel.Selector.Types"/>, respectively. Additionally, a <see cref="T:System.Windows.DataTemplate"/> corresponding 
            to the type must also be defined.
            </summary>
        </member>
        <member name="F:Imagin.Common.PropertyModel.Selector.Models">
            <summary>
            Gets a list of each type's corresponding <see cref="T:Imagin.Common.PropertyModel"/>.
            </summary>
        </member>
        <member name="F:Imagin.Common.PropertyModel.Selector.Types">
            <summary>
            Gets a list of all types that can be modelled (excluding special types <see cref="T:System.Enum"/>, <see cref="T:System.Collections.IList"/>, and <see cref="T:System.Object"/>).
            </summary>
        </member>
        <member name="M:Imagin.Common.PropertyModel.Selector.AssignAttributes(Imagin.Common.PropertyModel,System.Reflection.PropertyInfo,Imagin.Common.PropertyAttributes)">
            <summary>
            Assigns the given <see cref="T:Imagin.Common.PropertyAttributes"/> to the given <see cref="T:Imagin.Common.PropertyModel"/>.
            </summary>
            <param name="model"></param>
            <param name="info"></param>
            <param name="attributes"></param>
        </member>
        <member name="M:Imagin.Common.PropertyModel.Selector.Select(System.Type)">
            <summary>
            Gets a <see cref="T:Imagin.Common.PropertyModel"/> based on the given type.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.PropertyModel.Selector.Select(System.Object,System.Reflection.PropertyInfo,Imagin.Common.PropertyAttributes,Imagin.Common.PropertyType)">
            <summary>
            Gets a <see cref="T:Imagin.Common.PropertyModel"/> based on the given <see cref="T:System.Object"/>.
            </summary>
            <param name="source"></param>
            <param name="info"></param>
            <param name="attributes"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.PropertyModel.Selector.Select(System.Type,System.Object,System.String,System.Object,System.String,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Gets a <see cref="T:Imagin.Common.PropertyModel"/> based on the given parameters.
            </summary>
            <param name="Type"></param>
            <param name="Host"></param>
            <param name="Name"></param>
            <param name="Value"></param>
            <param name="Category"></param>
            <param name="Description"></param>
            <param name="StringFormat"></param>
            <param name="IsReadOnly"></param>
            <param name="IsFeatured"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.PropertyModel`1">
            <summary>
            Represents an object property with specific type.
            </summary>
            <typeparam name="T">The type of the property.</typeparam>
        </member>
        <member name="P:Imagin.Common.PropertyModel`1.Default">
            <summary>
            Gets the default value of the property.
            </summary>
        </member>
        <member name="P:Imagin.Common.PropertyModel`1.Primitive">
            <summary>
            Gets the underlying property type (if the property is <see cref="T:System.Nullable"/>, this will be the underlying type).
            </summary>
        </member>
        <member name="M:Imagin.Common.PropertyModel`1.OnPreviewValueChanged(System.Object,System.Object)">
            <summary>
            Occurs before <see cref="P:Imagin.Common.PropertyModel.Value"/> changes.
            </summary>
            <param name="OldValue">The old value.</param>
            <param name="NewValue">The new value.</param>
            <returns>The value to assign.</returns>
        </member>
        <member name="T:Imagin.Common.RadioGroup">
            <summary>
            A container for similar RadioButtons.
            </summary>
        </member>
        <member name="F:Imagin.Common.RadioGroup.CornerRadiusProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.RadioGroup.CornerRadius">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.RadioGroup.GroupNameProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.RadioGroup.GroupName">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.RadioGroup.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="T:Imagin.Common.ResizableGrid">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.ResizableGrid.ItemContainerStyleProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.ResizableGrid.ItemContainerStyle">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.ResizableGrid.ItemTemplateProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.ResizableGrid.ItemTemplate">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.ResizableGrid.ItemsSourceProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.ResizableGrid.ItemsSource">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.ResizableGrid.ColumnWidthProperty">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.ResizableGrid.SetColumnWidth(System.Windows.DependencyObject,System.Windows.GridLength)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.ResizableGrid.GetColumnWidth(System.Windows.DependencyObject)">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.ResizableGrid.MinColumnWidthProperty">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.ResizableGrid.SetMinColumnWidth(System.Windows.DependencyObject,System.Double)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.ResizableGrid.GetMinColumnWidth(System.Windows.DependencyObject)">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.ResizableGrid.MaxColumnWidthProperty">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.ResizableGrid.SetMaxColumnWidth(System.Windows.DependencyObject,System.Double)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.ResizableGrid.GetMaxColumnWidth(System.Windows.DependencyObject)">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.ResizableGrid.ShowSplitterProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.ResizableGrid.ShowSplitter">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.ResizableGrid.SplitterWidthProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.ResizableGrid.SplitterWidth">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.ResizableGrid.GetColumnDefinition(System.Windows.Controls.ContentPresenter,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.ResizableGrid.OnItemContainerStyleChanged(System.Windows.Style)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.ResizableGrid.OnItemsSourceChange(System.Collections.IEnumerable)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.ResizableGrid.OnItemTemplateChanged(System.Windows.DataTemplate)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.ResizableGrid.OnSplitterWidthChanged(System.Double)">
            <summary>
            
            </summary>
        </member>
        <member name="T:Imagin.Common.RippleDecorator">
            <summary>
            A container that applies a ripple effect to content.
            </summary>
            <remarks>
            If (RippleMouseEvent = MouseEvent.Default) 
                RepeatBehavior = Forever
                Animation begins without input
            </remarks>
        </member>
        <member name="F:Imagin.Common.RippleDecorator.IsRippleEnabledProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.RippleDecorator.IsRippleEnabled">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.RippleDecorator.MaximumOpacityProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.RippleDecorator.MaximumOpacity">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.RippleDecorator.MaximumRadiusProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.RippleDecorator.MaximumRadius">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.RippleDecorator.ToStrokeThicknessProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.RippleDecorator.ToStrokeThickness">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.RippleDecorator.FromStrokeThicknessProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.RippleDecorator.FromStrokeThickness">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.RippleDecorator.RippleMouseEventProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.RippleDecorator.RippleMouseEvent">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.RippleDecorator.RippleAnimationProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.RippleDecorator.RippleAnimation">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.RippleDecorator.RippleAccelerationProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.RippleDecorator.RippleAcceleration">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.RippleDecorator.RippleDecelerationProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.RippleDecorator.RippleDeceleration">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.RippleDecorator.RippleDelayProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.RippleDecorator.RippleDelay">
            <summary>
            Animation delay in seconds.
            </summary>
        </member>
        <member name="F:Imagin.Common.RippleDecorator.RippleDurationProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.RippleDecorator.RippleDuration">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.RippleDecorator.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.RippleDecorator.OnPreviewMouseDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Imagin.Common.RippleDecorator.OnApplyTemplate">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.RippleDecorator.OnPropertyChanged(System.Object)">
            <summary>
            
            </summary>
            <param name="Value"></param>
        </member>
        <member name="T:Imagin.Common.ScrollViewerExtended">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.ScrollViewerExtended.PaddingProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.ScrollViewerExtended.Padding">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.ScrollViewerExtended.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="T:Imagin.Common.SelectionCanvas">
            <summary>
            SelectionCanvas
            </summary>
        </member>
        <member name="E:Imagin.Common.SelectionCanvas.Selected">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.SelectionCanvas.IsDragging">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.SelectionCanvas.StartPosition">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.SelectionCanvas.ResetOnDrawnProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.SelectionCanvas.ResetOnDrawn">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.SelectionCanvas.SelectionProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.SelectionCanvas.Selection">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.SelectionCanvas.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.SelectionCanvas.OnSelected(Imagin.Common.Selection)">
            <summary>
            
            </summary>
            <param name="Selection"></param>
        </member>
        <member name="M:Imagin.Common.SelectionCanvas.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Imagin.Common.SplitView">
            <summary>
            A <see cref="T:System.Windows.Controls.Control"/> that arranges two <see cref="T:System.Windows.UIElement"/>s horizontally or vertically.
            </summary>
        </member>
        <member name="F:Imagin.Common.SplitView.Content1Property">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.SplitView.Content1">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.SplitView.Content2Property">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.SplitView.Content2">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.SplitView.OrientationProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.SplitView.Orientation">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.SplitView.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.SplitView.OnApplyTemplate">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.SplitView.OnOrientationChanged(System.Windows.Controls.Orientation)">
            <summary>
            
            </summary>
            <param name="NewValue"></param>
        </member>
        <member name="T:Imagin.Common.CheckableStorageCollection">
            <summary>
            
            </summary>
        </member>
        <member name="E:Imagin.Common.CheckableStorageCollection.ItemStateChanged">
            <summary>
            Occurs whenever an item's state changes.
            </summary>
        </member>
        <member name="M:Imagin.Common.CheckableStorageCollection.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.CheckableStorageCollection.OnItemAdded(Imagin.Common.CheckableStorageObject)">
            <summary>
            
            </summary>
            <param name="i"></param>
        </member>
        <member name="M:Imagin.Common.CheckableStorageCollection.OnItemRemoved(Imagin.Common.CheckableStorageObject)">
            <summary>
            
            </summary>
            <param name="i"></param>
        </member>
        <member name="M:Imagin.Common.CheckableStorageCollection.OnPreviewItemsCleared">
            <summary>
            
            </summary>
        </member>
        <member name="T:Imagin.Common.CheckableStorageObject">
            <summary>
            
            </summary>
        </member>
        <member name="E:Imagin.Common.CheckableStorageObject.Collapsed">
            <summary>
            
            </summary>
        </member>
        <member name="E:Imagin.Common.CheckableStorageObject.Expanded">
            <summary>
            
            </summary>
        </member>
        <member name="E:Imagin.Common.CheckableStorageObject.Selected">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.CheckableStorageObject.Children">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.CheckableStorageObject.IsExpanded">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.CheckableStorageObject.IsSelected">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.CheckableStorageObject.Path">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.CheckableStorageObject.QueryOnExpanded">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.CheckableStorageObject.IsChecked">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.CheckableStorageObject.#ctor(System.String,Imagin.Common.IO.ISystemObjectProvider,System.Nullable{System.Boolean})">
            <summary>
            
            </summary>
            <param name="path"></param>
            <param name="systemObjectProvider"></param>
            <param name="isChecked"></param>
        </member>
        <member name="M:Imagin.Common.CheckableStorageObject.OnChecked">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.CheckableStorageObject.OnStateChanged(System.Nullable{System.Boolean})">
            <summary>
            
            </summary>
            <param name="State"></param>
        </member>
        <member name="M:Imagin.Common.CheckableStorageObject.OnUnchecked">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.CheckableStorageObject.OnCollapsed">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.CheckableStorageObject.OnExpanded">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.CheckableStorageObject.OnSelected(Imagin.Common.Input.SelectedEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Imagin.Common.CheckableStorageObject.BeginQuery(Imagin.Common.IO.ISystemObjectProvider)">
            <summary>
            
            </summary>
            <param name="SystemProvider"></param>
        </member>
        <member name="T:Imagin.Common.StoragePicker">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.StoragePicker.SystemObjectsProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.StoragePicker.SystemObjects">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.StoragePicker.CheckedPathsProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.StoragePicker.CheckedPaths">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.StoragePicker.FileStyleProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.StoragePicker.FileStyle">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.StoragePicker.FileTemplateProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.StoragePicker.FileTemplate">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.StoragePicker.FolderStyleProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.StoragePicker.FolderStyle">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.StoragePicker.FolderTemplateProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.StoragePicker.FolderTemplate">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.StoragePicker.QueryOnExpandedProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.StoragePicker.QueryOnExpanded">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.StoragePicker.RootProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.StoragePicker.Root">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.StoragePicker.SystemObjectProviderProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.StoragePicker.SystemObjectProvider">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.StoragePicker.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.StoragePicker.OnQueryOnExpandedChanged(System.Boolean)">
            <summary>
            
            </summary>
            <param name="Value"></param>
        </member>
        <member name="M:Imagin.Common.StoragePicker.OnRefreshed(Imagin.Common.IO.ISystemObjectProvider,System.String)">
            <summary>
            
            </summary>
            <param name="Provider"></param>
            <param name="Root"></param>
        </member>
        <member name="M:Imagin.Common.StoragePicker.OnRootChanged(System.String)">
            <summary>
            
            </summary>
            <param name="Value"></param>
        </member>
        <member name="M:Imagin.Common.StoragePicker.OnSystemObjectProviderChanged(Imagin.Common.IO.ISystemObjectProvider)">
            <summary>
            
            </summary>
            <param name="Value"></param>
        </member>
        <member name="M:Imagin.Common.StoragePicker.OnSystemObjectStateChanged(System.Object,Imagin.Common.Input.CheckedEventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Imagin.Common.TabbedTree">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.TabbedTree.ColumnResizeModeProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.TabbedTree.ColumnResizeMode">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.TabbedTree.ContentBackgroundProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.TabbedTree.ContentBackground">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.TabbedTree.ContentBorderBrushProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.TabbedTree.ContentBorderBrush">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.TabbedTree.ContentBorderThicknessProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.TabbedTree.ContentBorderThickness">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.TabbedTree.ContentHeaderTemplateProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.TabbedTree.ContentHeaderTemplate">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.TabbedTree.ContentHeaderVisibilityProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.TabbedTree.ContentHeaderVisibility">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.TabbedTree.ContentPaddingProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.TabbedTree.ContentPadding">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.TabbedTree.ContentTemplateProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.TabbedTree.ContentTemplate">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.TabbedTree.ContentTemplateSelectorProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.TabbedTree.ContentTemplateSelector">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.TabbedTree.ContentTransitionProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.TabbedTree.ContentTransition">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.TabbedTree.ContentWidthProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.TabbedTree.ContentWidth">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.TabbedTree.MenuWidthProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.TabbedTree.MenuWidth">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.TabbedTree.MenuBackgroundProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.TabbedTree.MenuBackground">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.TabbedTree.MenuBorderBrushProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.TabbedTree.MenuBorderBrush">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.TabbedTree.MenuBorderThicknessProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.TabbedTree.MenuBorderThickness">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.TabbedTree.MenuPaddingProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.TabbedTree.MenuPadding">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.TabbedTree.SplitterWidthProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.TabbedTree.SplitterWidth">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.TabbedTree.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.TabbedTree.OnSelectedItemChanged(System.Object,System.Windows.RoutedPropertyChangedEventArgs{System.Object})">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Imagin.Common.TabbedTree.OnApplyTemplate">
            <summary>
            
            </summary>
        </member>
        <member name="T:Imagin.Common.AlphaNumericBox">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.AlphaNumericBox.regex">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.AlphaNumericBox.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="T:Imagin.Common.EditableLabel">
            <summary>
            
            </summary>
        </member>
        <member name="E:Imagin.Common.EditableLabel.Edited">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.EditableLabel.ButtonHorizontalAlignmentProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.EditableLabel.ButtonHorizontalAlignment">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.EditableLabel.IsEditableProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.EditableLabel.IsEditable">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.EditableLabel.MouseEventProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.EditableLabel.MouseEvent">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.EditableLabel.ShowButtonProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.EditableLabel.ShowButton">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.EditableLabel.TextTrimmingProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.EditableLabel.TextTrimming">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.EditableLabel.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.EditableLabel.OnPreviewMouseDoubleClick(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Imagin.Common.EditableLabel.OnPreviewMouseDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Imagin.Common.EditableLabel.OnPreviewMouseUp(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Imagin.Common.EditableLabel.OnEntered(System.String)">
            <summary>
            
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:Imagin.Common.EditableLabel.OnLostFocus(System.Windows.RoutedEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Imagin.Common.EditableLabel.OnApplyTemplate">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.EditableLabel.OnEdited(System.Boolean)">
            <summary>
            
            </summary>
            <param name="Value"></param>
        </member>
        <member name="T:Imagin.Common.FileBox">
            <summary>
            
            </summary>
        </member>
        <member name="T:Imagin.Common.FileBox.FileBoxValidateHandler">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.FileBox.FileBoxValidateHandler.Validate(System.Object[])">
            <summary>
            
            </summary>
            <param name="Arguments"></param>
            <returns></returns>
        </member>
        <member name="E:Imagin.Common.FileBox.DialogOpened">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.FileBox.BrowseButtonTemplateProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.FileBox.BrowseButtonTemplate">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.FileBox.BrowseButtonToolTipProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.FileBox.BrowseButtonToolTip">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.FileBox.BrowseModeProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.FileBox.BrowseMode">
            <summary>
            Gets or sets the type of objects to browse.
            </summary>
        </member>
        <member name="F:Imagin.Common.FileBox.BrowseTitleProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.FileBox.BrowseTitle">
            <summary>
            Gets or sets the title of the dialog used to browse objects.
            </summary>
        </member>
        <member name="F:Imagin.Common.FileBox.CanBrowseProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.FileBox.CanBrowse">
            <summary>
            Gets or sets whether or not browsing objects is enabled.
            </summary>
        </member>
        <member name="F:Imagin.Common.FileBox.CanValidateProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.FileBox.CanValidate">
            <summary>
            Gets or sets whether or not the input (or file or folder path) should be validated.
            </summary>
        </member>
        <member name="F:Imagin.Common.FileBox.IsValidProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.FileBox.IsValid">
            <summary>
            If validation is enabled, gets whether or not the input (or file or folder path) is valid.
            </summary>
        </member>
        <member name="F:Imagin.Common.FileBox.ShowBrowseButtonProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.FileBox.ShowBrowseButton">
            <summary>
            Gets or sets whether or not to show the button used to browse.
            </summary>
        </member>
        <member name="F:Imagin.Common.FileBox.ValidateHandlerProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.FileBox.ValidateHandler">
            <summary>
            If validation is enabled, gets or sets an object that implements <see cref="T:Imagin.Common.IValidate`1"/>, which is used to validate the input (or file or folder path).
            </summary>
        </member>
        <member name="F:Imagin.Common.FileBox.ValidityIndicatorTemplateProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.FileBox.ValidityIndicatorTemplate">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.FileBox.ValidityIndicatorToolTipProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.FileBox.ValidityIndicatorToolTip">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.FileBox.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.FileBox.OnBrowseModeChanged(Imagin.Common.WindowsDialogMode)">
            <summary>
            
            </summary>
            <param name="Value"></param>
        </member>
        <member name="M:Imagin.Common.FileBox.OnCanValidateChanged(System.Boolean)">
            <summary>
            
            </summary>
            <param name="Value"></param>
        </member>
        <member name="M:Imagin.Common.FileBox.OnDialogOpened">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.FileBox.OnTextChanged(System.Windows.Controls.TextChangedEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Imagin.Common.FileBox.Browse">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.FileBox.BrowseCommand">
            <summary>
            
            </summary>
        </member>
        <member name="T:Imagin.Common.HexBox">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.HexBox.regex">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.HexBox.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="T:Imagin.Common.ParseBox`1">
            <summary>
            
            </summary>
            <typeparam name="TType"></typeparam>
        </member>
        <member name="F:Imagin.Common.ParseBox`1.ValueProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.ParseBox`1.Value">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.ParseBox`1.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.ParseBox`1.SetText(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.ParseBox`1.GetValue(System.String)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.ParseBox`1.ToString(`0)">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.ParseBox`1.OnTextChanged(System.Windows.Controls.TextChangedEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Imagin.Common.ParseBox`1.OnValueChanged(`0)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Imagin.Common.ParseBox`1.OnValueCoerced(System.Object)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.RegexBox">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.RegexBox.regex">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.RegexBox.PatternProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.RegexBox.Pattern">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.RegexBox.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.RegexBox.OnPreviewTextInput(System.Windows.Input.TextCompositionEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:Imagin.Common.RegexBoxBase">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.RegexBoxBase.regex">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.RegexBoxBase.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.RegexBoxBase.OnPreviewTextInput(System.Windows.Input.TextCompositionEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:Imagin.Common.TextBox">
            <summary>
            
            </summary>
        </member>
        <member name="E:Imagin.Common.TextBox.Entered">
            <summary>
            
            </summary>
        </member>
        <member name="E:Imagin.Common.TextBox.TripleClick">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.TextBox.ClearButtonTemplateProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.TextBox.ClearButtonTemplate">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.TextBox.CharacterMaskForegroundProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.TextBox.CharacterMaskForeground">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.TextBox.EnterButtonTemplateProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.TextBox.EnterButtonTemplate">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.TextBox.InnerPaddingProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.TextBox.InnerPadding">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.TextBox.IsClearEnabledProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.TextBox.IsClearEnabled">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.TextBox.IsCharacterMaskingEnabledProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.TextBox.IsCharacterMaskingEnabled">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.TextBox.PlaceholderProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.TextBox.Placeholder">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.TextBox.PlaceholderStyleProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.TextBox.PlaceholderStyle">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.TextBox.ScrollViewerTemplateProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.TextBox.ScrollViewerTemplate">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.TextBox.SelectAllOnFocusProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.TextBox.SelectAllOnFocus">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.TextBox.SelectAllOnTripleClickProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.TextBox.SelectAllOnTripleClick">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.TextBox.ShowEnterButtonProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.TextBox.ShowEnterButton">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.TextBox.ShowToggleButtonProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.TextBox.ShowToggleButton">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.TextBox.ToggleButtonTemplateProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.TextBox.ToggleButtonTemplate">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.TextBox.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.TextBox.ClearCommand">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.TextBox.EnterCommand">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.TextBox.OnGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Imagin.Common.TextBox.OnKeyDown(System.Windows.Input.KeyEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Imagin.Common.TextBox.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Imagin.Common.TextBox.OnPreviewMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Imagin.Common.TextBox.OnEntered(System.String)">
            <summary>
            
            </summary>
            <param name="Text"></param>
        </member>
        <member name="M:Imagin.Common.TextBox.OnPreviewMouseLeftButtonDownHandled(System.Windows.Input.MouseButtonEventArgs,System.Type[])">
            <summary>
            
            </summary>
            <param name="e"></param>
            <param name="HandledTypes"></param>
            <returns></returns>
            <remarks>
            Normally, focus is obtained when left mouse button is pressed.
            When clicking buttons that might be contained in the template,
            focus is obtained first, thus, requiring a second click in 
            order to actually click the button. To prevent this, we must
            detect whether or not the intention is to click a button or 
            focus. Therefore, if the element clicked IS a button, handle 
            the focus; otherwise, focus!
            </remarks>
        </member>
        <member name="M:Imagin.Common.TextBox.OnTripleClick(System.Windows.RoutedEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:Imagin.Common.UriBox">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.UriBox.KindProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.UriBox.Kind">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.UriBox.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.UriBox.GetValue(System.String)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.UriBox.ToString(System.Uri)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.VersionBox">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.VersionBox.DelimiterProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.VersionBox.Delimiter">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.VersionBox.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.VersionBox.GetValue(System.String)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.VersionBox.ToString(System.Version)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.ThicknessBox">
            <summary>
            
            </summary>
            <summary>
            ThicknessBox
            </summary>
        </member>
        <member name="F:Imagin.Common.ThicknessBox.FieldSpacingProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.ThicknessBox.FieldSpacing">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.ThicknessBox.MaximumProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.ThicknessBox.Maximum">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.ThicknessBox.MinimumProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.ThicknessBox.Minimum">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.ThicknessBox.ThicknessProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.ThicknessBox.Thickness">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.ThicknessBox.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.ThicknessBox.OnThicknessPartChanged(System.Object,System.Windows.Controls.TextChangedEventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Imagin.Common.ThicknessBox.OnThicknessChanged(System.Windows.Thickness)">
            <summary>
            
            </summary>
            <param name="Value"></param>
        </member>
        <member name="M:Imagin.Common.ThicknessBox.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Imagin.Common.ToggleSwitch">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.ToggleSwitch.CornerRadiusProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.ToggleSwitch.CornerRadius">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.ToggleSwitch.ThumbStyleProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.ToggleSwitch.ThumbStyle">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.ToggleSwitch.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="T:Imagin.Common.ITokenizer">
            <summary>
            Specifies an object capable of tokenizing a <see cref="T:System.String"/>.
            </summary>
        </member>
        <member name="P:Imagin.Common.ITokenizer.Source">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.ITokenizer.Tokenize(System.String,System.Char)">
            <summary>
            
            </summary>
            <param name="TokenString"></param>
            <param name="Delimiter"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.ITokenizer.ParseToken(System.String)">
            <summary>
            Gets a token if the given <see cref="T:System.String"/> can be parsed.
            </summary>
            <param name="Text"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.ITokenizer.ToString(System.Object)">
            <summary>
            
            </summary>
            <param name="Token"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.ITokenizer`1">
            <summary>
            
            </summary>
            <typeparam name="TToken"></typeparam>
        </member>
        <member name="P:Imagin.Common.ITokenizer`1.Source">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.ITokenizer`1.Tokenize(System.String,System.Char)">
            <summary>
            
            </summary>
            <param name="TokenString"></param>
            <param name="Delimiter"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.ITokenizer`1.ParseToken(System.String)">
            <summary>
            Gets a token if the given <see cref="T:System.String"/> can be parsed.
            </summary>
            <param name="Text"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.ITokenizer`1.ToString(`0)">
            <summary>
            
            </summary>
            <param name="Token"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.StringTokenizer">
            <summary>
            Tokenizes a <see cref="T:System.String"/> into multiple <see cref="T:System.String"/>s.
            </summary>
        </member>
        <member name="M:Imagin.Common.StringTokenizer.Tokenize(System.String,System.Char)">
            <summary>
            
            </summary>
            <param name="TokenString"></param>
            <param name="Delimiter"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.StringTokenizer.ParseToken(System.String)">
            <summary>
            Gets a token if the given <see cref="T:System.String"/> can be parsed.
            </summary>
            <param name="Text"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.StringTokenizer.ToString(System.String)">
            <summary>
            
            </summary>
            <param name="Token"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.StringTokenizer.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="T:Imagin.Common.TokenButton">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.TokenButton.#ctor(System.Object)">
            <summary>
            
            </summary>
            <param name="content"></param>
        </member>
        <member name="M:Imagin.Common.TokenButton.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="T:Imagin.Common.Tokenizer`1">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Tokenizer`1.Source">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Tokenizer`1.Tokenize(System.String,System.Char)">
            <summary>
            
            </summary>
            <param name="TokenString"></param>
            <param name="Delimiter"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Tokenizer`1.ParseToken(System.String)">
            <summary>
            Gets a token if the given <see cref="T:System.String"/> can be parsed.
            </summary>
            <param name="Text"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Tokenizer`1.ToString(`0)">
            <summary>
            
            </summary>
            <param name="Token"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Tokenizer`1.#ctor(System.Object)">
            <summary>
            
            </summary>
            <param name="Source"></param>
        </member>
        <member name="T:Imagin.Common.TokenMouseAction">
            <summary>
            Specifies the action to make when a token is clicked by the mouse.
            </summary>
        </member>
        <member name="F:Imagin.Common.TokenMouseAction.None">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.TokenMouseAction.Edit">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.TokenMouseAction.Remove">
            <summary>
            
            </summary>
        </member>
        <member name="T:Imagin.Common.TokenTriggerKey">
            <summary>
            Specifies a key that is capable of generating a token when pressed.
            </summary>
        </member>
        <member name="F:Imagin.Common.TokenTriggerKey.None">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.TokenTriggerKey.Return">
            <summary>
            Corresponds to <see cref="F:System.Windows.Input.Key.Enter"/>.
            </summary>
        </member>
        <member name="F:Imagin.Common.TokenTriggerKey.Tab">
            <summary>
            Corresponds to <see cref="F:System.Windows.Input.Key.Tab"/>.
            </summary>
        </member>
        <member name="F:Imagin.Common.TokenTriggerKey.All">
            <summary>
            Corresponds to all enumerated keys.
            </summary>
        </member>
        <member name="T:Imagin.Common.TokenView">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.TokenView.CurrentText">
            <summary>
            Gets the current input text.
            </summary>
        </member>
        <member name="F:Imagin.Common.TokenView.TokenDelimiterProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.TokenView.TokenDelimiter">
            <summary>
            The <see cref="T:System.Char"/> used to delimit tokens.
            </summary>
        </member>
        <member name="F:Imagin.Common.TokenView.TokenizerProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.TokenView.Tokenizer">
            <summary>
            The <see cref="T:Imagin.Common.ITokenizer"/> that handles tokenizing.
            </summary>
        </member>
        <member name="F:Imagin.Common.TokenView.TokenTriggersProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.TokenView.TokenTriggers">
            <summary>
            Keys used to generate tokens when pressed.
            </summary>
        </member>
        <member name="F:Imagin.Common.TokenView.TokenMouseDownActionProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.TokenView.TokenMouseDownAction">
            <summary>
            Gets or sets the action to perform when the mouse is down on token.
            </summary>
        </member>
        <member name="F:Imagin.Common.TokenView.TokensProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.TokenView.Tokens">
            <summary>
            Gets a collection of all instances of tokens.
            </summary>
        </member>
        <member name="F:Imagin.Common.TokenView.TokensSourceProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.TokenView.TokensSource">
            <summary>
            Gets or sets a tokenized string.
            </summary>
        </member>
        <member name="F:Imagin.Common.TokenView.TokenStyleProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.TokenView.TokenStyle">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.TokenView.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.TokenView.Enumerate``1(System.Func{``0,System.Boolean})">
            <summary>
            For each token, perform action exposing corresponding <see cref="T:Imagin.Common.TokenButton"/>.
            </summary>
            <typeparam name="TButton"></typeparam>
            <param name="Action"></param>
        </member>
        <member name="M:Imagin.Common.TokenView.Enumerate``2(System.Func{``0,``1,System.Boolean})">
            <summary>
            For each token, perform action exposing corresponding <see cref="T:Imagin.Common.TokenButton"/> and <see cref="T:System.Windows.Documents.Inline"/>.
            </summary>
            <typeparam name="TInline"></typeparam>
            <typeparam name="TButton"></typeparam>
            <param name="Action"></param>
        </member>
        <member name="M:Imagin.Common.TokenView.Enumerate``3(System.Func{``0,``1,``2,System.Boolean})">
            <summary>
            For each token, perform action exposing corresponding <see cref="T:Imagin.Common.TokenButton"/>, <see cref="T:System.Windows.Documents.Inline"/>, and <see cref="T:System.Windows.Documents.Paragraph"/>.
            </summary>
            <typeparam name="TParagraph"></typeparam>
            <typeparam name="TInline"></typeparam>
            <typeparam name="TButton"></typeparam>
            <param name="Action"></param>
        </member>
        <member name="M:Imagin.Common.TokenView.GenerateInline(System.Object)">
            <summary>
            Generates an <see cref="T:System.Windows.Documents.Inline"/> element to host the given token.
            </summary>
            <param name="Token"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.TokenView.GenerateRun(System.Object)">
            <summary>
            Generates a <see cref="T:System.Windows.Documents.Run"/> to host the <see cref="T:System.String"/> representation of the given token.
            </summary>
            <param name="Token"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.TokenView.GetTokensSource">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.TokenView.IntersectTokens">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.TokenView.ReplaceWithToken(System.String,System.Object)">
            <summary>
            Replaces the given input text with the given token.
            </summary>
            <param name="Text"></param>
            <param name="Token"></param>
        </member>
        <member name="M:Imagin.Common.TokenView.OnPreviewKeyDown(System.Windows.Input.KeyEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Imagin.Common.TokenView.OnPreviewMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Imagin.Common.TokenView.OnTextChanged(System.Windows.Controls.TextChangedEventArgs)">
            <summary>
            Occurs when the current text changes.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Imagin.Common.TokenView.EditToken(System.Object)">
            <summary>
            Converts the element that hosts the given token to a <see cref="T:System.Windows.Documents.Run"/>.
            </summary>
            <param name="Token"></param>
        </member>
        <member name="M:Imagin.Common.TokenView.EditToken(Imagin.Common.TokenButton)">
            <summary>
            Converts the given token element to a <see cref="T:System.Windows.Documents.Run"/>.
            </summary>
            <param name="Button"></param>
        </member>
        <member name="M:Imagin.Common.TokenView.RemoveToken(System.Object)">
            <summary>
            Removes the <see cref="T:System.Windows.Documents.Inline"/> that hosts the <see cref="T:Imagin.Common.TokenButton"/> corresponding to the given token.
            </summary>
            <param name="Token"></param>
        </member>
        <member name="M:Imagin.Common.TokenView.RemoveToken(Imagin.Common.TokenButton)">
            <summary>
            Removes the <see cref="T:System.Windows.Documents.Inline"/> that hosts the given <see cref="T:Imagin.Common.TokenButton"/>.
            </summary>
            <param name="Button"></param>
        </member>
        <member name="M:Imagin.Common.TokenView.OnTokenDelimiterChanged(System.Char,System.Char)">
            <summary>
            Occurs when <see cref="P:Imagin.Common.TokenView.TokenDelimiter"/> property changes.
            </summary>
            <param name="OldValue"></param>
            <param name="NewValue"></param>
        </member>
        <member name="M:Imagin.Common.TokenView.OnTokenLoaded(System.Object)">
            <summary>
            Occurs when a token has been loaded (or added both logically and visually).
            </summary>
            <param name="Token"></param>
        </member>
        <member name="M:Imagin.Common.TokenView.OnTokenUnloaded(System.Object)">
            <summary>
            Occurs when a token has been unloaded (or removed both logically and visually).
            </summary>
            <param name="Token"></param>
        </member>
        <member name="M:Imagin.Common.TokenView.OnTokensSourceChanged(System.String)">
            <summary>
            Occurs when <see cref="P:Imagin.Common.TokenView.TokensSource"/> property changes.
            </summary>
        </member>
        <member name="M:Imagin.Common.TokenView.OnTokenStyleChanged(System.Windows.Style,System.Windows.Style)">
            <summary>
            Occurs when <see cref="P:Imagin.Common.TokenView.TokenStyle"/> property changes; if the style is null, the global style for <see cref="T:Imagin.Common.TokenButton"/> (if present) is used instead.
            </summary>
            <param name="OldValue"></param>
            <param name="NewValue"></param>
        </member>
        <member name="M:Imagin.Common.TokenView.OnTokenTriggered">
            <summary>
            Occurs when some event triggers the creation of a token.
            </summary>
        </member>
        <member name="T:Imagin.Common.TreeView">
            <summary>
            An extended version of <see cref="T:Imagin.Common.TreeView"/>.
            </summary>
            <remarks>
            Multi-selection borrowed from https://github.com/cmyksvoll/MultiSelectTreeView.
            </remarks>
        </member>
        <member name="E:Imagin.Common.TreeView.SelectedItemsChanged">
            <summary>
            Occurs when one or more items are selected or unselected.
            </summary>
        </member>
        <member name="F:Imagin.Common.TreeView.CanResizeColumnsProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.TreeView.CanResizeColumns">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.TreeView.ColumnHeaderContextMenuProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.TreeView.ColumnHeaderContextMenu">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.TreeView.ColumnHeaderHeightProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.TreeView.ColumnHeaderHeight">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.TreeView.ColumnHeaderStyleProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.TreeView.ColumnHeaderStyle">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.TreeView.ColumnHeaderStyleSelectorProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.TreeView.ColumnHeaderStyleSelector">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.TreeView.ColumnHeaderTemplateProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.TreeView.ColumnHeaderTemplate">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.TreeView.ColumnHeaderTemplateSelectorProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.TreeView.ColumnHeaderTemplateSelector">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.TreeView.ColumnHeaderStringFormatProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.TreeView.ColumnHeaderStringFormat">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.TreeView.ColumnHeaderVisibilityProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.TreeView.ColumnHeaderVisibility">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.TreeView.ColumnsProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.TreeView.Columns">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.TreeView.SelectedIndexProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.TreeView.SelectedIndex">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.TreeView.SelectedItemsProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.TreeView.SelectedItems">
            <summary>
            Get or set list of selected items.
            </summary>
        </member>
        <member name="F:Imagin.Common.TreeView.SelectedObjectProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.TreeView.SelectedObject">
            <summary>
            Get or set selected object.
            </summary>
        </member>
        <member name="F:Imagin.Common.TreeView.SelectedVisualProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.TreeView.SelectedVisual">
            <summary>
            Get or set visual associated with selected object.
            </summary>
        </member>
        <member name="M:Imagin.Common.TreeView.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.TreeView.OnPreviewMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.TreeView.OnPreviewMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.TreeView.OnSelectedIndexChanged(System.Int32[])">
            <summary>
            
            </summary>
            <param name="Value"></param>
        </member>
        <member name="M:Imagin.Common.TreeView.OnSelectedItemChanged(System.Object,System.Windows.RoutedPropertyChangedEventArgs{System.Object})">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Imagin.Common.TreeView.OnSelectedItemsChanged(System.Object,System.EventArgs)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.TreeView.OnSelectedObjectChanged(System.Object)">
            <summary>
            
            </summary>
            <param name="Value"></param>
        </member>
        <member name="P:Imagin.Common.TreeView.CollapseAllCommand">
            <summary>
            
            </summary>
        </member>
        <member name="T:Imagin.Common.TreeViewSelectionMode">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.TreeViewSelectionMode.Single">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.TreeViewSelectionMode.Multiple">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.TreeViewSelectionMode.Extended">
            <summary>
            
            </summary>
        </member>
        <member name="T:Imagin.Common.TreeViewColumn">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.TreeViewColumn.HeaderProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.TreeViewColumn.Header">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.TreeViewColumn.WidthProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.TreeViewColumn.Width">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.TreeViewColumn.MinWidthProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.TreeViewColumn.MinWidth">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.TreeViewColumn.MaxWidthProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.TreeViewColumn.MaxWidth">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.TreeViewColumn.ContentMarginProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.TreeViewColumn.ContentMargin">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.TreeViewColumn.HorizontalContentAlignmentProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.TreeViewColumn.HorizontalContentAlignment">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.TreeViewColumn.SortDirectionProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.TreeViewColumn.SortDirection">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.TreeViewColumn.VerticalContentAlignmentProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.TreeViewColumn.VerticalContentAlignment">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.TreeViewColumn.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="T:Imagin.Common.TreeViewColumnCollection">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.TreeViewColumnCollection.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="T:Imagin.Common.TreeViewTemplateColumn">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.TreeViewTemplateColumn.TemplateProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.TreeViewTemplateColumn.Template">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.TreeViewTemplateColumn.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="T:Imagin.Common.TreeViewTextColumn">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.TreeViewTextColumn.ConverterProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.TreeViewTextColumn.Converter">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.TreeViewTextColumn.MemberPathProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.TreeViewTextColumn.MemberPath">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.TreeViewTextColumn.TextTrimmingProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.TreeViewTextColumn.TextTrimming">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.TreeViewTextColumn.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="T:Imagin.Common.TreeViewColumnDoubleConverter">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.TreeViewColumnDoubleConverter.Offset">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.TreeViewColumnDoubleConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.TreeViewColumnDoubleConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.TreeViewColumnDoubleConverter.#ctor(System.Double)">
            <summary>
            
            </summary>
            <param name="Offset"></param>
        </member>
        <member name="T:Imagin.Common.TreeViewColumnGridLengthConverter">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.TreeViewColumnGridLengthConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.TreeViewColumnGridLengthConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.TreeViewColumnGridLengthConverter.#ctor(System.Double)">
            <summary>
            
            </summary>
            <param name="Offset"></param>
        </member>
        <member name="T:Imagin.Common.TreeViewColumnHeader">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.TreeViewColumnHeader.ColumnWidthProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.TreeViewColumnHeader.ColumnWidth">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.TreeViewColumnHeader.GripperStyleProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.TreeViewColumnHeader.GripperStyle">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.TreeViewColumnHeader.SortDirectionProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.TreeViewColumnHeader.SortDirection">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.TreeViewColumnHeader.OnClick">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.TreeViewColumnHeader.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="T:Imagin.Common.TreeViewColumnHeadersPresenter">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.TreeViewColumnHeadersPresenter.CanResizeColumnsProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.TreeViewColumnHeadersPresenter.CanResizeColumns">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.TreeViewColumnHeadersPresenter.ColumnsProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.TreeViewColumnHeadersPresenter.Columns">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.TreeViewColumnHeadersPresenter.GetColumnDefinition(System.Windows.Controls.ContentPresenter,System.Int32)">
            <summary>
            
            </summary>
            <param name="Child"></param>
            <param name="Index"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.TreeViewColumnHeadersPresenter.OnColumnsChanged(Imagin.Common.TreeViewColumnCollection)">
            <summary>
            
            </summary>
            <param name="Value"></param>
        </member>
        <member name="M:Imagin.Common.TreeViewColumnHeadersPresenter.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="T:Imagin.Common.TreeViewRowHeader">
            <summary>
            A container used to present a TreeViewItem's header.
            </summary>
            <remarks>
            This is only needed if item is hosted in TreeViewExt
            and, therefore, supports showing multiple columns. If 
            columns should be hidden or otherwise aren't present,
            the item's header is shown by default.
            </remarks>
        </member>
        <member name="F:Imagin.Common.TreeViewRowHeader.ColumnOffsetProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.TreeViewRowHeader.ColumnOffset">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.TreeViewRowHeader.GetColumnContent(Imagin.Common.TreeViewColumn,System.Windows.Controls.TreeViewItem)">
            <summary>
            Get content for specified item based on specified column.
            </summary>
        </member>
        <member name="M:Imagin.Common.TreeViewRowHeader.GetDefaultHeader(System.Windows.Controls.TreeViewItem)">
            <summary>
            If not hosted in TreeViewExt or shouldn't show multiple columns, display default header.
            </summary>
        </member>
        <member name="M:Imagin.Common.TreeViewRowHeader.GetHeader(Imagin.Common.TreeView,System.Windows.Controls.TreeViewItem)">
            <summary>
            Gets header for the specified item; columns are optional.
            </summary>
        </member>
        <member name="M:Imagin.Common.TreeViewRowHeader.OnLoaded(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Hide the item while fetching the header; display item when finished. 
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Imagin.Common.TreeViewRowHeader.GetColumnDefinition(System.Windows.Controls.ContentPresenter,System.Int32)">
            <summary>
            
            </summary>
            <param name="Child"></param>
            <param name="Index"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.TreeViewRowHeader.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="T:Imagin.Common.ByteUpDown">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.ByteUpDown.AbsoluteMaximum">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.ByteUpDown.AbsoluteMinimum">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.ByteUpDown.DefaultIncrement">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.ByteUpDown.DefaultValue">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.ByteUpDown.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.ByteUpDown.GetValue(System.String)">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.ByteUpDown.ToString(System.Byte)">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.ByteUpDown.CanIncrease">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.ByteUpDown.CanDecrease">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.ByteUpDown.OnMaximumCoerced(System.Object)">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.ByteUpDown.OnMinimumCoerced(System.Object)">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.ByteUpDown.OnPreviewTextInput(System.Windows.Input.TextCompositionEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Imagin.Common.ByteUpDown.OnValueCoerced(System.Object)">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.ByteUpDown.Increase">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.ByteUpDown.Decrease">
            <summary>
            
            </summary>
        </member>
        <member name="T:Imagin.Common.DateTimeUpDown">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.DateTimeUpDown.AbsoluteMaximum">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.DateTimeUpDown.AbsoluteMinimum">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.DateTimeUpDown.DefaultValue">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.DateTimeUpDown.Increment">
            <summary>
            The value to increment by (e.g., if <see cref="P:Imagin.Common.DateTimeUpDown.SelectedPart" /> = <see cref="F:Imagin.Common.Continuance.DateTimePart.Month" /> and <see cref="P:Imagin.Common.DateTimeUpDown.Increment" /> = 3, increment by 3 months).
            </summary>
        </member>
        <member name="F:Imagin.Common.DateTimeUpDown.CalendarModeProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.DateTimeUpDown.CalendarMode">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.DateTimeUpDown.KindProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.DateTimeUpDown.Kind">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.DateTimeUpDown.IsDropDownOpenProperty">
            <summary>
            Identifies the <see cref="P:Imagin.Common.DateTimeUpDown.IsDropDownOpen"/> property.
            </summary>
        </member>
        <member name="P:Imagin.Common.DateTimeUpDown.IsDropDownOpen">
            <summary>
            Gets or sets whether or not the drop down is open.
            </summary>
        </member>
        <member name="F:Imagin.Common.DateTimeUpDown.DropDownAnimationProperty">
            <summary>
            Identifies the <see cref="P:Imagin.Common.DateTimeUpDown.DropDownAnimation"/> property.
            </summary>
        </member>
        <member name="P:Imagin.Common.DateTimeUpDown.DropDownAnimation">
            <summary>
            Gets or sets the drop down animation.
            </summary>
        </member>
        <member name="F:Imagin.Common.DateTimeUpDown.DropDownPlacementProperty">
            <summary>
            Identifies the <see cref="P:Imagin.Common.DateTimeUpDown.DropDownPlacement"/> property.
            </summary>
        </member>
        <member name="P:Imagin.Common.DateTimeUpDown.DropDownPlacement">
            <summary>
            Gets or sets the drop down placement.
            </summary>
        </member>
        <member name="F:Imagin.Common.DateTimeUpDown.DropDownStretchProperty">
            <summary>
            Identifies the <see cref="P:Imagin.Common.DateTimeUpDown.DropDownStretch"/> property.
            </summary>
        </member>
        <member name="P:Imagin.Common.DateTimeUpDown.DropDownStretch">
            <summary>
            Gets or sets the drop down stretch. If <see cref="F:System.Windows.Media.Stretch.None"/>, drop down width assumes width of it's content; if anything else, drop down width assumes width of parent, <see cref="T:Imagin.Common.DateTimeUpDown"/>.
            </summary>
        </member>
        <member name="F:Imagin.Common.DateTimeUpDown.DropDownStyleProperty">
            <summary>
            Identifies the <see cref="P:Imagin.Common.DateTimeUpDown.DropDownStyle"/> property.
            </summary>
        </member>
        <member name="P:Imagin.Common.DateTimeUpDown.DropDownStyle">
            <summary>
            Gets or sets style of drop down; style must target <see cref="T:System.Windows.Controls.Border"/> control.
            </summary>
        </member>
        <member name="F:Imagin.Common.DateTimeUpDown.SelectedPartProperty">
            <summary>
            Identifies the <see cref="P:Imagin.Common.DateTimeUpDown.SelectedPart"/> property.
            </summary>
        </member>
        <member name="P:Imagin.Common.DateTimeUpDown.SelectedPart">
            <summary>
            Gets or sets the selected <see cref="T:Imagin.Common.Continuance.DateTimePart"/> of the <see cref="T:System.DateTime"/> value.
            </summary>
        </member>
        <member name="F:Imagin.Common.DateTimeUpDown.StaysOpenProperty">
            <summary>
            Identifies the <see cref="P:Imagin.Common.DateTimeUpDown.StaysOpen"/> property.
            </summary>
        </member>
        <member name="P:Imagin.Common.DateTimeUpDown.StaysOpen">
            <summary>
            Gets or sets whether or not the drop down stays open when clicking neutral area outside of it.
            </summary>
        </member>
        <member name="F:Imagin.Common.DateTimeUpDown.StaysOpenOnSelectionProperty">
            <summary>
            Identifies the <see cref="P:Imagin.Common.DateTimeUpDown.StaysOpenOnSelection"/> property.
            </summary>
        </member>
        <member name="P:Imagin.Common.DateTimeUpDown.StaysOpenOnSelection">
            <summary>
            Gets or sets whether or not the drop down stays open after making a selection.
            </summary>
        </member>
        <member name="F:Imagin.Common.DateTimeUpDown.TimeOfDayProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.DateTimeUpDown.TimeOfDay">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.DateTimeUpDown.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.DateTimeUpDown.Increase(System.Double)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.DateTimeUpDown.CanDecrease">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.DateTimeUpDown.CanIncrease">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.DateTimeUpDown.GetValue(System.String)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.DateTimeUpDown.OnMaximumCoerced(System.Object)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.DateTimeUpDown.OnMinimumCoerced(System.Object)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.DateTimeUpDown.OnTextChanged(System.Windows.Controls.TextChangedEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Imagin.Common.DateTimeUpDown.OnValueChanged(System.DateTime)">
            <summary>
            
            </summary>
            <param name="Value"></param>
        </member>
        <member name="M:Imagin.Common.DateTimeUpDown.OnValueCoerced(System.Object)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.DateTimeUpDown.ToString(System.DateTime)">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.DateTimeUpDown.Decrease">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.DateTimeUpDown.Increase">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.DateTimeUpDown.OnApplyTemplate">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.DateTimeUpDown.OnDropDownClosed(System.Object,System.EventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Imagin.Common.DateTimeUpDown.OnIsDropDownOpenChanged(System.Boolean)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Imagin.Common.DateTimeUpDown.OnKindChanged(System.DateTimeKind)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Imagin.Common.DateTimeUpDown.OnSelectedDatesChanged(System.Object,System.Windows.Controls.SelectionChangedEventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Imagin.Common.DecimalUpDown">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.DecimalUpDown.AbsoluteMaximum">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.DecimalUpDown.AbsoluteMinimum">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.DecimalUpDown.DefaultIncrement">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.DecimalUpDown.DefaultValue">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.DecimalUpDown.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.DecimalUpDown.GetValue(System.String)">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.DecimalUpDown.ToString(System.Decimal)">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.DecimalUpDown.CanIncrease">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.DecimalUpDown.CanDecrease">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.DecimalUpDown.OnMaximumCoerced(System.Object)">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.DecimalUpDown.OnMinimumCoerced(System.Object)">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.DecimalUpDown.OnValueCoerced(System.Object)">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.DecimalUpDown.Increase">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.DecimalUpDown.Decrease">
            <summary>
            
            </summary>
        </member>
        <member name="T:Imagin.Common.DoubleUpDown">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.DoubleUpDown.AbsoluteMaximum">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.DoubleUpDown.AbsoluteMinimum">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.DoubleUpDown.DefaultIncrement">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.DoubleUpDown.DefaultValue">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.DoubleUpDown.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.DoubleUpDown.GetValue(System.String)">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.DoubleUpDown.ToString(System.Double)">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.DoubleUpDown.CanIncrease">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.DoubleUpDown.CanDecrease">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.DoubleUpDown.OnMaximumCoerced(System.Object)">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.DoubleUpDown.OnMinimumCoerced(System.Object)">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.DoubleUpDown.OnValueCoerced(System.Object)">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.DoubleUpDown.Increase">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.DoubleUpDown.Decrease">
            <summary>
            
            </summary>
        </member>
        <member name="T:Imagin.Common.FloatUpDown">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.FloatUpDown.AbsoluteMaximum">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.FloatUpDown.AbsoluteMinimum">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.FloatUpDown.DefaultIncrement">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.FloatUpDown.DefaultValue">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.FloatUpDown.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.FloatUpDown.GetValue(System.String)">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.FloatUpDown.ToString(System.Single)">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.FloatUpDown.CanIncrease">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.FloatUpDown.CanDecrease">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.FloatUpDown.OnMaximumCoerced(System.Object)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.FloatUpDown.OnMinimumCoerced(System.Object)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.FloatUpDown.OnValueCoerced(System.Object)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.FloatUpDown.Increase">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.FloatUpDown.Decrease">
            <summary>
            
            </summary>
        </member>
        <member name="T:Imagin.Common.Int16UpDown">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Int16UpDown.AbsoluteMaximum">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Int16UpDown.AbsoluteMinimum">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Int16UpDown.DefaultIncrement">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Int16UpDown.DefaultValue">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Int16UpDown.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Int16UpDown.GetValue(System.String)">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Int16UpDown.ToString(System.Int16)">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Int16UpDown.CanIncrease">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Int16UpDown.CanDecrease">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Int16UpDown.OnMaximumCoerced(System.Object)">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Int16UpDown.OnMinimumCoerced(System.Object)">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Int16UpDown.OnValueCoerced(System.Object)">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Int16UpDown.Increase">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Int16UpDown.Decrease">
            <summary>
            
            </summary>
        </member>
        <member name="T:Imagin.Common.Int32UpDown">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Int32UpDown.AbsoluteMaximum">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Int32UpDown.AbsoluteMinimum">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Int32UpDown.DefaultIncrement">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Int32UpDown.DefaultValue">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Int32UpDown.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Int32UpDown.GetValue(System.String)">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Int32UpDown.ToString(System.Int32)">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Int32UpDown.CanIncrease">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Int32UpDown.CanDecrease">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Int32UpDown.OnMaximumCoerced(System.Object)">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Int32UpDown.OnMinimumCoerced(System.Object)">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Int32UpDown.OnValueCoerced(System.Object)">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Int32UpDown.Increase">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Int32UpDown.Decrease">
            <summary>
            
            </summary>
        </member>
        <member name="T:Imagin.Common.Int64UpDown">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Int64UpDown.AbsoluteMaximum">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Int64UpDown.AbsoluteMinimum">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Int64UpDown.DefaultIncrement">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Int64UpDown.DefaultValue">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Int64UpDown.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Int64UpDown.GetValue(System.String)">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Int64UpDown.ToString(System.Int64)">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Int64UpDown.CanIncrease">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Int64UpDown.CanDecrease">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Int64UpDown.OnMaximumCoerced(System.Object)">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Int64UpDown.OnMinimumCoerced(System.Object)">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Int64UpDown.OnValueCoerced(System.Object)">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Int64UpDown.Increase">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Int64UpDown.Decrease">
            <summary>
            
            </summary>
        </member>
        <member name="T:Imagin.Common.IrrationalUpDown`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Imagin.Common.IrrationalUpDown`1.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.IrrationalUpDown`1.OnPreviewTextInput(System.Windows.Input.TextCompositionEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:Imagin.Common.IUpDown`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Imagin.Common.IUpDown`1.Maximum">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.IUpDown`1.Minimum">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.IUpDown`1.Value">
            <summary>
            
            </summary>
        </member>
        <member name="T:Imagin.Common.MultiUpDown`2">
            <summary>
            An <see cref="T:Imagin.Common.UpDown"/> with multiple parts.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TPart"></typeparam>
        </member>
        <member name="M:Imagin.Common.MultiUpDown`2.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="T:Imagin.Common.NumericUpDown`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Imagin.Common.NumericUpDown`1.DefaultIncrement">
            <summary>
            The default value to increment by.
            </summary>
        </member>
        <member name="P:Imagin.Common.NumericUpDown`1.Expression">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.NumericUpDown`1.IncrementProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.NumericUpDown`1.Increment">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.NumericUpDown`1.StringFormatProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.NumericUpDown`1.StringFormat">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.NumericUpDown`1.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.NumericUpDown`1.OnIncrementChanged(`0)">
            <summary>
            Occurs when the increment value changes.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Imagin.Common.NumericUpDown`1.OnStringFormatChanged(System.String)">
            <summary>
            Occurs when <see cref="P:Imagin.Common.NumericUpDown`1.StringFormat"/> changes.
            </summary>
        </member>
        <member name="T:Imagin.Common.RationalUpDown`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Imagin.Common.RationalUpDown`1.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="T:Imagin.Common.SignedRationalUpDown`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Imagin.Common.SignedRationalUpDown`1.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.SignedRationalUpDown`1.OnPreviewTextInput(System.Windows.Input.TextCompositionEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:Imagin.Common.TimeSpanUpDown">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.TimeSpanUpDown.AbsoluteMaximum">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.TimeSpanUpDown.AbsoluteMinimum">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.TimeSpanUpDown.DefaultValue">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.TimeSpanUpDown.IncrementProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.TimeSpanUpDown.Increment">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.TimeSpanUpDown.SelectedPartProperty">
            <summary>
            Identifies the <see cref="P:Imagin.Common.TimeSpanUpDown.SelectedPart"/> property.
            </summary>
        </member>
        <member name="P:Imagin.Common.TimeSpanUpDown.SelectedPart">
            <summary>
            Gets or sets the selected <see cref="T:Imagin.Common.Continuance.TimePart"/> of the <see cref="T:System.TimeSpan"/> value.
            </summary>
        </member>
        <member name="M:Imagin.Common.TimeSpanUpDown.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.TimeSpanUpDown.CanDecrease">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.TimeSpanUpDown.CanIncrease">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.TimeSpanUpDown.GetValue(System.String)">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.TimeSpanUpDown.OnSelectionChanged(System.Windows.RoutedEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Imagin.Common.TimeSpanUpDown.OnMaximumCoerced(System.Object)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.TimeSpanUpDown.OnMinimumCoerced(System.Object)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.TimeSpanUpDown.OnValueCoerced(System.Object)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.TimeSpanUpDown.ToString(System.TimeSpan)">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.TimeSpanUpDown.Decrease">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.TimeSpanUpDown.Increase">
            <summary>
            
            </summary>
        </member>
        <member name="T:Imagin.Common.TimeUpDown">
            <summary>
            
            </summary>
        </member>
        <member name="E:Imagin.Common.TimeUpDown.OptionSelected">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.TimeUpDown.DropDownStyleProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.TimeUpDown.DropDownStyle">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.TimeUpDown.IsDropDownOpenProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.TimeUpDown.IsDropDownOpen">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.TimeUpDown.MaxDropDownHeightProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.TimeUpDown.MaxDropDownHeight">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.TimeUpDown.StaysOpenProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.TimeUpDown.StaysOpen">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.TimeUpDown.StaysOpenOnSelectionProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.TimeUpDown.StaysOpenOnSelection">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.TimeUpDown.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.TimeUpDown.OnApplyTemplate">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.TimeUpDown.OnDropDownClosed(System.Object,System.EventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Imagin.Common.TimeUpDown.OnIsDropDownOpenChanged(System.Boolean)">
            <summary>
            
            </summary>
            <param name="Value"></param>
        </member>
        <member name="T:Imagin.Common.UDoubleUpDown">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.UDoubleUpDown.AbsoluteMaximum">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.UDoubleUpDown.AbsoluteMinimum">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.UDoubleUpDown.DefaultIncrement">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.UDoubleUpDown.DefaultValue">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.UDoubleUpDown.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.UDoubleUpDown.GetValue(System.String)">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.UDoubleUpDown.ToString(Imagin.Common.UDouble)">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.UDoubleUpDown.CanIncrease">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.UDoubleUpDown.CanDecrease">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.UDoubleUpDown.OnMaximumCoerced(System.Object)">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.UDoubleUpDown.OnMinimumCoerced(System.Object)">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.UDoubleUpDown.OnValueCoerced(System.Object)">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.UDoubleUpDown.Increase">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.UDoubleUpDown.Decrease">
            <summary>
            
            </summary>
        </member>
        <member name="T:Imagin.Common.UInt16UpDown">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.UInt16UpDown.AbsoluteMaximum">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.UInt16UpDown.AbsoluteMinimum">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.UInt16UpDown.DefaultIncrement">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.UInt16UpDown.DefaultValue">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.UInt16UpDown.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.UInt16UpDown.GetValue(System.String)">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.UInt16UpDown.ToString(System.UInt16)">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.UInt16UpDown.CanIncrease">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.UInt16UpDown.CanDecrease">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.UInt16UpDown.OnMaximumCoerced(System.Object)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.UInt16UpDown.OnMinimumCoerced(System.Object)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.UInt16UpDown.OnValueCoerced(System.Object)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.UInt16UpDown.Increase">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.UInt16UpDown.Decrease">
            <summary>
            
            </summary>
        </member>
        <member name="T:Imagin.Common.UInt32UpDown">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.UInt32UpDown.AbsoluteMaximum">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.UInt32UpDown.AbsoluteMinimum">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.UInt32UpDown.DefaultIncrement">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.UInt32UpDown.DefaultValue">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.UInt32UpDown.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.UInt32UpDown.GetValue(System.String)">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.UInt32UpDown.ToString(System.UInt32)">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.UInt32UpDown.CanIncrease">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.UInt32UpDown.CanDecrease">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.UInt32UpDown.OnMaximumCoerced(System.Object)">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.UInt32UpDown.OnMinimumCoerced(System.Object)">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.UInt32UpDown.OnValueCoerced(System.Object)">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.UInt32UpDown.Increase">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.UInt32UpDown.Decrease">
            <summary>
            
            </summary>
        </member>
        <member name="T:Imagin.Common.UInt64UpDown">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.UInt64UpDown.AbsoluteMaximum">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.UInt64UpDown.AbsoluteMinimum">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.UInt64UpDown.DefaultIncrement">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.UInt64UpDown.DefaultValue">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.UInt64UpDown.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.UInt64UpDown.GetValue(System.String)">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.UInt64UpDown.ToString(System.UInt64)">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.UInt64UpDown.CanIncrease">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.UInt64UpDown.CanDecrease">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.UInt64UpDown.OnMaximumCoerced(System.Object)">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.UInt64UpDown.OnMinimumCoerced(System.Object)">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.UInt64UpDown.OnValueCoerced(System.Object)">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.UInt64UpDown.Increase">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.UInt64UpDown.Decrease">
            <summary>
            
            </summary>
        </member>
        <member name="T:Imagin.Common.UnsignedRationalUpDown`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Imagin.Common.UnsignedRationalUpDown`1.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.UnsignedRationalUpDown`1.OnPreviewTextInput(System.Windows.Input.TextCompositionEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:Imagin.Common.UpDown">
            <summary>
            
            </summary>
        </member>
        <member name="T:Imagin.Common.UpDown.UpDownTimer">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.UpDown.UpDownTimer.Milliseconds">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.UpDown.UpDownTimer.Direction">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.UpDown.UpDownTimer.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="T:Imagin.Common.UpDown.UpDownDirection">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.UpDown.UpDownDirection.None">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.UpDown.UpDownDirection.Up">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.UpDown.UpDownDirection.Down">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.UpDown.PART_Down">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.UpDown.PART_Up">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.UpDown.Timer">
            <summary>
            
            </summary>
        </member>
        <member name="E:Imagin.Common.UpDown.PropertyChanged">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.UpDown.CanUpDownProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.UpDown.CanUpDown">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.UpDown.DirectionalChangeProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.UpDown.DirectionalChange">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.UpDown.DownButtonTemplateProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.UpDown.DownButtonTemplate">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.UpDown.MajorChangeProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.UpDown.MajorChange">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.UpDown.MajorChangeDelayProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.UpDown.MajorChangeDelay">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.UpDown.UpButtonTemplateProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.UpDown.UpButtonTemplate">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.UpDown.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Imagin.Common.UpDown"/> class.
            </summary>
        </member>
        <member name="M:Imagin.Common.UpDown.CanDecrease">
            <summary>
            Gets whether or not decreasing is enabled.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.UpDown.CanIncrease">
            <summary>
            Gets whether or not increasing is enabled.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.UpDown.Decrease">
            <summary>
            Decreases value by some value.
            </summary>
        </member>
        <member name="M:Imagin.Common.UpDown.RiseValue">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.UpDown.SinkValue">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.UpDown.Increase">
            <summary>
            Increases value by some value.
            </summary>
        </member>
        <member name="P:Imagin.Common.UpDown.DownCommand">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.UpDown.UpCommand">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.UpDown.Change(Imagin.Common.UpDown.UpDownDirection)">
            <summary>
            Increase or decrease based on given direction.
            </summary>
            <param name="Direction"></param>
        </member>
        <member name="M:Imagin.Common.UpDown.ResetTimer">
            <summary>
            Reset the timer used for making major changes.
            </summary>
        </member>
        <member name="M:Imagin.Common.UpDown.SetText(System.String)">
            <summary>
            Set text; string format should be applied prior to calling.
            </summary>
        </member>
        <member name="M:Imagin.Common.UpDown.OnPreviewMouseWheel(System.Windows.Input.MouseWheelEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Imagin.Common.UpDown.OnApplyTemplate">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.UpDown.OnButtonMouseDown(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Occurs when the mouse presses the increase or decrease button.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Imagin.Common.UpDown.OnButtonMouseUp(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Occurs when the mouse releases the increase or decrease button.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Imagin.Common.UpDown.OnMajorChange(System.Object,System.EventArgs)">
            <summary>
            Occurs during a major change.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Imagin.Common.UpDown.OnMajorChangeChanged(System.Double)">
            <summary>
            Occurs when <see cref="P:Imagin.Common.UpDown.MajorChange"/> changes.
            </summary>
            <param name="Value"></param>
        </member>
        <member name="M:Imagin.Common.UpDown.OnPropertyChanged(System.String)">
            <summary>
            Occurs when a property changes.
            </summary>
            <param name="Name"></param>
        </member>
        <member name="T:Imagin.Common.UpDown`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Imagin.Common.UpDown`1.TextChangeHandled">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.UpDown`1.ValueChangeHandled">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.UpDown`1.AbsoluteMaximum">
            <summary>
            The absolute maximum value possible.
            </summary>
        </member>
        <member name="P:Imagin.Common.UpDown`1.AbsoluteMinimum">
            <summary>
            The absolute minimum value possible.
            </summary>
        </member>
        <member name="P:Imagin.Common.UpDown`1.DefaultValue">
            <summary>
            The default value.
            </summary>
        </member>
        <member name="F:Imagin.Common.UpDown`1.MaximumProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.UpDown`1.Maximum">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.UpDown`1.MinimumProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.UpDown`1.Minimum">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.UpDown`1.ValueProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.UpDown`1.Value">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.UpDown`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Imagin.Common.UpDown"/> class.
            </summary>
        </member>
        <member name="M:Imagin.Common.UpDown`1.GetValue(System.String)">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.UpDown`1.OnMaximumCoerced(System.Object)">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.UpDown`1.OnMinimumCoerced(System.Object)">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.UpDown`1.OnValueCoerced(System.Object)">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.UpDown`1.ToString(`0)">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.UpDown`1.OnTextChanged(System.Windows.Controls.TextChangedEventArgs)">
            <summary>
            Occurs when the text changes.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Imagin.Common.UpDown`1.RiseValue">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.UpDown`1.SinkValue">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.UpDown`1.OnMaximumChanged(`0)">
            <summary>
            Occurs when the maximum value changes.
            </summary>
            <param name="Value"></param>
        </member>
        <member name="M:Imagin.Common.UpDown`1.OnMinimumChanged(`0)">
            <summary>
            Occurs when the minimum value changes.
            </summary>
            <param name="Value"></param>
        </member>
        <member name="M:Imagin.Common.UpDown`1.OnValueChanged(`0)">
            <summary>
            Occurs when the value changes.
            </summary>
        </member>
        <member name="T:Imagin.Common.UserControl">
            <summary>
            
            </summary>
        </member>
        <member name="E:Imagin.Common.UserControl.PropertyChanged">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.UserControl.CornerRadiusProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.UserControl.CornerRadius">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.UserControl.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.UserControl.SetValue``1(``0@,``0,System.String)">
            <summary>
            
            </summary>
            <typeparam name="TValue"></typeparam>
            <param name="field"></param>
            <param name="value"></param>
            <param name="propertyName"></param>
        </member>
        <member name="M:Imagin.Common.UserControl.OnPropertyChanged(System.String)">
            <summary>
            
            </summary>
            <param name="propertyName"></param>
        </member>
        <member name="T:Imagin.Common.BasicWindow">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.BasicWindow.ButtonsProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.BasicWindow.Buttons">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.BasicWindow.ButtonsPanelProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.BasicWindow.ButtonsPanel">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.BasicWindow.ButtonStyleProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.BasicWindow.ButtonStyle">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.BasicWindow.ContentBackgroundProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.BasicWindow.ContentBackground">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.BasicWindow.ContentBorderBrushProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.BasicWindow.ContentBorderBrush">
            <summary>
            Gets or sets the border brush of the content.
            </summary>
        </member>
        <member name="F:Imagin.Common.BasicWindow.ContentBorderThicknessProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.BasicWindow.ContentBorderThickness">
            <summary>
            Gets or sets the border thickness of the content.
            </summary>
        </member>
        <member name="F:Imagin.Common.BasicWindow.ContentMarginProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.BasicWindow.ContentMargin">
            <summary>
            Gets or sets the outer margin of the content.
            </summary>
        </member>
        <member name="F:Imagin.Common.BasicWindow.FooterProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.BasicWindow.Footer">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.BasicWindow.FooterTemplateProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.BasicWindow.FooterTemplate">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.BasicWindow.HeaderBackgroundProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.BasicWindow.HeaderBackground">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.BasicWindow.HeaderBorderBrushProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.BasicWindow.HeaderBorderBrush">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.BasicWindow.HeaderBorderThicknessProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.BasicWindow.HeaderBorderThickness">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.BasicWindow.HeaderVisibilityProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.BasicWindow.HeaderVisibility">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.BasicWindow.IconTemplateProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.BasicWindow.IconTemplate">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.BasicWindow.Overlay">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.BasicWindow.OverlayTemplateProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.BasicWindow.OverlayTemplate">
            <summary>
            Element to place on top of everything else; element covers entire window.
            </summary>
        </member>
        <member name="F:Imagin.Common.BasicWindow.OverlayVisibilityProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.BasicWindow.OverlayVisibility">
            <summary>
            The visibility of the overlay element.
            </summary>
        </member>
        <member name="F:Imagin.Common.BasicWindow.ResizeGripTemplateProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.BasicWindow.ResizeGripTemplate">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.BasicWindow.TitleTemplateProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.BasicWindow.TitleTemplate">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.BasicWindow.TypeProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.BasicWindow.Type">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.BasicWindow.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.BasicWindow.#ctor(System.Action)">
            <summary>
            
            </summary>
            <param name="OnClosed"></param>
        </member>
        <member name="M:Imagin.Common.BasicWindow.OnApplyTemplate">
            <summary>
            
            </summary>
        </member>
        <member name="T:Imagin.Common.WindowBase">
            <summary>
            
            </summary>
        </member>
        <member name="E:Imagin.Common.WindowBase.Closed">
            <summary>
            Occurs when the window is about to close.
            </summary>
        </member>
        <member name="E:Imagin.Common.WindowBase.Closing">
            <summary>
            Occurs directly after <see cref="M:System.Windows.Window.Close"/> is called, and can be handled to cancel window closure.
            </summary>
        </member>
        <member name="E:Imagin.Common.WindowBase.Hidden">
            <summary>
            Occurs when the window is hidden.
            </summary>
        </member>
        <member name="E:Imagin.Common.WindowBase.Presented">
            <summary>
            Occurs when the window is loaded for the first time.
            </summary>
        </member>
        <member name="E:Imagin.Common.WindowBase.PropertyChanged">
            <summary>
            Occurs when a property changes.
            </summary>
        </member>
        <member name="E:Imagin.Common.WindowBase.Shown">
            <summary>
            Occurs when a window is shown.
            </summary>
        </member>
        <member name="P:Imagin.Common.WindowBase.Result">
            <summary>
            The result of the window subsequent to closing.
            </summary>
        </member>
        <member name="F:Imagin.Common.WindowBase.CornerRadiusProperty">
            <summary>
            Identifies the <see cref="P:Imagin.Common.WindowBase.CornerRadius"/> dependency property.
            </summary>
        </member>
        <member name="P:Imagin.Common.WindowBase.CornerRadius">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.WindowBase.IsHiddenProperty">
            <summary>
            Identifies the <see cref="P:Imagin.Common.WindowBase.IsHidden"/> dependency property.
            </summary>
        </member>
        <member name="P:Imagin.Common.WindowBase.IsHidden">
            <summary>
            Whether or not the window is currently hidden.
            </summary>
        </member>
        <member name="M:Imagin.Common.WindowBase.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.WindowBase.BeginCloseCommand">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.WindowBase.CloseCommand">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.WindowBase.HideCommand">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.WindowBase.MaximizeCommand">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.WindowBase.MinimizeCommand">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.WindowBase.RestoreCommand">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.WindowBase.ShowCommand">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.WindowBase.BeginClose(System.Boolean)">
            <summary>
            
            </summary>
            <param name="SupportsCancellation"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.WindowBase.Close">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.WindowBase.Close(System.Boolean)">
            <summary>
            Manually closes a window.
            </summary>
            <param name="SupportsCancellation">Whether or not cancellation is supported.</param>
        </member>
        <member name="M:Imagin.Common.WindowBase.Hide">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.WindowBase.OnPropertyChanged(System.String)">
            <summary>
            
            </summary>
            <param name="propertyName"></param>
        </member>
        <member name="M:Imagin.Common.WindowBase.Show">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.WindowBase.ShowDialog">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.WindowBase.OnBeginClosed(System.Int32)">
            <summary>
            Occurs when the window is about to close (async).
            </summary>
        </member>
        <member name="M:Imagin.Common.WindowBase.OnBeginClosing(System.ComponentModel.CancelEventArgs)">
            <summary>
            Occurs directly after <see cref="M:System.Windows.Window.Close"/> is called, and can be handled to cancel window closure (async).
            </summary>
        </member>
        <member name="M:Imagin.Common.WindowBase.OnClosed(System.EventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Imagin.Common.WindowBase.OnClosed(System.Int32)">
            <summary>
            Occurs when the window is about to close.
            </summary>
        </member>
        <member name="M:Imagin.Common.WindowBase.OnClosing(System.ComponentModel.CancelEventArgs)">
            <summary>
            Occurs directly after <see cref="M:System.Windows.Window.Close"/> is called, and can be handled to cancel window closure.
            </summary>
        </member>
        <member name="M:Imagin.Common.WindowBase.OnPresented">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.WindowBase.OnHidden">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.WindowBase.OnLoaded(System.Windows.RoutedEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Imagin.Common.WindowBase.OnShown">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.WindowBase.OnUnloaded(System.Windows.RoutedEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:Imagin.Common.WindowFooter">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.WindowFooter.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="T:Imagin.Common.WindowLocation">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.WindowLocation.CenterOwner">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.WindowLocation.CenterScreen">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.WindowLocation.Manual">
            <summary>
            
            </summary>
        </member>
        <member name="T:Imagin.Common.WindowSinker">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.WindowSinker.#ctor(System.Windows.Window)">
            <summary>
            
            </summary>
            <param name="Window"></param>
        </member>
        <member name="M:Imagin.Common.WindowSinker.Sink">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.WindowSinker.Unsink">
            <summary>
            
            </summary>
        </member>
        <member name="T:Imagin.Common.WindowType">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.WindowType.Window">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.WindowType.Tool">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.WindowType.Blank">
            <summary>
            
            </summary>
        </member>
        <member name="T:Imagin.Common.Converters.AbbreviationAttributeConverter">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Converters.AbbreviationAttributeConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Converters.AbbreviationAttributeConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Converters.ArrayToStringConverter">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Converters.ArrayToStringConverter.GetSeparator(System.Object)">
            <summary>
            
            </summary>
            <param name="Parameter"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Converters.ArrayToStringConverter.ToString(System.Object,System.Object)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="parameter"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Converters.ArrayToStringConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Converters.ArrayToStringConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Converters.Int32ArrayToStringConverter">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Converters.Int32ArrayToStringConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Converters.BooleanToVisibilityConverter">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Converters.BooleanToVisibilityConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Converters.BooleanToVisibilityConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Converters.BooleanToYesNoConverter">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Converters.BooleanToYesNoConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Converters.BooleanToYesNoConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Converters.BrushToColorConverter">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Converters.BrushToColorConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Converters.BrushToColorConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Converters.ByteToDoubleConverter">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Converters.ByteToDoubleConverter.Convert(System.Object)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Converters.ByteToDoubleConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Converters.ByteToDoubleConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Converters.CenterToolTipConverter">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Converters.CenterToolTipConverter.Convert(System.Object[],System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="values"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Converters.CenterToolTipConverter.ConvertBack(System.Object,System.Type[],System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetTypes"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Converters.CharacterToStringConverter">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Converters.CharacterToStringConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Converters.CharacterToStringConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Converters.ColorToHexConverter">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Converters.ColorToHexConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Converters.ColorToHexConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Converters.ColorToOpacityConverter">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Converters.ColorToOpacityConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Converters.ColorToOpacityConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Converters.ColorToSolidColorBrushConverter">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Converters.ColorToSolidColorBrushConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Converters.ColorToSolidColorBrushConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Converters.Converter`2">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Converters.Converter`2.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Converters.Converter`2.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Converters.Converter`2.New(System.Func{`0,`1},System.Func{`1,`0})">
            <summary>
            
            </summary>
            <param name="to"></param>
            <param name="back"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Converters.DateTimeIsTodayConverter">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Converters.DateTimeIsTodayConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Converters.DateTimeIsTodayConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Converters.DateTimeStringFormatConverter">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Converters.DateTimeStringFormatConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Converters.DateTimeStringFormatConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Converters.DateTimeToDayConverter">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Converters.DateTimeToDayConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Converters.DateTimeToDayConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Converters.DescriptionAttributeConverter">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Converters.DescriptionAttributeConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Converters.DescriptionAttributeConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Converters.DisplayNameAttributeConverter">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Converters.DisplayNameAttributeConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="Value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Converters.DisplayNameAttributeConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Converters.EnumFlagsToVisibilityConverter">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Converters.EnumFlagsToVisibilityConverter.Convert(System.Object[],System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="values"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Converters.EnumFlagsToVisibilityConverter.ConvertBack(System.Object,System.Type[],System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetTypes"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Converters.EnumHasFlagConverter">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Converters.EnumHasFlagConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Converters.EnumHasFlagConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Converters.EnumToCamelCaseConverter">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Converters.EnumToCamelCaseConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Converters.EnumToCamelCaseConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Converters.FileExtensionConverter">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Converters.FileExtensionConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Converters.FileExtensionConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Converters.FileNameConverter">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Converters.FileNameConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Converters.FileNameConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Converters.FileSizeConverter">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Converters.FileSizeConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Converters.FileSizeConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Converters.FileSizeMultiValueConverter">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Converters.FileSizeMultiValueConverter.Convert(System.Object[],System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="values"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Converters.FileSizeMultiValueConverter.ConvertBack(System.Object,System.Type[],System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetTypes"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Converters.FileSpeedConverter">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Converters.FileSpeedConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Converters.FileSpeedConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Converters.FirstLetterConverter">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Converters.FirstLetterConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Converters.FirstLetterConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Converters.GraphicalUnitConverter">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Converters.GraphicalUnitConverter.Convert(System.Object[],System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="values"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Converters.GraphicalUnitConverter.ConvertBack(System.Object,System.Type[],System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetTypes"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Converters.IntToBooleanConverter">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Converters.IntToBooleanConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Converters.IntToBooleanConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Converters.IntToMonthConverter">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Converters.IntToMonthConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Converters.IntToMonthConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Converters.InverseBooleanConverter">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Converters.InverseBooleanConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Converters.InverseBooleanConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Converters.InverseThicknessConverter">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Converters.InverseThicknessConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Converters.InverseThicknessConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Converters.LocalizationConverter">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Converters.LocalizationConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Converters.LocalizationConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Converters.LocalizationMultiValueConverter">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Converters.LocalizationMultiValueConverter.Convert(System.Object[],System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="values"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Converters.LocalizationMultiValueConverter.ConvertBack(System.Object,System.Type[],System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetTypes"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Converters.LowerCaseConverter">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Converters.LowerCaseConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Converters.LowerCaseConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Converters.MathMultiValueConverter">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Converters.MathMultiValueConverter.Convert(System.Object[],System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="values"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Converters.MathMultiValueConverter.ConvertBack(System.Object,System.Type[],System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetTypes"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Converters.NullConverter">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Converters.NullConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Converters.NullConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <remarks>
            According to https://msdn.microsoft.com/en-us/library/system.windows.data.ivalueconverter.convertback(v=vs.110).aspx#Anchor_1,
            
            If you do not support a conversion back, 
            you should return Binding.DoNothing or
            DependencyProperty.UnsetValue.
            </remarks>
        </member>
        <member name="T:Imagin.Common.Converters.NullToBooleanConverter">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Converters.NullToBooleanConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Converters.NullToBooleanConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Converters.NullToVisibilityConverter">
            <summary>
            
            </summary>
        </member>
        <member name="T:Imagin.Common.Converters.NullToVisibilityConverter.Parameter">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Converters.NullToVisibilityConverter.Parameter.Normal">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Converters.NullToVisibilityConverter.Parameter.Inverted">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Converters.NullToVisibilityConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Converters.NullToVisibilityConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Converters.ObjectIsConverter">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Converters.ObjectIsConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Converters.ObjectIsConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Converters.ObjectToTypeConverter">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Converters.ObjectToTypeConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Converters.ObjectToTypeConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Converters.OrientationInverseConverter">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Converters.OrientationInverseConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Converters.OrientationInverseConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Converters.OrientationToBooleanConverter">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Converters.OrientationToBooleanConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Converters.OrientationToBooleanConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Converters.OrientationToVisibilityConverter">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Converters.OrientationToVisibilityConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Converters.OrientationToVisibilityConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Converters.ParentFolderConverter">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Converters.ParentFolderConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Converters.ParentFolderConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Converters.RelativeTimeConverter">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Converters.RelativeTimeConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Converters.RelativeTimeConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Converters.ResultToVisibilityConverter">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Converters.ResultToVisibilityConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Converters.ResultToVisibilityConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Converters.SecondsConverter">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Converters.SecondsConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Converters.SecondsConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Converters.SolidColorBrushToColorConverter">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Converters.SolidColorBrushToColorConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Converters.SolidColorBrushToColorConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Converters.SolidColorBrushToHexConverter">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Converters.SolidColorBrushToHexConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Converters.SolidColorBrushToHexConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Converters.StartsWithToVisibilityMultiValueConverter">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Converters.StartsWithToVisibilityMultiValueConverter.Convert(System.Object[],System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="values"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Converters.StartsWithToVisibilityMultiValueConverter.ConvertBack(System.Object,System.Type[],System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetTypes"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Converters.StringToBooleanConverter">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Converters.StringToBooleanConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Converters.StringToBooleanConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Converters.StringToCamelCaseConverter">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Converters.StringToCamelCaseConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Converters.StringToCamelCaseConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Converters.StringToVisibilityConverter">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Converters.StringToVisibilityConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Converters.SubstringConverter">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Converters.SubstringConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Converters.SubstringConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Converters.ToStringConverter">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Converters.ToStringConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Converters.ToStringConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Converters.TreeViewLineConverter">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Converters.TreeViewLineConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Converters.TreeViewLineConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Converters.UpperCaseConverter">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Converters.UpperCaseConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Converters.UpperCaseConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Converters.ValueEqualsParameterConverter">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Converters.ValueEqualsParameterConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Converters.ValueEqualsParameterConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Converters.ValueEqualsParameterMultiValueConverter">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Converters.ValueEqualsParameterMultiValueConverter.Convert(System.Object[],System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="values"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Converters.ValueEqualsParameterMultiValueConverter.ConvertBack(System.Object,System.Type[],System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetTypes"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Converters.ValueEqualsParameterToVisibilityConverter">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Converters.ValueEqualsParameterToVisibilityConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Converters.ValueEqualsParameterToVisibilityConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Converters.WindowTypeVisibilityConverter">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Converters.WindowTypeVisibilityConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Converters.WindowTypeVisibilityConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Data.BindingProxy">
            <summary>
            
            </summary>
        </member>
        <member name="E:Imagin.Common.Data.BindingProxy.DataChanged">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Data.BindingProxy.DataProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Data.BindingProxy.Data">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Data.BindingProxy.OnDataChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            
            </summary>
            <param name="element"></param>
            <param name="e"></param>
        </member>
        <member name="M:Imagin.Common.Data.BindingProxy.CreateInstanceCore">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Data.BindingProxy.OnDataChanged(System.Object)">
            <summary>
            
            </summary>
            <param name="Value"></param>
        </member>
        <member name="T:Imagin.Common.Data.EnumerateBinding">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Data.EnumerateBinding.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="path"></param>
        </member>
        <member name="T:Imagin.Common.Data.Bindings">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Data.Bindings.New(System.String,System.Object)">
            <summary>
            
            </summary>
            <param name="path"></param>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Data.Bindings.New(System.String,System.Windows.Data.IValueConverter)">
            <summary>
            
            </summary>
            <param name="path"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Data.Bindings.New(System.Windows.Data.IMultiValueConverter)">
            <summary>
            
            </summary>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Debug.Log">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Debug.Log.App">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Debug.Log.Write(System.Action{Imagin.Common.Configuration.IApp})">
            <summary>
            
            </summary>
            <param name="Action"></param>
        </member>
        <member name="M:Imagin.Common.Debug.Log.Write(System.Object,Imagin.Common.Debug.LogEntryType)">
            <summary>
            
            </summary>
            <param name="Message"></param>
            <param name="Type"></param>
        </member>
        <member name="M:Imagin.Common.Debug.Log.Write(System.Object,System.Object,Imagin.Common.Debug.LogEntryType)">
            <summary>
            
            </summary>
            <param name="Message"></param>
            <param name="Source"></param>
            <param name="Type"></param>
        </member>
        <member name="M:Imagin.Common.Debug.Log.Write(System.String,System.Object[])">
            <summary>
            
            </summary>
            <param name="Message"></param>
            <param name="Format"></param>
        </member>
        <member name="M:Imagin.Common.Debug.Log.Write(System.String,Imagin.Common.Debug.LogEntryType,System.Object[])">
            <summary>
            
            </summary>
            <param name="Message"></param>
            <param name="Type"></param>
            <param name="Format"></param>
        </member>
        <member name="M:Imagin.Common.Debug.Log.Write(System.String,System.Object,Imagin.Common.Debug.LogEntryType,System.Object[])">
            <summary>
            
            </summary>
            <param name="Message"></param>
            <param name="Source"></param>
            <param name="Type"></param>
            <param name="Format"></param>
        </member>
        <member name="T:Imagin.Common.Globalization.Localizer">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Globalization.Localizer.AssemblyName">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Globalization.Localizer.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="AssemblyName"></param>
        </member>
        <member name="M:Imagin.Common.Globalization.Localizer.GetValue(System.String)">
            <summary>
            
            </summary>
            <param name="Key"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Globalization.Localizer.GetValue``1(System.String)">
            <summary>
            
            </summary>
            <typeparam name="TValue"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Globalization.Localizer.GetValue``1(System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <typeparam name="TValue"></typeparam>
            <param name="key"></param>
            <param name="assemblyName"></param>
            <param name="dictionaryName"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.IO.ISystemObjectProvider">
            <summary>
            Specifies an object capable of querying system objects.
            </summary>
        </member>
        <member name="M:Imagin.Common.IO.ISystemObjectProvider.Query(System.String,System.Object)">
            <summary>
            
            </summary>
            <param name="Path">The path to query.</param>
            <param name="Source">A source used to make queries.</param>
            <returns>A list of system object paths.</returns>
        </member>
        <member name="T:Imagin.Common.IO.LocalSystemObjectProvider">
            <summary>
            Defines functionality to query a local system.
            </summary>
        </member>
        <member name="M:Imagin.Common.IO.LocalSystemObjectProvider.Query(System.String,System.Object)">
            <summary>
            
            </summary>
            <param name="Path"></param>
            <param name="Source"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.IO.SystemObjectProvider">
            <summary>
            Defines base functionality for an <see cref="T:Imagin.Common.IO.ISystemObjectProvider"/>.
            </summary>
        </member>
        <member name="M:Imagin.Common.IO.SystemObjectProvider.Query(System.String,System.Object)">
            <summary>
            
            </summary>
            <param name="Path"></param>
            <param name="Source"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Markup.EnumerateExtension">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Markup.EnumerateExtension.Type">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Markup.EnumerateExtension.#ctor(System.Type)">
            <summary>
            
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:Imagin.Common.Markup.EnumerateExtension.ProvideValue(System.IServiceProvider)">
            <summary>
            
            </summary>
            <param name="serviceProvider"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Markup.ResourceExtension">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Markup.ResourceExtension.Assembly">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Markup.ResourceExtension.Path">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Markup.ResourceExtension.RelativePath">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Markup.ResourceExtension.TargetType">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Markup.ResourceExtension.#ctor(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="Assembly"></param>
            <param name="RelativePath"></param>
        </member>
        <member name="M:Imagin.Common.Markup.ResourceExtension.ProvideValue(System.IServiceProvider)">
            <summary>
            
            </summary>
            <param name="serviceProvider"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Media.Animation.ExpanderDoubleAnimation">
            <summary>
            Animates a double value.
            </summary>
        </member>
        <member name="F:Imagin.Common.Media.Animation.ExpanderDoubleAnimation.FromProperty">
            <summary>
            Dependency property for the From property
            </summary>
        </member>
        <member name="P:Imagin.Common.Media.Animation.ExpanderDoubleAnimation.From">
            <summary>
            CLR Wrapper for the From depenendency property
            </summary>
        </member>
        <member name="F:Imagin.Common.Media.Animation.ExpanderDoubleAnimation.ToProperty">
            <summary>
            Dependency property for the To property
            </summary>
        </member>
        <member name="P:Imagin.Common.Media.Animation.ExpanderDoubleAnimation.To">
            <summary>
            CLR Wrapper for the To property
            </summary>
        </member>
        <member name="P:Imagin.Common.Media.Animation.ExpanderDoubleAnimation.ReverseValue">
            <summary>
            Sets the reverse value for the second animation
            </summary>
        </member>
        <member name="F:Imagin.Common.Media.Animation.ExpanderDoubleAnimation.ReverseValueProperty">
            <summary>
            Sets the reverse value for the second animation
            </summary>
        </member>
        <member name="M:Imagin.Common.Media.Animation.ExpanderDoubleAnimation.CreateInstanceCore">
            <summary>
            Creates an instance of the animation
            </summary>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Media.Animation.ExpanderDoubleAnimation.GetCurrentValueCore(System.Double,System.Double,System.Windows.Media.Animation.AnimationClock)">
            <summary>
            Animates the double value
            </summary>
            <param name="defaultOriginValue">The original value to animate</param>
            <param name="defaultDestinationValue">The final value</param>
            <param name="animationClock">The animation clock (timer)</param>
            <returns>Returns the new double to set</returns>
        </member>
        <member name="T:Imagin.Common.Media.Animation.GridLengthAnimation">
            <summary>
            Animates a grid length value just like the DoubleAnimation animates a double value
            </summary>
        </member>
        <member name="P:Imagin.Common.Media.Animation.GridLengthAnimation.IsCompleted">
            <summary>
            Marks the animation as completed
            </summary>
        </member>
        <member name="P:Imagin.Common.Media.Animation.GridLengthAnimation.ReverseValue">
            <summary>
            Sets the reverse value for the second animation
            </summary>
        </member>
        <member name="F:Imagin.Common.Media.Animation.GridLengthAnimation.ReverseValueProperty">
            <summary>
            Dependency property. Sets the reverse value for the second animation
            </summary>
        </member>
        <member name="P:Imagin.Common.Media.Animation.GridLengthAnimation.TargetPropertyType">
            <summary>
            Returns the type of object to animate
            </summary>
        </member>
        <member name="M:Imagin.Common.Media.Animation.GridLengthAnimation.CreateInstanceCore">
            <summary>
            Creates an instance of the animation object
            </summary>
            <returns>Returns the instance of the GridLengthAnimation</returns>
        </member>
        <member name="F:Imagin.Common.Media.Animation.GridLengthAnimation.FromProperty">
            <summary>
            Dependency property for the From property
            </summary>
        </member>
        <member name="P:Imagin.Common.Media.Animation.GridLengthAnimation.From">
            <summary>
            CLR Wrapper for the From depenendency property
            </summary>
        </member>
        <member name="F:Imagin.Common.Media.Animation.GridLengthAnimation.ToProperty">
            <summary>
            Dependency property for the To property
            </summary>
        </member>
        <member name="P:Imagin.Common.Media.Animation.GridLengthAnimation.To">
            <summary>
            CLR Wrapper for the To property
            </summary>
        </member>
        <member name="M:Imagin.Common.Media.Animation.GridLengthAnimation.VerifyAnimationCompletedStatus(System.Windows.Media.Animation.AnimationClock)">
            <summary>
            registers to the completed event of the animation clock
            </summary>
            <param name="clock">the animation clock to notify completion status</param>
        </member>
        <member name="M:Imagin.Common.Media.Animation.GridLengthAnimation.GetCurrentValue(System.Object,System.Object,System.Windows.Media.Animation.AnimationClock)">
            <summary>
            Animates the grid let set
            </summary>
            <param name="defaultOriginValue">The original value to animate</param>
            <param name="defaultDestinationValue">The final value</param>
            <param name="animationClock">The animation clock (timer)</param>
            <returns>Returns the new grid length to set</returns>
        </member>
        <member name="T:Imagin.Common.Media.IPixel">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Media.IPixel.Color">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Media.IPixel.X">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Media.IPixel.Y">
            <summary>
            
            </summary>
        </member>
        <member name="T:Imagin.Common.Media.Pixel">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Media.Pixel.Color">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Media.Pixel.X">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Media.Pixel.Y">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Media.Pixel.#ctor(System.Drawing.Color,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="color"></param>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="T:Imagin.Common.Point2D">
            <summary>
            A bindable variation of <see cref="T:System.Windows.Point"/>.
            </summary>
        </member>
        <member name="E:Imagin.Common.Point2D.Changed">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Point2D._x">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Point2D.X">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Point2D._y">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Point2D.Y">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Point2D.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Point2D.#ctor(System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:Imagin.Common.Point2D.#ctor(System.Windows.Point)">
            <summary>
            
            </summary>
            <param name="input"></param>
        </member>
        <member name="M:Imagin.Common.Point2D.Clone">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Point2D.Equals(Imagin.Common.Point2D)">
            <summary>
            
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Point2D.Get">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Point2D.OnChanged(System.Windows.Point)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Imagin.Common.Point2D.Set(System.Windows.Point)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Imagin.Common.Point2D.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Point2D.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Point2D.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Point3D">
            <summary>
            A bindable variation of <see cref="T:System.Windows.Media.Media3D.Point3D"/>.
            </summary>
        </member>
        <member name="E:Imagin.Common.Point3D.Changed">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Point3D._x">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Point3D.X">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Point3D._y">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Point3D.Y">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Point3D._z">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Point3D.Z">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Point3D.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Point3D.#ctor(System.Windows.Point)">
            <summary>
            
            </summary>
            <param name="input"></param>
        </member>
        <member name="M:Imagin.Common.Point3D.#ctor(System.Windows.Media.Media3D.Point3D)">
            <summary>
            
            </summary>
            <param name="input"></param>
        </member>
        <member name="M:Imagin.Common.Point3D.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
        </member>
        <member name="M:Imagin.Common.Point3D.Equals(Imagin.Common.Point3D)">
            <summary>
            
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Point3D.Clone">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Point3D.Get">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Point3D.OnChanged(System.Windows.Media.Media3D.Point3D)">
            <summary>
            
            </summary>
            <param name="Value"></param>
        </member>
        <member name="M:Imagin.Common.Point3D.Set(System.Windows.Media.Media3D.Point3D)">
            <summary>
            
            </summary>
            <param name="input"></param>
        </member>
        <member name="M:Imagin.Common.Point3D.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Point3D.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Proportions">
            <summary>
            A bindable variation of <see cref="T:System.Windows.Size"/>.
            </summary>
        </member>
        <member name="E:Imagin.Common.Proportions.Changed">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Proportions.Height">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Proportions.Width">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Proportions.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Proportions.#ctor(System.Windows.Size)">
            <summary>
            
            </summary>
            <param name="input"></param>
        </member>
        <member name="M:Imagin.Common.Proportions.#ctor(System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="M:Imagin.Common.Proportions.Clone">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Proportions.Equals(Imagin.Common.Proportions)">
            <summary>
            
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Proportions.Get">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Proportions.OnChanged(System.Windows.Size)">
            <summary>
            
            </summary>
            <param name="Value"></param>
        </member>
        <member name="M:Imagin.Common.Proportions.Set(System.Windows.Size)">
            <summary>
            
            </summary>
            <param name="Size"></param>
        </member>
        <member name="M:Imagin.Common.Proportions.Set(System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="M:Imagin.Common.Proportions.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Proportions.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Proportions.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.Selection">
            <summary>
            A bindable variation of <see cref="T:System.Windows.Rect"/>.
            </summary>
        </member>
        <member name="E:Imagin.Common.Selection.Changed">
            <summary>
            
            </summary>
        </member>
        <member name="E:Imagin.Common.Selection.LocationChanged">
            <summary>
            
            </summary>
        </member>
        <member name="E:Imagin.Common.Selection.SizeChanged">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Selection.Height">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Selection.Width">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Selection.X">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Selection.Y">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Selection.Location">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Selection.TopLeft">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Selection.TopRight">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Selection.BottomLeft">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Selection.BottomRight">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Selection.Rect">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Selection.Size">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Selection.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Selection.#ctor(System.Windows.Point,System.Windows.Size)">
            <summary>
            
            </summary>
            <param name="location"></param>
            <param name="size"></param>
        </member>
        <member name="M:Imagin.Common.Selection.#ctor(System.Windows.Rect)">
            <summary>
            
            </summary>
            <param name="input"></param>
        </member>
        <member name="M:Imagin.Common.Selection.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="M:Imagin.Common.Selection.OnPositionChanged(System.Windows.Point)">
            <summary>
            
            </summary>
            <param name="Point"></param>
        </member>
        <member name="M:Imagin.Common.Selection.OnSizeChanged(System.Windows.Size)">
            <summary>
            
            </summary>
            <param name="Size"></param>
        </member>
        <member name="M:Imagin.Common.Selection.Clone">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Selection.Equals(Imagin.Common.Selection)">
            <summary>
            
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Selection.Get">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Selection.OnChanged(System.Windows.Rect)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Imagin.Common.Selection.Set(System.Windows.Rect)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Imagin.Common.Selection.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Selection.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Selection.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.StretchMode">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.StretchMode.Tiled">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.StretchMode.Centered">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.StretchMode.Stretched">
            <summary>
            
            </summary>
        </member>
        <member name="T:Imagin.Common.StyleDictionary">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.StyleDictionary.Assembly">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.StyleDictionary.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.StyleDictionary.OnAssemblyChanged(System.String)">
            <summary>
            
            </summary>
            <param name="Value"></param>
        </member>
        <member name="T:Imagin.Common.Theme">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Theme.Dark">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.Theme.Light">
            <summary>
            
            </summary>
        </member>
        <member name="T:Imagin.Common.ThemeDictionary">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.ThemeDictionary.Theme">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.ThemeDictionary.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.ThemeDictionary.OnAssemblyChanged(System.String)">
            <summary>
            
            </summary>
            <param name="Value"></param>
        </member>
        <member name="M:Imagin.Common.ThemeDictionary.OnThemeChanged(Imagin.Common.Theme)">
            <summary>
            
            </summary>
            <param name="Value"></param>
        </member>
        <member name="T:Imagin.Common.Entry">
            <summary>
             Specifies a <see cref="T:Imagin.Common.PeriodicalObject"/> with a <see cref="T:System.DateTime"/> that notifies periodically (implements <see cref="T:Imagin.Common.IEntry"/>).
             </summary>
        </member>
        <member name="F:Imagin.Common.Entry._date">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.Entry.Date">
            <summary>
            Gets or sets the date of the entry.
            </summary>
        </member>
        <member name="M:Imagin.Common.Entry.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Entry.#ctor(System.Nullable{System.DateTime},System.Nullable{System.TimeSpan},System.Boolean)">
            <summary>
            
            </summary>
            <param name="date"></param>
            <param name="interval"></param>
            <param name="enabled"></param>
        </member>
        <member name="M:Imagin.Common.Entry.OnElapsed(System.Timers.ElapsedEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:Imagin.Common.NamedEntry">
            <summary>
             Specifies an <see cref="T:Imagin.Common.Entry"/> with a name (implements <see cref="T:Imagin.Common.INamable"/>).
             </summary>
        </member>
        <member name="F:Imagin.Common.NamedEntry.name">
            <summary>
            
            </summary>
        </member>
        <member name="P:Imagin.Common.NamedEntry.Name">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.NamedEntry.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.NamedEntry.#ctor(System.String,System.Nullable{System.DateTime},System.Nullable{System.TimeSpan},System.Boolean)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="date"></param>
            <param name="interval"></param>
            <param name="enabled"></param>
        </member>
        <member name="M:Imagin.Common.NamedEntry.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.ITwoDimensional">
            <summary>
            Specifies an <see cref="T:System.Object"/> with position in two-dimensional space.
            </summary>
        </member>
        <member name="P:Imagin.Common.ITwoDimensional.Position">
            <summary>
            
            </summary>
        </member>
        <member name="T:Imagin.Common.IThreeDimensional">
            <summary>
            Specifies an <see cref="T:System.Object"/> with position in three-dimensional space.
            </summary>
        </member>
        <member name="P:Imagin.Common.IThreeDimensional.Position">
            <summary>
            
            </summary>
        </member>
        <member name="T:Imagin.Common.IProportional">
            <summary>
            Specifies an <see cref="T:System.Object"/> that has <see cref="T:Imagin.Common.Proportions"/>.
            </summary>
        </member>
        <member name="P:Imagin.Common.IProportional.Proportions">
            <summary>
            
            </summary>
        </member>
        <member name="T:Imagin.Common.Dialog">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.Dialog.Show(System.String,System.String,System.Uri,Imagin.Common.DialogButton[])">
            <summary>
            
            </summary>
            <param name="title"></param>
            <param name="text"></param>
            <param name="buttons"></param>
            <param name="image"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Dialog.Show(System.String,System.String,System.Object,System.Uri,Imagin.Common.DialogButton[])">
            <summary>
            
            </summary>
            <param name="title"></param>
            <param name="text"></param>
            <param name="content"></param>
            <param name="image"></param>
            <param name="buttons"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Dialog.ShowAsync(System.String,System.String,System.Uri,Imagin.Common.DialogAction,Imagin.Common.DialogButton[])">
            <summary>
            
            </summary>
            <param name="title"></param>
            <param name="text"></param>
            <param name="image"></param>
            <param name="action"></param>
            <param name="buttons"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Dialog.ShowAsync(System.String,System.String,System.Object,System.Uri,Imagin.Common.DialogAction,Imagin.Common.DialogButton[])">
            <summary>
            
            </summary>
            <param name="title"></param>
            <param name="text"></param>
            <param name="content"></param>
            <param name="image"></param>
            <param name="action"></param>
            <param name="buttons"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Dialog.ShowError(System.String,System.String,Imagin.Common.DialogButton[])">
            <summary>
            
            </summary>
            <param name="title"></param>
            <param name="text"></param>
            <param name="buttons"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Dialog.ShowInfo(System.String,System.String,Imagin.Common.DialogButton[])">
            <summary>
            
            </summary>
            <param name="title"></param>
            <param name="text"></param>
            <param name="buttons"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Dialog.ShowInput(System.String,System.String,System.String,System.Uri,Imagin.Common.DialogButton[])">
            <summary>
            
            </summary>
            <param name="title"></param>
            <param name="text"></param>
            <param name="defaultInput"></param>
            <param name="buttons"></param>
            <param name="image"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Dialog.ShowPassword(System.String,System.String,System.String,System.Uri,Imagin.Common.DialogButton[])">
            <summary>
            
            </summary>
            <param name="title"></param>
            <param name="text"></param>
            <param name="defaultPassword"></param>
            <param name="image"></param>
            <param name="buttons"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Dialog.ShowSuccess(System.String,System.String,Imagin.Common.DialogButton[])">
            <summary>
            
            </summary>
            <param name="title"></param>
            <param name="text"></param>
            <param name="buttons"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Dialog.ShowWarning(System.String,System.String,Imagin.Common.DialogButton[])">
            <summary>
            
            </summary>
            <param name="title"></param>
            <param name="text"></param>
            <param name="buttons"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Dialog.Show(System.String[]@,System.String,Imagin.Common.WindowsDialogMode,Imagin.Common.WindowsDialogSelectionMode,System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            
            </summary>
            <param name="paths"></param>
            <param name="title"></param>
            <param name="dialogMode"></param>
            <param name="dialogSelectionMode"></param>
            <param name="extensions"></param>
            <param name="defaultPath"></param>
            <returns></returns>
        </member>
        <member name="M:Imagin.Common.Dialog.Show(System.String@,System.String,Imagin.Common.WindowsDialogMode,System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            
            </summary>
            <param name="path"></param>
            <param name="title"></param>
            <param name="dialogMode"></param>
            <param name="extensions"></param>
            <param name="defaultPath"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.LoadingDialog">
            <summary>
            
            </summary>
        </member>
        <member name="M:Imagin.Common.LoadingDialog.ShowAsync(System.String,System.String,System.Uri,Imagin.Common.DialogAction,Imagin.Common.DialogButton[])">
            <summary>
            
            </summary>
            <param name="title"></param>
            <param name="text"></param>
            <param name="image"></param>
            <param name="action"></param>
            <param name="buttons"></param>
            <returns></returns>
        </member>
        <member name="T:Imagin.Common.WindowsDialogMode">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.WindowsDialogMode.OpenFile">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.WindowsDialogMode.OpenFolder">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.WindowsDialogMode.Open">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.WindowsDialogMode.SaveFile">
            <summary>
            
            </summary>
        </member>
        <member name="T:Imagin.Common.WindowsDialogSelectionMode">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.WindowsDialogSelectionMode.Single">
            <summary>
            
            </summary>
        </member>
        <member name="F:Imagin.Common.WindowsDialogSelectionMode.Multiple">
            <summary>
            
            </summary>
        </member>
        <member name="T:XamlGeneratedNamespace.GeneratedInternalTypeHelper">
            <summary>
            GeneratedInternalTypeHelper
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.CreateInstance(System.Type,System.Globalization.CultureInfo)">
            <summary>
            CreateInstance
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.GetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Globalization.CultureInfo)">
            <summary>
            GetPropertyValue
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.SetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Object,System.Globalization.CultureInfo)">
            <summary>
            SetPropertyValue
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.CreateDelegate(System.Type,System.Object,System.String)">
            <summary>
            CreateDelegate
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.AddEventHandler(System.Reflection.EventInfo,System.Object,System.Delegate)">
            <summary>
            AddEventHandler
            </summary>
        </member>
    </members>
</doc>
