<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:l="http://wpflocalizeextension.codeplex.com"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:local="clr-namespace:Imagin.Common"
    xmlns:Common.Linq="clr-namespace:Imagin.Common.Linq;assembly=Imagin.Common"
    xmlns:Common="http://imagin.tech/imagin/common">
    <Style x:Key="Style.Window.Button" TargetType="Button">
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="Height" Value="25" />
        <Setter Property="Width" Value="30" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}">
                        <local:MaskedImage 
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            SourceColor="{TemplateBinding Foreground}"
                            Source="{Binding Content, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}, UpdateSourceTrigger=PropertyChanged}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="False">
                <Setter Property="Background" Value="{DynamicResource Brush.Window.Button.Background}"/>
                <Setter Property="BorderBrush" Value="{DynamicResource Brush.Window.Button.Border}"/>
                <Setter Property="Foreground" Value="{DynamicResource Brush.Window.Button.Foreground}" />
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource Brush.Window.Button.MouseOver.Background}"/>
                <Setter Property="BorderBrush" Value="{DynamicResource Brush.Window.Button.MouseOver.Border}"/>
                <Setter Property="Foreground" Value="{DynamicResource Brush.Window.Button.MouseOver.Foreground}" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" Value="{DynamicResource Brush.Window.Button.Pressed.Background}"/>
                <Setter Property="BorderBrush" Value="{DynamicResource Brush.Window.Button.Pressed.Border}"/>
                <Setter Property="Foreground" Value="{DynamicResource Brush.Window.Button.Pressed.Foreground}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="{x:Type local:WindowFooter}" TargetType="{x:Type local:WindowFooter}">
        <Setter Property="Background" Value="{DynamicResource Brush.WindowFooter.Background}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource Brush.Border}"/>
        <Setter Property="BorderThickness" Value="0,1,0,0"/>
        <Setter Property="Foreground" Value="{DynamicResource Brush.WindowFooter.Foreground}"/>
        <Setter Property="Height" Value="25"/>
    </Style>

    <Style x:Key="Style.Window" TargetType="{x:Type Window}">
        <Setter Property="Background" Value="{DynamicResource Brush.Window.Background}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource Brush.Window.Border}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Foreground" Value="{DynamicResource Brush.Text}" />
        <Setter Property="UseLayoutRounding" Value="True" />
        <Setter Property="TextOptions.TextFormattingMode" Value="Display" />
        <Setter Property="Padding" Value="10"/>
        <Setter Property="ShowInTaskbar" Value="True" />
        <Style.Triggers>
            <Trigger Property="IsActive" Value="True">
                <Setter Property="BorderBrush" Value="{DynamicResource Brush.Window.Active.Border}" />
            </Trigger>
        </Style.Triggers>
    </Style>
</ResourceDictionary>