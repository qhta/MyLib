<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:l="http://wpflocalizeextension.codeplex.com"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="clr-namespace:Imagin.Common"
    xmlns:Converters="clr-namespace:Imagin.Common.Converters"
    xmlns:Linq="clr-namespace:Imagin.Common.Linq"
    xmlns:Common="http://imagin.tech/imagin/common">
    <Style 
        x:Key="Style.TextBox.Placeholder" 
        TargetType="TextBlock"
        BasedOn="{StaticResource {x:Type TextBlock}}">
        <Setter Property="Foreground" Value="{DynamicResource Brush.TextBox.Placeholder}" />
    </Style>

    <!-- ..................................................................................... -->

    <Style x:Key="Style.TextBoxBase" TargetType="{x:Type TextBoxBase}">
        <Setter Property="Background" Value="{DynamicResource Brush.TextBox.Background}" />
        <Setter Property="BorderBrush" Value="{DynamicResource Brush.TextBox.Border}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="CaretBrush" Value="{DynamicResource Brush.TextBox.Caret}" />
        <Setter Property="ContextMenu">
            <Setter.Value>
                <ContextMenu DataContext="{Binding PlacementTarget, RelativeSource={RelativeSource Self}}">
                    <MenuItem 
                        Command="{x:Static ApplicationCommands.Cut}"
                        Header="Cut"
                        InputGestureText="Ctrl + X"/>
                    <MenuItem 
                        Command="{x:Static ApplicationCommands.Copy}"
                        Header="Copy"
                        InputGestureText="Ctrl + C"/>
                    <MenuItem 
                        Command="{x:Static ApplicationCommands.Paste}"
                        Header="Paste"
                        InputGestureText="Ctrl + V"/>
                </ContextMenu>
            </Setter.Value>
        </Setter>
        <Setter Property="FontFamily" Value="pack://application:,,,/Fonts/#Swis721 Cn BT"/>
        <Setter Property="FontSize" Value="13" />
        <Setter Property="Foreground" Value="{DynamicResource Brush.Text}" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="Padding" Value="3" />
        <Setter Property="SelectionBrush" Value="{DynamicResource Brush.TextBox.Selection}" />
        <Setter Property="SelectionOpacity" Value="0.4" />
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Hidden" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="BorderBrush" Value="{DynamicResource Brush.TextBox.MouseOver.Border}" />
            </Trigger>
            <Trigger Property="IsFocused" Value="True">
                <Setter Property="BorderBrush" Value="{DynamicResource Brush.TextBox.Focused.Border}" />
            </Trigger>
            <Trigger Property="IsReadOnly" Value="True">
                <Setter Property="SelectionBrush" Value="{DynamicResource Brush.TextBox.Disabled.Selection}" />
                <Setter Property="Opacity" Value="0.8" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="SelectionBrush" Value="{DynamicResource Brush.TextBox.Disabled.Selection}" />
                <Setter Property="Opacity" Value="0.8" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="Style.TextBox.Large" TargetType="{x:Type TextBox}" BasedOn="{StaticResource Style.TextBoxBase}">
        <Setter Property="AcceptsReturn" Value="True" />
        <Setter Property="MinHeight" Value="48" />
        <Setter Property="VerticalContentAlignment" Value="Top" />
    </Style>

    <Style x:Key="Style.TextBox.Blank" TargetType="{x:Type TextBox}" BasedOn="{StaticResource Style.TextBoxBase}">
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="BorderBrush" Value="{DynamicResource TextBoxBorder}" />
        <Setter Property="Foreground" Value="{DynamicResource Brush.Text}" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <Border BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" x:Name="border" Height="{TemplateBinding Height}">
                        <ScrollViewer HorizontalAlignment="Stretch"  x:Name="PART_ContentHost" VerticalContentAlignment="Center" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Height="{TemplateBinding Height}"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- ..................................................................................... -->

    <Style x:Key="{x:Type TextBox}" TargetType="{x:Type TextBox}" BasedOn="{StaticResource Style.TextBoxBase}"/>

    <Style x:Key="{x:Type local:TextBox}" TargetType="{x:Type local:TextBox}" BasedOn="{StaticResource Style.TextBoxBase}">
        <Setter Property="CharacterMaskForeground" Value="{DynamicResource Brush.Text}"/>
        <Setter Property="ClearButtonTemplate">
            <Setter.Value>
                <DataTemplate>
                    <DataTemplate.Resources>
                        <Converters:BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter"/>
                    </DataTemplate.Resources>
                    <local:MaskedButton
                        DataContext="{Binding Data}"
                        Command="{Binding ClearCommand}"
                        Focusable="False"
                        Source="pack://application:,,,/Imagin.Common.WPF;component/Images/XRound.png"
                        Margin="5,0,0,0"
                        ToolTip="{l:Loc Imagin.Common.WPF:Main:Clear}"
                        Visibility="{Binding IsEnabled, Converter={StaticResource BooleanToVisibilityConverter}, RelativeSource={RelativeSource Self}}"/>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="EnterButtonTemplate">
            <Setter.Value>
                <DataTemplate>
                    <local:MaskedButton 
                        DataContext="{Binding Data}"
                        Command="{Binding EnterCommand}"
                        Focusable="False"
                        Margin="5,0,0,0"
                        Source="pack://application:,,,/Imagin.Common.WPF;component/Images/NextArrow.png"
                        ToolTip="{l:Loc Imagin.Common.WPF:Main:Enter}"/>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="InnerPadding" Value="0"/>
        <Setter Property="Padding" Value="5"/>
        <Setter Property="PlaceholderStyle" Value="{StaticResource Style.TextBox.Placeholder}"/>
        <Setter Property="ScrollViewerTemplate">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:ScrollViewerExtended}">
                    <Grid 
                        x:Name="Grid"
                        Background="{TemplateBinding Background}">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="*" />
                            <RowDefinition Height="Auto" />
                        </Grid.RowDefinitions>
                                                
                        <Rectangle 
                            x:Name="Corner"
                            Grid.Row="1"
                            Grid.Column="1"
                            Fill="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />

                        <ScrollContentPresenter 
                            x:Name="PART_ScrollContentPresenter"
                            Grid.Row="0"
                            Grid.Column="0"
                            CanContentScroll="{TemplateBinding CanContentScroll}"
                            CanHorizontallyScroll="False"
                            CanVerticallyScroll="False"
                            Content="{TemplateBinding Content}"
                            ContentTemplate="{TemplateBinding ContentTemplate}"
                            Margin="{Binding Padding, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}"/>
                                                
                        <ScrollBar 
                            x:Name="PART_VerticalScrollBar"
                            Grid.Row="0"
                            Grid.Column="1"
                            AutomationProperties.AutomationId="VerticalScrollBar"
                            Cursor="Arrow"
                            Maximum="{TemplateBinding ScrollableHeight}"
                            Minimum="0"
                            ViewportSize="{TemplateBinding ViewportHeight}"
                            Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}"
                            Value="{Binding VerticalOffset,
                            Mode=OneWay,
                            RelativeSource={RelativeSource TemplatedParent}}" />
                        <ScrollBar 
                            x:Name="PART_HorizontalScrollBar"
                            Grid.Row="1"
                            Grid.Column="0"
                            AutomationProperties.AutomationId="HorizontalScrollBar"
                            Cursor="Arrow"
                            Maximum="{TemplateBinding ScrollableWidth}"
                            Minimum="0"
                            Orientation="Horizontal"
                            Value="{Binding HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}"
                            ViewportSize="{TemplateBinding ViewportWidth}"
                            Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ToggleButtonTemplate">
            <Setter.Value>
                <DataTemplate>
                    <DataTemplate.Resources>
                        <Converters:InverseBooleanConverter x:Key="InverseBooleanConverter"/>
                    </DataTemplate.Resources>
                    <local:MaskedToggleButton 
                        DataContext="{Binding Data}"
                        Focusable="False"
                        IsChecked="{Binding IsCharacterMaskingEnabled, Converter={StaticResource InverseBooleanConverter}}"  
                        Margin="5,0,0,0"
                        Source="pack://application:,,,/Imagin.Common.WPF;component/Images/Toggle.png" 
                        VerticalAlignment="Center"/>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsFocused" Value="True">
                <Setter Property="CharacterMaskForeground" Value="{DynamicResource Brush.TextBox.Focused.Border}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- ..................................................................................... -->

    <Style x:Key="{x:Type local:EditableLabel}" TargetType="{x:Type local:EditableLabel}" BasedOn="{StaticResource {x:Type local:TextBox}}"/>

    <!-- ..................................................................................... -->

    <Style x:Key="{x:Type local:UriBox}" TargetType="{x:Type local:UriBox}" BasedOn="{StaticResource {x:Type local:TextBox}}"/>

    <Style x:Key="{x:Type local:VersionBox}" TargetType="{x:Type local:VersionBox}" BasedOn="{StaticResource {x:Type local:TextBox}}"/>
    
    <!-- ..................................................................................... -->

    <Style x:Key="{x:Type local:UpDown}" TargetType="{x:Type local:UpDown}" BasedOn="{StaticResource {x:Type local:TextBox}}">
        <Setter Property="DownButtonTemplate">
            <Setter.Value>
                <DataTemplate>
                    <local:MaskedButton 
                        DataContext="{Binding Data, Mode=OneWay}"
                        Command="{Binding DownCommand}"
                        CommandParameter="Down"
                        Focusable="False"
                        Source="pack://application:,,,/Imagin.Common.WPF;component/Images/ArrowDown.png"
                        SourceHeight="9" 
                        SourceWidth="9" 
                        ToolTip="{l:Loc Imagin.Common.WPF:Main:Decrease}"/>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="UpButtonTemplate">
            <Setter.Value>
                <DataTemplate>
                    <local:MaskedButton 
                        DataContext="{Binding Data, Mode=OneWay}"
                        Command="{Binding UpCommand}"
                        CommandParameter="Up"
                        Focusable="False"
                        Source="pack://application:,,,/Imagin.Common.WPF;component/Images/ArrowUp.png"
                        SourceHeight="9" 
                        SourceWidth="9" 
                        ToolTip="{l:Loc Imagin.Common.WPF:Main:Increase}"/>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="CanUpDown" Value="True">
                <Setter Property="Padding" Value="5,0"/>
            </Trigger>
            <Trigger Property="CanUpDown" Value="False">
                <Setter Property="Padding" Value="5"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- ..................................................................................... -->

    <Style x:Key="{x:Type local:ByteUpDown}" TargetType="{x:Type local:ByteUpDown}" BasedOn="{StaticResource {x:Type local:UpDown}}"/>

    <Style x:Key="{x:Type local:DecimalUpDown}" TargetType="{x:Type local:DecimalUpDown}" BasedOn="{StaticResource {x:Type local:UpDown}}"/>

    <Style x:Key="{x:Type local:DoubleUpDown}" TargetType="{x:Type local:DoubleUpDown}" BasedOn="{StaticResource {x:Type local:UpDown}}"/>

    <Style x:Key="{x:Type local:FloatUpDown}" TargetType="{x:Type local:FloatUpDown}" BasedOn="{StaticResource {x:Type local:UpDown}}"/>

    <Style x:Key="{x:Type local:Int16UpDown}" TargetType="{x:Type local:Int16UpDown}" BasedOn="{StaticResource {x:Type local:UpDown}}"/>

    <Style x:Key="{x:Type local:Int32UpDown}" TargetType="{x:Type local:Int32UpDown}" BasedOn="{StaticResource {x:Type local:UpDown}}"/>

    <Style x:Key="{x:Type local:Int64UpDown}" TargetType="{x:Type local:Int64UpDown}" BasedOn="{StaticResource {x:Type local:UpDown}}"/>

    <Style x:Key="{x:Type local:UDoubleUpDown}" TargetType="{x:Type local:UDoubleUpDown}" BasedOn="{StaticResource {x:Type local:UpDown}}"/>

    <Style x:Key="{x:Type local:UInt16UpDown}" TargetType="{x:Type local:UInt16UpDown}" BasedOn="{StaticResource {x:Type local:UpDown}}"/>

    <Style x:Key="{x:Type local:UInt32UpDown}" TargetType="{x:Type local:UInt32UpDown}" BasedOn="{StaticResource {x:Type local:UpDown}}"/>

    <Style x:Key="{x:Type local:UInt64UpDown}" TargetType="{x:Type local:UInt64UpDown}" BasedOn="{StaticResource {x:Type local:UpDown}}"/>

    <!-- ..................................................................................... -->

    <Style x:Key="{x:Type local:DateTimeUpDown}" TargetType="{x:Type local:DateTimeUpDown}" BasedOn="{StaticResource {x:Type local:UpDown}}">
        <Setter Property="DropDownStretch" Value="None"/>
        <Setter Property="DropDownStyle">
            <Setter.Value>
                <Style TargetType="Border">
                    <Setter Property="Background" Value="{DynamicResource Brush.Popup.Background}"/>
                    <Setter Property="BorderBrush" Value="{DynamicResource Brush.Popup.BorderBrush}"/>
                    <Setter Property="BorderThickness" Value="1"/>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="StaysOpenOnSelection" Value="True"/>
    </Style>

    <Style x:Key="{x:Type local:TimeSpanUpDown}" TargetType="{x:Type local:TimeSpanUpDown}" BasedOn="{StaticResource {x:Type local:UpDown}}"/>

    <Style x:Key="{x:Type local:TimeUpDown}" TargetType="{x:Type local:TimeUpDown}" BasedOn="{StaticResource {x:Type local:TimeSpanUpDown}}">
        <Setter Property="DropDownStyle">
            <Setter.Value>
                <Style TargetType="Border">
                    <Setter Property="Background" Value="{DynamicResource Brush.Popup.Background}"/>
                    <Setter Property="BorderBrush" Value="{DynamicResource Brush.Popup.BorderBrush}"/>
                    <Setter Property="BorderThickness" Value="1"/>
                </Style>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- ..................................................................................... -->

    <Style x:Key="{x:Type local:AlphaNumericBox}" TargetType="{x:Type local:AlphaNumericBox}" BasedOn="{StaticResource {x:Type local:TextBox}}"/>

    <Style x:Key="{x:Type local:FileBox}" TargetType="{x:Type local:FileBox}" BasedOn="{StaticResource {x:Type local:TextBox}}">
        <Setter Property="BrowseButtonTemplate">
            <Setter.Value>
                <DataTemplate>
                    <local:MaskedButton 
                        DataContext="{Binding Data, Mode=OneWay}"
                        Command="{Binding BrowseCommand}"
                        Focusable="False"
                        SourceColor="{Binding Foreground}"
                        Margin="5,0,0,0"
                        Source="pack://application:,,,/Imagin.Common.WPF;component/Images/Folder.png"/>
                </DataTemplate>
            </Setter.Value>
        </Setter> 
        <Setter Property="BrowseButtonToolTip" Value="{l:Loc Browse}"/>
        <Setter Property="BrowseMode" Value="OpenFile"/>
        <Setter Property="BrowseTitle" Value="{l:LocText Browse, Suffix=...}"/>
        <Setter Property="ShowBrowseButton" Value="True"/> 
        <Setter Property="ValidityIndicatorTemplate">
            <Setter.Value>
                <DataTemplate>
                    <local:MaskedImage 
                        DataContext="{Binding Data, Mode=OneWay}"
                        SourceColor="{Binding Foreground}"
                        Margin="5,0,0,0"
                        Source="pack://application:,,,/Imagin.Common.WPF;component/Images/CheckmarkRound.png"/>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ValidityIndicatorToolTip" Value="{l:Loc Valid}"/>
    </Style>

    <Style x:Key="{x:Type local:HexBox}" TargetType="{x:Type local:HexBox}" BasedOn="{StaticResource {x:Type local:TextBox}}"/>

    <Style x:Key="{x:Type local:RegexBox}" TargetType="{x:Type local:RegexBox}" BasedOn="{StaticResource {x:Type local:TextBox}}"/>

    <!-- ..................................................................................... -->
    
    <Style x:Key="{x:Type RichTextBox}" TargetType="{x:Type RichTextBox}" BasedOn="{StaticResource Style.TextBoxBase}">
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="Padding" Value="10" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="TextBoxBase">
                    <Border
                        Name="Bd"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}" 
                        BorderThickness="{TemplateBinding BorderThickness}" 
                        SnapsToDevicePixels="True">
                        <ScrollViewer 
                            Name="PART_ContentHost"
                            SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{x:Type local:TokenView}" TargetType="{x:Type local:TokenView}" BasedOn="{StaticResource {x:Type RichTextBox}}">
        <Setter Property="Linq:TextBoxBaseExtensions.EnableCopyCommand" Value="False"/>
        <Setter Property="Linq:TextBoxBaseExtensions.EnableCutCommand" Value="False"/>
        <Setter Property="Linq:TextBoxBaseExtensions.EnablePasteCommand" Value="False"/>
        <Setter Property="Linq:FrameworkElementExtensions.EnableContextMenu" Value="False"/>
        <Setter Property="Padding" Value="3,7"/>
    </Style>
</ResourceDictionary>