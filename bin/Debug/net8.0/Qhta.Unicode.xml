<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Qhta.Unicode</name>
    </assembly>
    <members>
        <member name="T:Qhta.Unicode.BiDiClass">
            <summary>
            Unicode character BiDi class.
            </summary>
        </member>
        <member name="F:Qhta.Unicode.BiDiClass.L">
            <summary>
            Left-to-Right - any strong left-to-right character
            </summary>
        </member>
        <member name="F:Qhta.Unicode.BiDiClass.R">
            <summary>
            Right-to-Left - any strong right-to-left (non-Arabic-type) character
            </summary>
        </member>
        <member name="F:Qhta.Unicode.BiDiClass.AL">
            <summary>
            Arabic Letter - any strong right-to-left (Arabic-type) character
            </summary>
        </member>
        <member name="F:Qhta.Unicode.BiDiClass.EN">
            <summary>
            European Number - any ASCII digit or Eastern Arabic-Indic digit
            </summary>
        </member>
        <member name="F:Qhta.Unicode.BiDiClass.ES">
            <summary>
            European_Separator - plus and minus signs
            </summary>
        </member>
        <member name="F:Qhta.Unicode.BiDiClass.ET">
            <summary>
            European_Terminator - a terminator in a numeric format context, includes currency signs
            </summary>
        </member>
        <member name="F:Qhta.Unicode.BiDiClass.AN">
            <summary>
            Arabic Number - any Arabic-Indic digit
            </summary>
        </member>
        <member name="F:Qhta.Unicode.BiDiClass.CS">
            <summary>
            Common_Separator - commas, colons, and slashes
            </summary>
        </member>
        <member name="F:Qhta.Unicode.BiDiClass.NSM">
            <summary>
            Non-Spacing Mark - any non-spacing mark
            </summary>
        </member>
        <member name="F:Qhta.Unicode.BiDiClass.BN">
            <summary>
            Boundary Neutral - most format characters, control codes, or non-characters
            </summary>
        </member>
        <member name="F:Qhta.Unicode.BiDiClass.B">
            <summary>
            Paragraph Separator - various newline characters
            </summary>
        </member>
        <member name="F:Qhta.Unicode.BiDiClass.S">
            <summary>
            
            </summary>
        </member>
        <member name="F:Qhta.Unicode.BiDiClass.WS">
            <summary>
            White_Space - spaces
            </summary>
        </member>
        <member name="F:Qhta.Unicode.BiDiClass.ON">
            <summary>
            Other_Neutral - most other symbols and punctuation marks
            </summary>
        </member>
        <member name="F:Qhta.Unicode.BiDiClass.LRE">
            <summary>
            Left-to-Right Embedding - U+202A: the LR embedding control
            </summary>
        </member>
        <member name="F:Qhta.Unicode.BiDiClass.LRO">
            <summary>
            Left-to-Right Override - U+202D: the LR override control
            </summary>
        </member>
        <member name="F:Qhta.Unicode.BiDiClass.RLE">
            <summary>
            Right-to-Left Embedding - U+202B: the RL embedding control
            </summary>
        </member>
        <member name="F:Qhta.Unicode.BiDiClass.RLO">
            <summary>
            Right-to-Left Override - U+202E: the RL override control
            </summary>
        </member>
        <member name="F:Qhta.Unicode.BiDiClass.PDF">
            <summary>
            Pop_Directional_Format - U+202C: terminates an embedding or override control
            </summary>
        </member>
        <member name="F:Qhta.Unicode.BiDiClass.LRI">
            <summary>
            Left-to-Right Isolate - U+2066: the LR isolate control
            </summary>
        </member>
        <member name="F:Qhta.Unicode.BiDiClass.RLI">
            <summary>
            Right-to-Left Isolate - U+2067: the RL isolate control
            </summary>
        </member>
        <member name="F:Qhta.Unicode.BiDiClass.FSI">
            <summary>
            First_Strong_Isolate - U+2068: the first strong isolate control
            </summary>
        </member>
        <member name="F:Qhta.Unicode.BiDiClass.PDI">
            <summary>
            Pop_Directional_Isolate - U+2069: terminates an isolate control
            </summary>
        </member>
        <member name="T:Qhta.Unicode.BlockIndex">
            <summary>
            An index of Unicode character name separate words to code points.
            </summary>
        </member>
        <member name="T:Qhta.Unicode.BlockType">
            <summary>
            Enumerates the Unicode block types
            </summary>
        </member>
        <member name="F:Qhta.Unicode.BlockType.Unknown">
            <summary>Undefined block type.</summary>
        </member>
        <member name="F:Qhta.Unicode.BlockType.Alphabet">
            <summary>Standard set of letters written to represent particular sounds in a spoken language.</summary>
        </member>
        <member name="F:Qhta.Unicode.BlockType.Abjad">
            <summary>Writing system in which only consonants are represented, leaving the vowel sounds to be inferred by the reader.</summary>
        </member>
        <member name="F:Qhta.Unicode.BlockType.Abugida">
            <summary>Segmental writing system in which consonant–vowel sequences are written as units; each unit is based on a consonant letter, and vowel notation is secondary, similar to a diacritical mark.</summary>
        </member>
        <member name="F:Qhta.Unicode.BlockType.Combining">
            <summary>Diacritical symbols combining with other symbols.</summary>
        </member>
        <member name="F:Qhta.Unicode.BlockType.Cuneiform">
            <summary>Cuneiform symbols.</summary>
        </member>
        <member name="F:Qhta.Unicode.BlockType.Ideographic">
            <summary>Ideographic symbols.</summary>
        </member>
        <member name="F:Qhta.Unicode.BlockType.Numerals">
            <summary>Block that contains only numeral symbols</summary>
        </member>
        <member name="F:Qhta.Unicode.BlockType.Format">
            <summary>Block that changes only the form of presentation of some other code point.</summary>
        </member>
        <member name="F:Qhta.Unicode.BlockType.Phonetic">
            <summary>Phonetic extensions.</summary>
        </member>
        <member name="F:Qhta.Unicode.BlockType.Punctuation">
            <summary>Phonetic extensions.</summary>
        </member>
        <member name="F:Qhta.Unicode.BlockType.Range">
            <summary>Block of which only first and last symbol has a name.</summary>
        </member>
        <member name="F:Qhta.Unicode.BlockType.Sequential">
            <summary>Block in which individual code points are numbered sequentially</summary>
        </member>
        <member name="F:Qhta.Unicode.BlockType.SemiSyllabary">
            <summary>Writing system that behaves partly as an alphabet and partly as a syllabary.</summary>
        </member>
        <member name="F:Qhta.Unicode.BlockType.Syllabary">
            <summary>Set of written symbols (called syllabograms) that represent either syllables or moras—a unit of prosody that is often but not always a syllable in length.</summary>
        </member>
        <member name="F:Qhta.Unicode.BlockType.Symbols">
            <summary>Block which contains symbols not used in any natural language.</summary>
        </member>
        <member name="F:Qhta.Unicode.BlockType.Block">
            <summary>Block with special syntax of description.</summary>
        </member>
        <member name="F:Qhta.Unicode.BlockType.Special">
            <summary>Block with special syntax of description.</summary>
        </member>
        <member name="T:Qhta.Unicode.CategoryIndex">
            <summary>
            An index of codePoints with specific UcdCategory.
            </summary>
        </member>
        <member name="M:Qhta.Unicode.CategoryIndex.Initialize(Qhta.Unicode.UnicodeData)">
            <summary>
            Initializes index from a UnicodeData object.
            </summary>
            <param name="ucd"></param>
        </member>
        <member name="M:Qhta.Unicode.CategoryIndex.Add(Qhta.Unicode.UcdCategory,System.Int32)">
            <summary>
            Add a code point to the index.
            </summary>
            <param name="category"></param>
            <param name="codePoint"></param>
        </member>
        <member name="T:Qhta.Unicode.CCClass">
            <summary>
            Unicode canonical combining class.
            </summary>
        </member>
        <member name="F:Qhta.Unicode.CCClass.NR">
            <summary>
            Not_Reordered - Spacing and enclosing marks; also many vowel and consonant signs, even if non-spacing
            </summary>
        </member>
        <member name="F:Qhta.Unicode.CCClass.Ov">
            <summary>
            Overlay - Marks which overlay a base letter or symbol
            </summary>
        </member>
        <member name="F:Qhta.Unicode.CCClass.HR">
            <summary>
            Han_Reading - Diacritic reading marks for CJK unified ideographs
            </summary>
        </member>
        <member name="F:Qhta.Unicode.CCClass.Nu">
            <summary>
            Nukta - Diacritic nukta marks in Brahmi-derived scripts
            </summary>
        </member>
        <member name="F:Qhta.Unicode.CCClass.KV">
            <summary>
            Kana_Voicing - Hiragana/Katakana voicing marks
            </summary>
        </member>
        <member name="F:Qhta.Unicode.CCClass.Vi">
            <summary>
            Virama - Viramas
            </summary>
        </member>
        <member name="F:Qhta.Unicode.CCClass.AtBL">
            <summary>
            Attached_Below_Left - Marks attached at the bottom left
            </summary>
        </member>
        <member name="F:Qhta.Unicode.CCClass.AtB">
            <summary>
            Attached_Below - Marks attached directly below
            </summary>
        </member>
        <member name="F:Qhta.Unicode.CCClass.AtBR">
            <summary>
            Attached_Below_Right - Marks attached at the bottom right
            </summary>
        </member>
        <member name="F:Qhta.Unicode.CCClass.AtL">
            <summary>
            Attached_Left - Marks attached to the left
            </summary>
        </member>
        <member name="F:Qhta.Unicode.CCClass.AtR">
            <summary>
            Attached_Right - Marks attached to the right
            </summary>
        </member>
        <member name="F:Qhta.Unicode.CCClass.AtTL">
            <summary>
            Attached_Above_Left - Marks attached at the top left
            </summary>
        </member>
        <member name="F:Qhta.Unicode.CCClass.AtA">
            <summary>
            Attached_Above - Marks attached directly above
            </summary>
        </member>
        <member name="F:Qhta.Unicode.CCClass.AtAR">
            <summary>
            Attached_Above_Right - Marks attached at the top right
            </summary>
        </member>
        <member name="F:Qhta.Unicode.CCClass.BL">
            <summary>
            Below_Left - Distinct marks at the bottom left
            </summary>
        </member>
        <member name="F:Qhta.Unicode.CCClass.B">
            <summary>
            Below - Distinct marks directly below
            </summary>
        </member>
        <member name="F:Qhta.Unicode.CCClass.BR">
            <summary>
            Below_Right - Distinct marks at the bottom right
            </summary>
        </member>
        <member name="F:Qhta.Unicode.CCClass.L">
            <summary>
            Left - Distinct marks to the left
            </summary>
        </member>
        <member name="F:Qhta.Unicode.CCClass.R">
            <summary>
            Right - Distinct marks to the right
            </summary>
        </member>
        <member name="F:Qhta.Unicode.CCClass.AL">
            <summary>
            Above_Left - Distinct marks at the top left
            </summary>
        </member>
        <member name="F:Qhta.Unicode.CCClass.A">
            <summary>
            Above - Distinct marks directly above
            </summary>
        </member>
        <member name="F:Qhta.Unicode.CCClass.AR">
            <summary>
            Above_Right - Distinct marks at the top right
            </summary>
        </member>
        <member name="F:Qhta.Unicode.CCClass.DB">
            <summary>
            Double_Below - Distinct marks subtending two bases
            </summary>
        </member>
        <member name="F:Qhta.Unicode.CCClass.DA">
            <summary>
            Double_Above - Distinct marks extending above two bases
            </summary>
        </member>
        <member name="F:Qhta.Unicode.CCClass.IS">
            <summary>
            Iota_Subscript - Greek iota subscript only
            </summary>
        </member>
        <member name="T:Qhta.Unicode.CharFunctionIndex">
            <summary>
            An index of codePoints with specific char function.
            Char function is a function name with a parameter in braces
            or a rich text string in braces.
            </summary>
        </member>
        <member name="M:Qhta.Unicode.CharFunctionIndex.Initialize(Qhta.Unicode.UnicodeData)">
            <summary>
            Initializes index.from a UnicodeData object.
            </summary>
            <param name="ucd"></param>
        </member>
        <member name="M:Qhta.Unicode.CharFunctionIndex.Add(System.String,System.Int32)">
            <summary>
            Add a code point to the this.
            </summary>
            <param name="charFunc">Func is a single-word string</param>
            <param name="codePoint"></param>
        </member>
        <member name="M:Qhta.Unicode.CharFunctionIndex.GenerateFunction(Qhta.Unicode.CharInfo,System.Int32)">
            <summary>
            Create a short Func for a character.
            </summary>
            <param name="charInfo"></param>
            <param name="alternative">Some Functions can have alternatives</param>
            <returns></returns>
        </member>
        <member name="M:Qhta.Unicode.CharFunctionIndex.CreateDecompositionFunction(Qhta.Unicode.CharInfo,System.Int32)">
            <summary>
            Create a function for a character decomposition.
            </summary>
            <param name="charInfo"></param>
            <param name="alternative">Some Functions can have alternatives</param>
            <returns></returns>
        </member>
        <member name="T:Qhta.Unicode.CharInfo">
            <summary>
            Unicode character information.
            </summary>
        </member>
        <member name="P:Qhta.Unicode.CharInfo.CodePoint">
            <summary>
            Code point - integer value of the Unicode character converted to hexadecimal.
            </summary>
        </member>
        <member name="P:Qhta.Unicode.CharInfo.Name">
            <summary>
            Name of the character.
            </summary>
        </member>
        <member name="P:Qhta.Unicode.CharInfo.Category">
            <summary>
            General category of the character.
            </summary>
        </member>
        <member name="P:Qhta.Unicode.CharInfo.CCClass">
            <summary>
            Canonical Combining Class of the character.
            </summary>
        </member>
        <member name="P:Qhta.Unicode.CharInfo.BiDiClass">
            <summary>
            Bidirectional class of the character.
            </summary>
        </member>
        <member name="P:Qhta.Unicode.CharInfo.Decomposition">
            <summary>
            Decomposition of the character.
            </summary>
        </member>
        <member name="P:Qhta.Unicode.CharInfo.DecDigit">
            <summary>
            Corresponding decimal digit value of the character.
            </summary>
        </member>
        <member name="P:Qhta.Unicode.CharInfo.Digit">
            <summary>
            Corresponding digit value of the character.
            </summary>
        </member>
        <member name="P:Qhta.Unicode.CharInfo.NumVal">
            <summary>
            Corresponding numeric value of the character (integer or rational number).
            </summary>
        </member>
        <member name="P:Qhta.Unicode.CharInfo.BidiMirrored">
            <summary>
            Whether the character is mirrored in bidirectional text.
            </summary>
        </member>
        <member name="P:Qhta.Unicode.CharInfo.SimpleUppercaseMapping">
            <summary>
            Corresponding Uppercase character code point.
            </summary>
        </member>
        <member name="P:Qhta.Unicode.CharInfo.SimpleLowercaseMapping">
            <summary>
            Corresponding Lowercase character code point.
            </summary>
        </member>
        <member name="P:Qhta.Unicode.CharInfo.SimpleTitlecaseMapping">
            <summary>
            Corresponding Titlecase character code point.
            </summary>
        </member>
        <member name="P:Qhta.Unicode.CharInfo.Script">
            <summary>
            Optional script of the character (4-character ISO 15924 script code).
            </summary>
        </member>
        <member name="P:Qhta.Unicode.CharInfo.OldName">
            <summary>
            Optional old name
            </summary>
        </member>
        <member name="P:Qhta.Unicode.CharInfo.Aliases">
            <summary>
            Optional alias names for the character.
            </summary>
        </member>
        <member name="M:Qhta.Unicode.CharInfo.GetAllNames">
            <summary>
            Enumerates all names for the character.
            First is the primary name, then any aliases.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Qhta.Unicode.CharInfo.GetLongNames">
            <summary>
            Enumerates all names for the character.
            First is the primary name, then any aliases.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Qhta.Unicode.CharNameIndex">
            <summary>
            An index of codePoints with specific char name. Char name is a single-word string.
            </summary>
        </member>
        <member name="M:Qhta.Unicode.CharNameIndex.Initialize(Qhta.Unicode.UnicodeData)">
            <summary>
            Initializes index.from a UnicodeData object.
            </summary>
            <param name="ucd"></param>
        </member>
        <member name="M:Qhta.Unicode.CharNameIndex.AddCheck(Qhta.Unicode.CodePoint,System.String)">
            <summary>
            Add a code point to the this.
            </summary>
            <param name="charName">Name is a single-word string</param>
            <param name="codePoint"></param>
        </member>
        <member name="M:Qhta.Unicode.CharNameIndex.GenerateShortName(Qhta.Unicode.CharInfo,System.Int32)">
            <summary>
            Create a short name for a character.
            </summary>
            <param name="charInfo"></param>
            <param name="alternative">Some names can have alternatives</param>
            <returns></returns>
        </member>
        <member name="M:Qhta.Unicode.CharNameIndex.CreateDecompositionName(Qhta.Unicode.CharInfo,System.Int32)">
            <summary>
            Create a short name for a character decomposition.
            </summary>
            <param name="charInfo"></param>
            <param name="alternative">Some names can have alternatives</param>
            <returns></returns>
        </member>
        <member name="M:Qhta.Unicode.CharNameIndex.CreateShortenName(Qhta.Unicode.CharInfo,System.Int32)">
            <summary>
            Create a short name for a charInfo.
            </summary>
            <param name="charInfo"></param>
            <param name="alternative">Some names can have alternatives</param>
            <returns></returns>
        </member>
        <member name="M:Qhta.Unicode.CharNameIndex.CreateShortenName(Qhta.Unicode.CodePoint,System.String,System.Int32)">
            <summary>
            Create a short name for a long character name.
            </summary>
            <param name="longName"></param>
            <param name="codePoint"></param>
            <param name="alternative">Some names can have alternatives</param>
            <returns></returns>
        </member>
        <member name="M:Qhta.Unicode.CharNameIndex.WordsAbbreviationsComparer.Compare(System.String,System.String)">
            <summary>
            Compare two strings by lexicographical order,
            but if one string is contained in the other, the longer string goes first.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Qhta.Unicode.CharNameIndex.StringReplacementsComparer.Compare(System.String,System.String)">
            <summary>
            Compare two strings by reverse lexicographical order,
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="T:Qhta.Unicode.CodePoint">
            <summary>
            A Unicode code point.
            Contains a single integer value.
            Converts to and from hexadecimal string.
            </summary>
        </member>
        <member name="F:Qhta.Unicode.CodePoint.Value">
            <summary>
            Integer value of the Unicode character.
            </summary>
        </member>
        <member name="M:Qhta.Unicode.CodePoint.#ctor(System.Int32)">
            <summary>
            Create a code point from an integer value.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Qhta.Unicode.CodePoint.#ctor(System.String)">
            <summary>
            Create a code point from a hexadecimal string.
            </summary>
            <param name="str"></param>
        </member>
        <member name="M:Qhta.Unicode.CodePoint.ToString">
            <summary>
            Explicit conversion from CodePoint to hexadecimal string (at least four digits).
            </summary>
            <returns></returns>
        </member>
        <member name="M:Qhta.Unicode.CodePoint.ToString(System.String)">
            <summary>
            Explicit conversion from CodePoint to string with given format.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Qhta.Unicode.CodePoint.CompareTo(System.Object)">
            <summary>
            Compare two code points.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Qhta.Unicode.CodePoint.op_Implicit(Qhta.Unicode.CodePoint)~System.String">
            <summary>
            Implicit conversion from CodePoint to hexadecimal string (at least four digits).
            </summary>
            <param name="codePoint"></param>
        </member>
        <member name="M:Qhta.Unicode.CodePoint.op_Implicit(System.String)~Qhta.Unicode.CodePoint">
            <summary>
            Implicit conversion from hexadecimal string to CodePoint.
            </summary>
            <param name="str"></param>
        </member>
        <member name="M:Qhta.Unicode.CodePoint.op_Implicit(Qhta.Unicode.CodePoint)~System.Int32">
            <summary>
            Implicit conversion from CodePoint to integer.
            </summary>
            <param name="codePoint"></param>
        </member>
        <member name="M:Qhta.Unicode.CodePoint.op_Implicit(System.Int32)~Qhta.Unicode.CodePoint">
            <summary>
            Implicit conversion from integer to CodePoint.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Qhta.Unicode.CodePoint.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:Qhta.Unicode.Decomposition">
            <summary>
            Decoded Unicode decomposition.
            </summary>
        </member>
        <member name="P:Qhta.Unicode.Decomposition.Type">
            <summary>
            Gets or sets the decomposition type.
            </summary>
        </member>
        <member name="P:Qhta.Unicode.Decomposition.CodePoints">
            <summary>
            Gets or sets the code points.
            </summary>
        </member>
        <member name="M:Qhta.Unicode.Decomposition.op_Implicit(Qhta.Unicode.Decomposition)~System.String">
            <summary>
            Implicit conversion from Decomposition to string.
            </summary>
            <param name="decomposition"></param>
        </member>
        <member name="M:Qhta.Unicode.Decomposition.op_Implicit(System.String)~Qhta.Unicode.Decomposition">
            <summary>
            Implicit conversion from string to Decomposition.
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:Qhta.Unicode.Decomposition.Parse(System.String)">
            <summary>
            Parses a decomposition from a string.
            </summary>
            <param name="name"></param>
            <returns></returns>
            <exception cref="T:System.FormatException"></exception>
        </member>
        <member name="M:Qhta.Unicode.Decomposition.ToString">
            <summary>
            Converts the decomposition to a string.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Qhta.Unicode.DecompositionIndex">
            <summary>
            An index of codePoints with specific DecompositionType
            </summary>
        </member>
        <member name="M:Qhta.Unicode.DecompositionIndex.Initialize(Qhta.Unicode.UnicodeData)">
            <summary>
            Initializes index from a UnicodeData object.
            </summary>
            <param name="ucd"></param>
        </member>
        <member name="M:Qhta.Unicode.DecompositionIndex.Add(Qhta.Unicode.DecompositionType,System.Int32)">
            <summary>
            Add a code point to the index.
            </summary>
            <param name="type"></param>
            <param name="codePoint"></param>
        </member>
        <member name="T:Qhta.Unicode.DecompositionType">
            <summary>
            Unicode character decomposition type.
            </summary>
        </member>
        <member name="F:Qhta.Unicode.DecompositionType.None">
            <summary>
            Not stated
            </summary>
        </member>
        <member name="F:Qhta.Unicode.DecompositionType.Font">
            <summary>
            Font variant (for example, a blackletter form)
            </summary>
        </member>
        <member name="F:Qhta.Unicode.DecompositionType.Nobreak">
            <summary>
            No-break version of a space or hyphen
            </summary>
        </member>
        <member name="F:Qhta.Unicode.DecompositionType.Initial">
            <summary>
            Initial presentation form (Arabic)
            </summary>
        </member>
        <member name="F:Qhta.Unicode.DecompositionType.Medial">
            <summary>
            Medial presentation form (Arabic)
            </summary>
        </member>
        <member name="F:Qhta.Unicode.DecompositionType.Final">
            <summary>
            Final presentation form (Arabic)
            </summary>
        </member>
        <member name="F:Qhta.Unicode.DecompositionType.Isolated">
            <summary>
            Isolated presentation form (Arabic)
            </summary>
        </member>
        <member name="F:Qhta.Unicode.DecompositionType.Circle">
            <summary>
            Encircled form
            </summary>
        </member>
        <member name="F:Qhta.Unicode.DecompositionType.Super">
            <summary>
            Superscript form
            </summary>
        </member>
        <member name="F:Qhta.Unicode.DecompositionType.Sub">
            <summary>
            Subscript form
            </summary>
        </member>
        <member name="F:Qhta.Unicode.DecompositionType.Vertical">
            <summary>
            Vertical layout presentation form
            </summary>
        </member>
        <member name="F:Qhta.Unicode.DecompositionType.Wide">
            <summary>
            Wide (or zenkaku) compatibility character
            </summary>
        </member>
        <member name="F:Qhta.Unicode.DecompositionType.Narrow">
            <summary>
            Narrow (or hankaku) compatibility character
            </summary>
        </member>
        <member name="F:Qhta.Unicode.DecompositionType.Small">
            <summary>
            Small variant form (CNS compatibility)
            </summary>
        </member>
        <member name="F:Qhta.Unicode.DecompositionType.Square">
            <summary>
            CJK squared font variant
            </summary>
        </member>
        <member name="F:Qhta.Unicode.DecompositionType.Fraction">
            <summary>
            Vulgar fraction form
            </summary>
        </member>
        <member name="F:Qhta.Unicode.DecompositionType.Compat">
            <summary>
            Otherwise unspecified compatibility character
            </summary>
        </member>
        <member name="T:Qhta.Unicode.DictTools">
            <summary>
            Tools for working with dictionaries and lists
            </summary>
        </member>
        <member name="M:Qhta.Unicode.DictTools.LoadFromFile(Qhta.Collections.BiDiDictionary{Qhta.Unicode.CodePoint,System.String},System.String)">
            <summary>
            Load a CodePoint to String BiDiDictionary from a file
            </summary>
            <param name="dictionary"></param>
            <param name="fileName"></param>
        </member>
        <member name="M:Qhta.Unicode.DictTools.LoadFromFile(System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.Boolean)">
            <summary>
            Load a String Dictionary from a file
            </summary>
            <param name="dictionary"></param>
            <param name="fileName"></param>
            <param name="joinKeyWords">true to join words of key with underscores</param>
        </member>
        <member name="M:Qhta.Unicode.DictTools.LoadFromFile(Qhta.Collections.BiDiDictionary{System.String,System.String},System.String,System.Boolean)">
            <summary>
            Load a String BiDiDictionary from a file
            </summary>
            <param name="dictionary"></param>
            <param name="fileName"></param>
            <param name="joinKeyWords">true to join words of key with underscores</param>
        </member>
        <member name="M:Qhta.Unicode.DictTools.LoadFromFile(System.Collections.Generic.IDictionary{System.String,System.Int32},System.String)">
            <summary>
            Load a String to Int Dictionary from a file
            </summary>
            <param name="dictionary"></param>
            <param name="fileName"></param>
        </member>
        <member name="M:Qhta.Unicode.DictTools.LoadFromFile(Qhta.Collections.BiDiDictionary{System.Int32,System.String},System.String)">
            <summary>
            Load an Int to String BiDiDictionary from a file
            </summary>
            <param name="dictionary"></param>
            <param name="fileName"></param>
        </member>
        <member name="M:Qhta.Unicode.DictTools.LoadFromFile(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            Load a String List from a file
            </summary>
            <param name="list"></param>
            <param name="fileName"></param>
        </member>
        <member name="T:Qhta.Unicode.EnumHelper">
            <summary>
            Helper class for working with enums
            </summary>
        </member>
        <member name="M:Qhta.Unicode.EnumHelper.ParseEnum``1(System.String)">
            <summary>
            Parse an enum value from a string using EnumMemberAttribute or the field name
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="T:Qhta.Unicode.HashedName">
            <summary>
            A Unicode name split into separate words.
            Each word is hashed and stored in a list.
            </summary>
        </member>
        <member name="P:Qhta.Unicode.HashedName.OriginalName">
            <summary>
            Gets access to the original name.
            </summary>
        </member>
        <member name="F:Qhta.Unicode.HashedName.WordHashes">
            <summary>
            Gets access to the word hashes.
            </summary>
        </member>
        <member name="M:Qhta.Unicode.HashedName.#ctor(System.String)">
            <summary>
            Initializes a new instance of the HashedName class using original name
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:Qhta.Unicode.HashedName.ContainsWords(System.String)">
            <summary>
            Determines whether the hashed word contains the pattern.
            Wildcard '*' is allowed.
            </summary>
            <param name="pattern"></param>
            <returns></returns>
        </member>
        <member name="M:Qhta.Unicode.HashedName.Find(System.Int32,System.String)">
            <summary>
            Find the pattern in the hashed words starting from the index.
            </summary>
            <param name="fromIndex"></param>
            <param name="pattern"></param>
            <returns></returns>
        </member>
        <member name="M:Qhta.Unicode.HashedName.ContainsStringAt(System.Int32,System.String)">
            <summary>
            Determines whether the original name contains the string at the index.
            </summary>
            <param name="index"></param>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Qhta.Unicode.HashedName.ContainsHashesAt(System.Int32,System.Int32[])">
            <summary>
            Determines whether the hashed words contain the word hashes at the index.
            </summary>
            <param name="index"></param>
            <param name="wordHashes"></param>
            <returns></returns>
        </member>
        <member name="M:Qhta.Unicode.HashedName.Contains(System.String)">
            <summary>
            Determines whether the original name contains the pattern.
            </summary>
            <param name="pattern"></param>
            <returns></returns>
        </member>
        <member name="M:Qhta.Unicode.HashedName.StartsWith(System.String)">
            <summary>
            Determines whether the original name starts with the pattern.
            </summary>
            <param name="pattern"></param>
            <returns></returns>
        </member>
        <member name="M:Qhta.Unicode.HashedName.StartsEnds(System.String)">
            <summary>
            Determines whether the original name ends with the pattern.
            </summary>
            <param name="pattern"></param>
            <returns></returns>
        </member>
        <member name="M:Qhta.Unicode.HashedName.IsLike(System.String)">
            <summary>
            Determines whether the original name is like the pattern.
            Wildcard '*' is allowed.
            </summary>
            <param name="pattern"></param>
            <returns></returns>
        </member>
        <member name="M:Qhta.Unicode.HashedName.op_Implicit(Qhta.Unicode.HashedName)~System.String">
            <summary>
            Implicit conversion from HashedName to string.
            </summary>
            <param name="hashedName"></param>
        </member>
        <member name="M:Qhta.Unicode.HashedName.op_Implicit(System.String)~Qhta.Unicode.HashedName">
            <summary>
            Implicit conversion from string to HashedName.
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:Qhta.Unicode.HashedName.ToString">
            <summary>
            Returns the original name.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Qhta.Unicode.NameAliasType">
            <summary>
            A Unicode type of name alias
            </summary>
        </member>
        <member name="F:Qhta.Unicode.NameAliasType.Control">
            <summary>
            ISO 6429 names for C0 and C1 control functions, and other commonly occurring names for control codes
            </summary>
        </member>
        <member name="F:Qhta.Unicode.NameAliasType.Abbreviation">
            <summary>
            Commonly occurring abbreviations (or acronyms) for control codes, format characters, spaces, and variation selectors
            </summary>
        </member>
        <member name="F:Qhta.Unicode.NameAliasType.Alternate">
            <summary>
            A few widely used alternate names for format characters
            </summary>
        </member>
        <member name="F:Qhta.Unicode.NameAliasType.Correction">
            <summary>
            Corrections for serious problems in the character names
            </summary>
        </member>
        <member name="F:Qhta.Unicode.NameAliasType.Figment">
            <summary>
            Several documented labels for C1 control code points which were never actually approved in any standard
            </summary> 
        </member>
        <member name="T:Qhta.Unicode.NameAlias">
            <summary>
            A Unicode name alias. Contains a code point and an alias name.
            </summary>
        </member>
        <member name="P:Qhta.Unicode.NameAlias.CodePoint">
            <summary>
            The code point of the character
            </summary>
        </member>
        <member name="P:Qhta.Unicode.NameAlias.Name">
            <summary>
            
            </summary>
        </member>
        <member name="P:Qhta.Unicode.NameAlias.Type">
            <summary>
            The type of the alias
            </summary>
        </member>
        <member name="T:Qhta.Unicode.NamedBlock">
            <summary>
            Defined a named block used to parse ucd data
            </summary>
        </member>
        <member name="P:Qhta.Unicode.NamedBlock.Range">
            <summary>
            String representation of the Start and End code points in the block
            </summary>
        </member>
        <member name="P:Qhta.Unicode.NamedBlock.Start">
            <summary>
            First code point in the block.
            </summary>
        </member>
        <member name="P:Qhta.Unicode.NamedBlock.End">
            <summary>
            Last code point in the block. Can be the same as Start
            </summary>
        </member>
        <member name="P:Qhta.Unicode.NamedBlock.Name">
            <summary>
            Name of the block.
            </summary>
        </member>
        <member name="P:Qhta.Unicode.NamedBlock.KeyString">
            <summary>
            A key string of the CodePoint description used to identify the block
            </summary>
        </member>
        <member name="P:Qhta.Unicode.NamedBlock.BlockType">
            <summary>
            The type of block.
            </summary>
        </member>
        <member name="M:Qhta.Unicode.NamedBlock.Contains(Qhta.Unicode.CodePoint)">
            <summary>
            Check if a code point is in the block
            </summary>
            <param name="cp"></param>
            <returns></returns>
        </member>
        <member name="M:Qhta.Unicode.NamedBlock.Contains(Qhta.Unicode.CodePoint,System.String)">
            <summary>
            Check if a code point is in the block
            </summary>
            <param name="cp"></param>
            <param name="description"></param>
            <returns></returns>
        </member>
        <member name="T:Qhta.Unicode.NamedBlocks">
            <summary>
            A list of named blocks. Defines a LoadFromFile method to load from a file.
            </summary>
        </member>
        <member name="M:Qhta.Unicode.NamedBlocks.LoadFromFile(System.String)">
            <summary>
            Load a list of named blocks from a file
            </summary>
            <param name="fileName"></param>
        </member>
        <member name="M:Qhta.Unicode.NamedBlocks.TryGetValue(Qhta.Unicode.CodePoint,System.String,Qhta.Unicode.NamedBlock@)">
            <summary>
            Try to get a named block by code point and description
            </summary>
            <param name="codePoint"></param>
            <param name="description"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:Qhta.Unicode.NameWordIndex">
            <summary>
            An index of Unicode character name separate words to code points.
            </summary>
        </member>
        <member name="M:Qhta.Unicode.NameWordIndex.Initialize(Qhta.Unicode.UnicodeData)">
            <summary>
            Initializes index from a UnicodeData object.
            </summary>
            <param name="ucd"></param>
        </member>
        <member name="M:Qhta.Unicode.NameWordIndex.Add(System.String,System.Int32)">
            <summary>
            Add a name words to the index.
            </summary>
            <param name="name"></param>
            <param name="codePoint"></param>
        </member>
        <member name="M:Qhta.Unicode.NameWordIndex.LoadAliases(Qhta.Unicode.UnicodeData)">
            <summary>
            Load aliases from CharInfo entries into the index.
            </summary>
            <param name="ucd"></param>
        </member>
        <member name="M:Qhta.Unicode.NameWordIndex.Search(System.String)">
            <summary>
            Searches for code points by name words.
            </summary>
            <param name="pattern"></param>
            <returns></returns>
        </member>
        <member name="M:Qhta.Unicode.NameWordIndex.Contains(System.String)">
            <summary>
            Check if the index contains a word.
            </summary>
            <param name="word"></param>
            <returns></returns>
        </member>
        <member name="T:Qhta.Unicode.ScriptIndex">
            <summary>
            An index of codePoints with specific script. Script is a 4-character ISO 15924 script code.
            </summary>
        </member>
        <member name="M:Qhta.Unicode.ScriptIndex.Initialize(Qhta.Unicode.UnicodeData)">
            <summary>
            Initializes index from a UnicodeData object.
            </summary>
            <param name="ucd"></param>
        </member>
        <member name="M:Qhta.Unicode.ScriptIndex.Add(System.String,System.Int32)">
            <summary>
            Add a code point to the index.
            </summary>
            <param name="script">Script is a 4-character ISO 15924 script code.</param>
            <param name="codePoint"></param>
        </member>
        <member name="T:Qhta.Unicode.UcdBlock">
            <summary>
            Unicode blocks enumeration
            </summary>
        </member>
        <member name="M:Qhta.Unicode.UcdBlock.#ctor(System.String,Qhta.Unicode.CodePoint,Qhta.Unicode.CodePoint)">
            <summary>
            Unicode blocks enumeration
            </summary>
        </member>
        <member name="T:Qhta.Unicode.UcdCategory">
            <summary>
            Unicode character category. The values are the same as UnicodeCategory in System.Globalization.
            </summary>
        </member>
        <member name="F:Qhta.Unicode.UcdCategory.Lu">
            <summary>Uppercase letter.</summary>
        </member>
        <member name="F:Qhta.Unicode.UcdCategory.Ll">
            <summary>Lowercase letter.</summary>
        </member>
        <member name="F:Qhta.Unicode.UcdCategory.Lt">
            <summary>Titlecase letter.</summary>
        </member>
        <member name="F:Qhta.Unicode.UcdCategory.Lm">
            <summary>Modifier letter character, which is freestanding spacing character that indicates modifications of a preceding letter.</summary>
        </member>
        <member name="F:Qhta.Unicode.UcdCategory.Lo">
            <summary>Letter that is not an uppercase letter, a lowercase letter, a titlecase letter, or a modifier letter.</summary>
        </member>
        <member name="F:Qhta.Unicode.UcdCategory.Mn">
            <summary>Non-spacing character that indicates modifications of a base character.</summary>
        </member>
        <member name="F:Qhta.Unicode.UcdCategory.Mc">
            <summary>Spacing character that indicates modifications of a base character and affects the width of the glyph for that base character.</summary>
        </member>
        <member name="F:Qhta.Unicode.UcdCategory.Me">
            <summary>Enclosing mark character, which is a non-spacing combining character that surrounds all previous characters up to and including a base character.</summary>
        </member>
        <member name="F:Qhta.Unicode.UcdCategory.Nd">
            <summary>Decimal digit character, that is, a character in the range 0 through 9.</summary>
        </member>
        <member name="F:Qhta.Unicode.UcdCategory.Nl">
            <summary>Number represented by a letter, instead of a decimal digit, for example, the Roman numeral for five, which is "V". The indicator is</summary>
        </member>
        <member name="F:Qhta.Unicode.UcdCategory.No">
            <summary>Number that is neither a decimal digit nor a letter number, for example, the fraction 1/2. The indicator is</summary>
        </member>
        <member name="F:Qhta.Unicode.UcdCategory.Zs">
            <summary>Space character, which has no glyph but is not a control or format character.</summary>
        </member>
        <member name="F:Qhta.Unicode.UcdCategory.Zl">
            <summary>Character that is used to separate lines of text.</summary>
        </member>
        <member name="F:Qhta.Unicode.UcdCategory.Zp">
            <summary>Character used to separate paragraphs.</summary>
        </member>
        <member name="F:Qhta.Unicode.UcdCategory.Cc">
            <summary>Control code character, with a Unicode value of U+007F or in the range U+0000 through U+001F or U+0080 through U+009F.</summary>
        </member>
        <member name="F:Qhta.Unicode.UcdCategory.Cf">
            <summary>Format character that affects the layout of text or the operation of text processes, but is not normally rendered.</summary>
        </member>
        <member name="F:Qhta.Unicode.UcdCategory.Cs">
            <summary>High surrogate or a low surrogate character. Surrogate code values are in the range U+D800 through U+DFFF.</summary>
        </member>
        <member name="F:Qhta.Unicode.UcdCategory.Co">
            <summary>Private-use character, with a Unicode value in the range U+E000 through U+F8FF.</summary>
        </member>
        <member name="F:Qhta.Unicode.UcdCategory.Pc">
            <summary>Connector punctuation character that connects two characters.</summary>
        </member>
        <member name="F:Qhta.Unicode.UcdCategory.Pd">
            <summary>Dash or hyphen character.</summary>
        </member>
        <member name="F:Qhta.Unicode.UcdCategory.Ps">
            <summary>Opening character of one of the paired punctuation marks, such as parentheses, square brackets, and braces.</summary>
        </member>
        <member name="F:Qhta.Unicode.UcdCategory.Pe">
            <summary>Closing character of one of the paired punctuation marks, such as parentheses, square brackets, and braces.</summary>
        </member>
        <member name="F:Qhta.Unicode.UcdCategory.Pi">
            <summary>Opening or initial quotation mark character.</summary>
        </member>
        <member name="F:Qhta.Unicode.UcdCategory.Pf">
            <summary>Closing or final quotation mark character.</summary>
        </member>
        <member name="F:Qhta.Unicode.UcdCategory.Po">
            <summary>Punctuation character that is not a connector, a dash, open punctuation, close punctuation, an initial quote, or a final quote.</summary>
        </member>
        <member name="F:Qhta.Unicode.UcdCategory.Sm">
            <summary>Mathematical symbol character, such as "+" or "= ".</summary>
        </member>
        <member name="F:Qhta.Unicode.UcdCategory.Sc">
            <summary>Currency symbol character.</summary>
        </member>
        <member name="F:Qhta.Unicode.UcdCategory.Sk">
            <summary>Modifier symbol character, which indicates modifications of surrounding characters. For example, the fraction slash indicates that the number to the left is the numerator and the number to the right is the denominator. The indicator is</summary>
        </member>
        <member name="F:Qhta.Unicode.UcdCategory.So">
            <summary>Symbol character that is not a mathematical symbol, a currency symbol or a modifier symbol.</summary>
        </member>
        <member name="F:Qhta.Unicode.UcdCategory.Cn">
            <summary>Character that is not assigned to any Unicode category.</summary>
        </member>
        <member name="T:Qhta.Unicode.UnicodeData">
            <summary>
            Unicode character data singleton class.
            </summary>
        </member>
        <member name="F:Qhta.Unicode.UnicodeData.NameIndex">
            <summary>
            Original name index
            </summary>
        </member>
        <member name="F:Qhta.Unicode.UnicodeData.NameWordIndex">
            <summary>
            Name words index
            </summary>
        </member>
        <member name="F:Qhta.Unicode.UnicodeData.CharNameIndex">
            <summary>
            Short name index
            </summary>
        </member>
        <member name="F:Qhta.Unicode.UnicodeData.CharFunctionIndex">
            <summary>
            Short name index
            </summary>
        </member>
        <member name="F:Qhta.Unicode.UnicodeData.CategoryIndex">
            <summary>
            Category index
            </summary>
        </member>
        <member name="F:Qhta.Unicode.UnicodeData.DecompositionIndex">
            <summary>
            Index of decomposition types.
            </summary>
        </member>
        <member name="F:Qhta.Unicode.UnicodeData.ScriptCodes">
            <summary>
            Index of Scripts
            </summary>
        </member>
        <member name="F:Qhta.Unicode.UnicodeData.ScriptIndex">
            <summary>
            Index of Scripts
            </summary>
        </member>
        <member name="F:Qhta.Unicode.UnicodeData.BlockIndex">
            <summary>
            Index of Blocks
            </summary>
        </member>
        <member name="P:Qhta.Unicode.UnicodeData.NamedBlocks">
            <summary>
            Named Blocks used to parse UnicodeData
            </summary>
        </member>
        <member name="M:Qhta.Unicode.UnicodeData.#ctor">
            <summary>
            Private constructor for the singleton instance.
            </summary>
        </member>
        <member name="P:Qhta.Unicode.UnicodeData.Instance">
            <summary>
            Singleton instance of UnicodeData.
            </summary>
        </member>
        <member name="M:Qhta.Unicode.UnicodeData.Initialize">
            <summary>
            Initializes the UnicodeData object by reading UnicodeData.txt and NameAliases.txt files.
            </summary>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:Qhta.Unicode.UnicodeData.NullOrNonempty(System.String)">
            <summary>
            Returns null if the string is empty, otherwise returns the string.
            Needed for the UnicodeData parsing.
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Qhta.Unicode.UnicodeData.LoadAliases(System.String)">
            <summary>
            Loads aliases from a file. Updates NameIndex and NameWordIndex.
            </summary>
            <param name="filePath"></param>
            <returns></returns>
        </member>
        <member name="M:Qhta.Unicode.UnicodeData.LoadScripts(System.String)">
            <summary>
            Loads aliases from a file. Updates NameIndex and NameWordIndex.
            </summary>
            <param name="filePath"></param>
            <returns></returns>
        </member>
        <member name="M:Qhta.Unicode.UnicodeData.LoadBlocks(System.String)">
            <summary>
            Loads Unicode blocks from a file. Updates BlockIndex.
            </summary>
            <param name="filePath"></param>
            <returns></returns>
        </member>
        <member name="M:Qhta.Unicode.UnicodeData.DownloadFileName(System.String)">
            <summary>
            Downloads a file from unicode.org if it does not exist in the current directory.
            </summary>
            <param name="fileName"></param>
        </member>
        <member name="M:Qhta.Unicode.UnicodeData.DownloadFileNameAsync(System.String)">
            <summary>
            Downloads a file from unicode.org if it does not exist in the current directory.
            </summary>
            <param name="fileName"></param>
        </member>
        <member name="M:Qhta.Unicode.UnicodeData.SearchInNames(System.String)">
            <summary>
            Searches for code points by name.
            If pattern does not contain '*', searches the name index for exact match.
            If pattern contains '*', first searches the NameWordIndex for all words.
            When no results are found, searches all names using IsLike function on pattern
            </summary>
            <param name="pattern"></param>
            <returns></returns>
        </member>
        <member name="M:Qhta.Unicode.UnicodeData.SearchInCategories(System.String)">
            <summary>
            Searches for code points by categories.
            Pattern can be a list of pattern items separated by '|'.
            Pattern is a two-letter string or one-letter string.
            If a pattern is a single letter or a two-letter string and the second letter is '*', all categories starting with the first letter are searched.
            </summary>
            <param name="pattern"></param>
            <returns></returns>
        </member>
        <member name="M:Qhta.Unicode.UnicodeData.SearchInCategories2(System.String)">
            <summary>
            Searches for code points by categories. Pattern is a two-letter string and can contain '*' as the second char.
            Pattern can also be a single letter, in which case all categories starting with that letter are searched
            </summary>
            <param name="pattern"></param>
            <returns></returns>
        </member>
        <member name="M:Qhta.Unicode.UnicodeData.SearchInDecomposition(Qhta.Unicode.DecompositionType)">
            <summary>
            Searches for code points by decomposition type
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Qhta.Unicode.UnicodeData.SearchInScripts(System.String)">
            <summary>
            Searches for code points by script code
            </summary>
            <param name="script"></param>
            <returns></returns>
        </member>
    </members>
</doc>
