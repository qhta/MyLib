<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Qhta.WPF.Utils</name>
    </assembly>
    <members>
        <member name="T:Qhta.WPF.Utils.ActionHolder">
            <summary>
            A class that can hold and execute an action.
            </summary>
        </member>
        <member name="P:Qhta.WPF.Utils.ActionHolder.Action">
            <summary>
            Action to hold and execute.
            </summary>
        </member>
        <member name="M:Qhta.WPF.Utils.ActionHolder.Execute">
            <summary>
            Executes the action.
            </summary>
        </member>
        <member name="T:Qhta.WPF.Utils.ArrayGraphics">
            <summary>
            Helper class to handle a bitmap (get/set array of pixels).
            </summary>
        </member>
        <member name="M:Qhta.WPF.Utils.ArrayGraphics.GetColorArray(System.Windows.Media.Imaging.BitmapSource)">
            <summary>
            Converts <see cref="T:System.Windows.Media.Imaging.BitmapSource"/> to array of pixels.
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Qhta.WPF.Utils.ArrayGraphics.SetColorArray(System.Windows.Media.Imaging.WriteableBitmap,System.Windows.Media.Color[0:,0:])">
            <summary>
            Sets array of pixels to <see cref="T:System.Windows.Media.Imaging.WriteableBitmap"/>
            </summary>
            <param name="target"></param>
            <param name="pixels"></param>
        </member>
        <member name="T:Qhta.WPF.Utils.BackgroundBehavior">
            <summary>
            A class to define background behavior. 
            It enables a control to observe target object "Waiting" boolean property and display a waiting cursor.
            Target object must implement <see cref="T:System.ComponentModel.INotifyPropertyChanged"/> interface.
            There are two properties:
            <list type="table">
              <item><term>Target: object</term><description>Declares the observed object</description></item>
              <item><term>EnableWaitingCursor: bool</term><description>Enables observing control to display waiting cursor.</description></item>
            </list>
            </summary>
        </member>
        <member name="M:Qhta.WPF.Utils.BackgroundBehavior.GetTarget(System.Windows.DependencyObject)">
            <summary>
            Getter for Target property.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Qhta.WPF.Utils.BackgroundBehavior.SetTarget(System.Windows.DependencyObject,System.Object)">
            <summary>
            Setter for Target property.
            </summary>
            <param name="obj"></param>
            <param name="value"></param>
        </member>
        <member name="F:Qhta.WPF.Utils.BackgroundBehavior.TargetProperty">
            <summary>
            Dependency property to store Target property.
            </summary>
        </member>
        <member name="M:Qhta.WPF.Utils.BackgroundBehavior.GetEnableWaitingCursor(System.Windows.DependencyObject)">
            <summary>
            Getter for EnableWaitingCursor property.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Qhta.WPF.Utils.BackgroundBehavior.SetEnableWaitingCursor(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Setter for EnableWaitingCursor property.
            </summary>
            <param name="obj"></param>
            <param name="value"></param>
        </member>
        <member name="F:Qhta.WPF.Utils.BackgroundBehavior.EnableWaitingCursorProperty">
            <summary>
            Dependency property to store EnableWaitingCursor property.
            </summary>
        </member>
        <member name="M:Qhta.WPF.Utils.BackgroundBehavior.EnableWaitingCursorPropertyChangedCallback(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Callback method invoked when EnableWaitingCursor property was changed.
            If it is true, then it adds a handler to observing control Loaded event.
            </summary>
            <param name="obj"></param>
            <param name="args"></param>
        </member>
        <member name="M:Qhta.WPF.Utils.BackgroundBehavior.Control_Loaded(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handler for observing control Loaded event. 
            Invokes an EnableWaitingCursor method for the control with its EnabledWaitingCursor property as an argument.
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="M:Qhta.WPF.Utils.BackgroundBehavior.EnableWaitingCursor(System.Windows.Controls.Control,System.Boolean)">
            <summary>
            A method that adds or removes a control to internal Observers dictionary.
            </summary>
            <param name="control"></param>
            <param name="enable"></param>
        </member>
        <member name="M:Qhta.WPF.Utils.BackgroundBehavior.TargetObject_PropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            A method to handle target object PropertyChanged event. It observes "Waiting" property of the target object.
            If it is set to true, then it sets each observing control cursor to Wait cursor.
            If it is set to false, then it sets each observing control cursor to Arrow cursor.
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="T:Qhta.WPF.Utils.BackgroundBehavior.Observers">
            <summary>
            Helper definition for Observers hash set type.
            </summary>
        </member>
        <member name="F:Qhta.WPF.Utils.BackgroundBehavior.observerMapping">
            <summary>
            Internal dictionary assigning a hash set of observing controls to each target object.
            </summary>
        </member>
        <member name="T:Qhta.WPF.Utils.DummyDO">
            <summary>
            Helper class that defines dummy object used in <see cref="T:Qhta.WPF.Utils.BindingEvaluator"/>.
            </summary>
        </member>
        <member name="P:Qhta.WPF.Utils.DummyDO.Value">
            <summary>
            Dummy Value property
            </summary>
        </member>
        <member name="F:Qhta.WPF.Utils.DummyDO.ValueProperty">
            <summary>
            Dependency property to store Value property.
            </summary>
        </member>
        <member name="T:Qhta.WPF.Utils.BindingEvaluator">
            <summary>
            Utility class to evaluate this Binding value. Defines GetValue methods.
            It is used in ClipboardUtils.
            </summary>
        </member>
        <member name="M:Qhta.WPF.Utils.BindingEvaluator.GetValue(System.Windows.Data.Binding)">
            <summary>
            Gets dummy object Value property for this Binding.
            </summary>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Qhta.WPF.Utils.BindingEvaluator.GetValue(System.Windows.Data.Binding,System.Object)">
            <summary>
            Gets dummy object value for this Binding using source object.
            </summary>
            <param name="b"></param>
            <param name="sourceObject"></param>
            <returns></returns>
        </member>
        <member name="T:Qhta.WPF.Utils.BindingExpressionUtils">
            <summary>
            Utility class for BindingExpressions. It defines GetString and RefreshBinding methods.
            </summary>
        </member>
        <member name="M:Qhta.WPF.Utils.BindingExpressionUtils.GetString(System.Windows.Data.BindingExpressionBase)">
            <summary>
            Gets a string value from this <see cref="T:System.Windows.Data.BindingExpressionBase"/> expression DataItem property.
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:Qhta.WPF.Utils.BindingExpressionUtils.RefreshBinding(System.Windows.DependencyObject,System.Windows.DependencyProperty,System.Object)">
            <summary>
            Creates a new <see cref="T:System.Windows.Data.BindingExpression"/> for the specific property of this object 
            </summary>
            <param name="obj">Must be a dependency object</param>
            <param name="property">Must be a dependency property</param>
            <param name="newDataItem">Defines source for new binding</param>
            <returns></returns>
        </member>
        <member name="T:Qhta.WPF.Utils.BorderLine">
            <summary>
            A helper class that draws a border line adorner for an UI element.
            </summary>
        </member>
        <member name="M:Qhta.WPF.Utils.BorderLine.#ctor(System.Windows.UIElement)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="adornedElement"></param>
        </member>
        <member name="P:Qhta.WPF.Utils.BorderLine.Side">
            <summary>
            Defines a side of the element at which the border line is drawn.
            </summary>
        </member>
        <member name="F:Qhta.WPF.Utils.BorderLine.SideProperty">
            <summary>
            Dependency property to store Side property. Note: it is declared with "DrawAt" name.
            </summary>
        </member>
        <member name="M:Qhta.WPF.Utils.BorderLine.OnRender(System.Windows.Media.DrawingContext)">
            <summary>
            Render event handling method that draws a line at the declared side of the element.
            </summary>
            <param name="drawingContext"></param>
        </member>
        <member name="T:Qhta.WPF.Utils.BrushUtils">
            <summary>
            Brush utility class that checks if the brush is null or empty.
            </summary>
        </member>
        <member name="M:Qhta.WPF.Utils.BrushUtils.IsNullOrEmpty(System.Windows.Media.Brush)">
            <summary>
            Checks if the brush is null or empty. 
            "Empty" brush is a solid color brush with Alpha component set to 0.
            </summary>
            <param name="brush"></param>
            <returns></returns>
        </member>
        <member name="T:Qhta.WPF.Utils.ClipboardUtils">
            <summary>
            Utility class that contains multiple method to handle clipboard operations.
            </summary>
        </member>
        <member name="M:Qhta.WPF.Utils.ClipboardUtils.CopyToClipboard(Qhta.WPF.Utils.IClipboardMate)">
            <summary>
            Copies contents of the source object to the clipboard.
            Source object must implement <see cref="T:Qhta.WPF.Utils.IClipboardMate"/> interface.
            The method first checks whether the source object can copy content in any data format.
            Then it gets data objects array and not null objects are copied to the clipboard.
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Qhta.WPF.Utils.ClipboardUtils.CopyToClipboard(System.Windows.DataObject)">
            <summary>
            Helper method to copy data object to clipboard.
            If the data object contains EnhancedMetafile data format, then its intPtr is copied to clipboard.
            Otherwise simple copy is performed.
            </summary>
            <param name="dataObject"></param>
        </member>
        <member name="M:Qhta.WPF.Utils.ClipboardUtils.CopyToClipboard(System.Windows.UIElement)">
            <summary>
            Copies UI element as rendered bitmap to the clipboard.
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:Qhta.WPF.Utils.ClipboardUtils.MakeRenderTargetBitmap(System.Windows.UIElement)">
            <summary>
            Helper method to create a render bitmap of the UI element.
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:Qhta.WPF.Utils.ClipboardUtils.MakeRenderTargetXAML(System.Windows.UIElement)">
            <summary>
            Helper method to create a XAML string of the UI element.
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:Qhta.WPF.Utils.ClipboardUtils.CopyToClipboard(System.Windows.Controls.DataGrid)">
            <summary>
            Copies data grid content to clipboard as an HTML table.
            </summary>
            <param name="dataGrid"></param>
            <returns></returns>
        </member>
        <member name="M:Qhta.WPF.Utils.ClipboardUtils.MakeHtml(System.Windows.Controls.DataGrid,System.String@)">
            <summary>
            Helper method that creates HTML table string of the data grid.
            Emits plain text as the output parameter.
            </summary>
            <param name="dataGrid"></param>
            <param name="plainText"></param>
            <returns></returns>
        </member>
        <member name="M:Qhta.WPF.Utils.ClipboardUtils.StripAttributes(System.String,System.String[])">
            <summary>
            Strips attributes from the source string.
            </summary>
            <param name="srs"></param>
            <param name="attributes"></param>
            <returns></returns>
        </member>
        <member name="M:Qhta.WPF.Utils.ClipboardUtils.ReplaceAttribute(System.String,System.String,System.String)">
            <summary>
            Replaces atrribute value with a new value.
            </summary>
            <param name="srs"></param>
            <param name="attributeName"></param>
            <param name="replacementValue"></param>
            <returns></returns>
        </member>
        <member name="M:Qhta.WPF.Utils.ClipboardUtils.ReplaceAttribute(System.String,System.String,System.String,System.String)">
            <summary>
            Replaces a specific attribute value with a new value.
            </summary>
            <param name="srs"></param>
            <param name="attributeName"></param>
            <param name="attributeValue"></param>
            <param name="replacementValue"></param>
            <returns></returns>
        </member>
        <member name="M:Qhta.WPF.Utils.ClipboardUtils.GetFileName(System.Uri)">
            <summary>
            Gets a filename from the Uri string.
            </summary>
            <param name="uri"></param>
            <returns></returns>
        </member>
        <member name="M:Qhta.WPF.Utils.ClipboardUtils.SaveToDisk(System.Windows.Xps.Packaging.XpsFont,System.String)">
            <summary>
            Saves XpsFont to the file.
            </summary>
            <param name="font"></param>
            <param name="path"></param>
        </member>
        <member name="F:Qhta.WPF.Utils.ClipboardUtils.Header">
            <summary>      
            The string contains index references to  other spots in the string, so we need placeholders so we can compute the  offsets. <br/>      
            The  <![CDATA[<<<<<<<]]>_ strings are just placeholders.  We'll back-patch them actual values afterwards. <br/>      
            The string layout  (<![CDATA[<<<]]>) also ensures that it can't appear in the body  of the html because the <![CDATA[<]]> <br/>      
            character must be escaped. <br/>      
            </summary>      
        </member>
        <member name="F:Qhta.WPF.Utils.ClipboardUtils.StartFragment">
            <summary>      
            html comment to point the beginning of  html fragment      
            </summary>      
        </member>
        <member name="F:Qhta.WPF.Utils.ClipboardUtils.EndFragment">
            <summary>      
            html comment to point the end of html  fragment      
            </summary>      
        </member>
        <member name="F:Qhta.WPF.Utils.ClipboardUtils._byteCount">
            <summary>      
            Used to calculate characters byte count  in UTF-8      
            </summary>      
        </member>
        <member name="M:Qhta.WPF.Utils.ClipboardUtils.CreateHtmlDataObject(System.String,System.String)">
            <summary>      
            Create <see  cref="T:System.Windows.DataObject"/> with given html and plain-text ready to be  used for clipboard or drag and drop.<br/>      
            Handle missing  <![CDATA[<html>]]> tags, specified startend segments and Unicode  characters.      
            </summary>      
            <remarks>      
            <para>      
            Windows Clipboard works with UTF-8  Unicode encoding while .NET strings use with UTF-16 so for clipboard to  correctly      
            decode Unicode string added to it from  .NET we needs to be re-encoded it using UTF-8 encoding.      
            </para>      
            <para>      
            Builds the CF_HTML header correctly for  all possible HTMLs<br/>      
            If given html contains start/end  fragments then it will use them in the header:      
             <code><![CDATA[<html><body><!--StartFragment-->hello  <b>world</b><!--EndFragment--></body></html>]]></code>      
            If given html contains html/body tags  then it will inject start/end fragments to exclude html/body tags:      
             <code><![CDATA[<html><body>hello  <b>world</b></body></html>]]></code>      
            If given html doesn't contain html/body  tags then it will inject the tags and start/end fragments properly:      
            <code><![CDATA[hello  <b>world</b>]]></code>      
            In all cases creating a proper CF_HTML  header:<br/>      
            <code>      
            <![CDATA[      
            Version:1.0      
            StartHTML:000000177      
            EndHTML:000000329      
            StartFragment:000000277      
            EndFragment:000000295      
            StartSelection:000000277      
            EndSelection:000000277      
            <!DOCTYPE HTML PUBLIC  "-//W3C//DTD HTML 4.0 Transitional//EN">      
             <html><body><!--StartFragment-->hello  <b>world</b><!--EndFragment--></body></html>      
            ]]>      
            </code>      
            See format specification here: [http://msdn.microsoft.com/library/default.asp?url=/workshop/networking/clipboard/htmlclipboard.asp][9]      
            </para>      
            </remarks>      
            <param name="html">a  html fragment</param>      
            <param  name="plainText">the plain text</param>      
        </member>
        <member name="M:Qhta.WPF.Utils.ClipboardUtils.CopyToClipboard(System.String,System.String)">
            <summary>      
            Clears clipboard and sets the given  HTML and plain text fragment to the clipboard, providing additional  meta-information for HTML.<br/>      
            See <see  cref="M:Qhta.WPF.Utils.ClipboardUtils.CreateHtmlDataObject(System.String,System.String)"/> for HTML fragment details.<br/>      
            </summary>      
            <example>      
             ClipboardHelper.CopyToClipboard("Hello <b>World</b>",  "Hello World");      
            </example>      
            <param name="html">a  html fragment</param>      
            <param  name="plainText">the plain text</param>      
        </member>
        <member name="M:Qhta.WPF.Utils.ClipboardUtils.GetHtmlDataString(System.String)">
            <summary>      
            Generate HTML fragment data string with  header that is required for the clipboard.      
            </summary>      
            <param name="html">the  html to generate for</param>      
            <returns>the resulted  string</returns>      
        </member>
        <member name="M:Qhta.WPF.Utils.ClipboardUtils.GetByteCount(System.Text.StringBuilder,System.Int32,System.Int32)">
            <summary>      
            Calculates the number of bytes produced  by encoding the string in the string builder in UTF-8 and not .NET default  string encoding.      
            </summary>      
            <param name="sb">the  string builder to count its string</param>      
            <param  name="start">optional: the start index to calculate from (default  - start of string)</param>      
            <param  name="end">optional: the end index to calculate to (default - end  of string)</param>      
            <returns>the number of bytes  required to encode the string in UTF-8</returns>      
        </member>
        <member name="M:Qhta.WPF.Utils.ClipboardUtils.OpenClipboard(System.IntPtr)">
            <summary>
            Interop method to open the clipboard.
            </summary>
            <param name="hWndNewOwner"></param>
            <returns></returns>
        </member>
        <member name="M:Qhta.WPF.Utils.ClipboardUtils.EmptyClipboard">
            <summary>
            Interop method to empty the clipboard.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Qhta.WPF.Utils.ClipboardUtils.SetClipboardData(System.UInt32,System.IntPtr)">
            <summary>
            Interop method to set the clipboard data.
            </summary>
            <param name="uFormat"></param>
            <param name="hMem"></param>
            <returns></returns>
        </member>
        <member name="M:Qhta.WPF.Utils.ClipboardUtils.CloseClipboard">
            <summary>
            Interop method to close the clipboard.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Qhta.WPF.Utils.ClipboardUtils.CopyEnhMetaFile(System.IntPtr,System.IntPtr)">
            <summary>
            Interop method to copy enhanced metafile to the clipboard.
            </summary>
            <param name="hemfSrc"></param>
            <param name="hNULL"></param>
            <returns></returns>
        </member>
        <member name="M:Qhta.WPF.Utils.ClipboardUtils.DeleteEnhMetaFile(System.IntPtr)">
            <summary>
            Interop method to delete enhanced metafile.
            </summary>
            <param name="hemf"></param>
            <returns></returns>
        </member>
        <member name="M:Qhta.WPF.Utils.ClipboardUtils.CopyToClipboard(System.Windows.Controls.ListView)">
            <summary>
            Copies ListView content to the clipboard.
            If the ListView implements <see cref="T:Qhta.WPF.Utils.IClipboardMate"/> interface, then it is used.
            Otherwise it copies content as HTML table string.
            </summary>
            <param name="listView"></param>
            <returns></returns>
        </member>
        <member name="T:Qhta.WPF.Utils.Comparator">
            <summary>
            Helper class to sort bindings.
            </summary>
        </member>
        <member name="M:Qhta.WPF.Utils.Comparator.Compare(System.Object,System.Object)">
            <summary>
            Compares to values gets from object x and y using binding.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="T:Qhta.WPF.Utils.IClipboardMate">
            <summary>
            Interface that defines CanCopy and CopyToClipboard funtions.
            </summary>
        </member>
        <member name="M:Qhta.WPF.Utils.IClipboardMate.CanCopy(System.String[]@)">
            <summary>
            Specifies whether the object can copy its content to clipboard using any of the specified data formats.
            </summary>
            <param name="dataFormats"></param>
            <returns></returns>
        </member>
        <member name="M:Qhta.WPF.Utils.IClipboardMate.CopyToClipboard(System.String[])">
            <summary>
            Generates DataObject array with content to copy do clipboard using the specified data formats.
            Some of the items can be null.
            </summary>
            <param name="dataFormats"></param>
            <returns></returns>
        </member>
        <member name="T:Qhta.WPF.Utils.CollectionViewBehavior">
            <summary>
            Defines <see cref="F:Qhta.WPF.Utils.CollectionViewBehavior.EnableCollectionSynchronizationProperty"/> to help establish synchronized binding 
            between CollectionView and Collection which has thread-safe operations.
            </summary>
            <summary>
            CollectionViewBehavior
            </summary>
        </member>
        <member name="M:Qhta.WPF.Utils.CollectionViewBehavior.#cctor">
            <summary>
            Static constructor that initializes registering of collection and collection view.
            </summary>
        </member>
        <member name="M:Qhta.WPF.Utils.CollectionViewBehavior.GetEnableCollectionSynchronization(System.Windows.DependencyObject)">
            <summary>
            Getter for EnableCollectionSynchronization property.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Qhta.WPF.Utils.CollectionViewBehavior.SetEnableCollectionSynchronization(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Setter for EnableCollectionSynchronization property.
            </summary>
            <param name="obj"></param>
            <param name="value"></param>
        </member>
        <member name="F:Qhta.WPF.Utils.CollectionViewBehavior.EnableCollectionSynchronizationProperty">
            <summary>
            Dependency property to store EnableCollectionSynchronization property.
            </summary>
        </member>
        <member name="M:Qhta.WPF.Utils.CollectionViewBehavior.EnableCollectionSynchronizationPropertyChangedCallback(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Callback method invoked on Items control.
            </summary>
            <param name="obj"></param>
            <param name="args"></param>
        </member>
        <member name="M:Qhta.WPF.Utils.CollectionViewBehavior.GetShowFilterButton(System.Windows.DependencyObject)">
            <summary>
            Getter of ShowFilterButton property.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Qhta.WPF.Utils.CollectionViewBehavior.SetShowFilterButton(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Setter of ShowFilterButton property.
            </summary>
            <param name="target"></param>
            <param name="value"></param>
        </member>
        <member name="F:Qhta.WPF.Utils.CollectionViewBehavior.ShowFilterButtonProperty">
            <summary>
            Dependency property to store ShowFilterButton property.
            </summary>
        </member>
        <member name="M:Qhta.WPF.Utils.CollectionViewBehavior.AddFilterButtonClickHandler(System.Windows.DependencyObject,System.Windows.RoutedEventHandler)">
            <summary>
            Add accessor for ShowFilterButtonClick event.
            </summary>
            <param name="obj"></param>
            <param name="handler"></param>
        </member>
        <member name="M:Qhta.WPF.Utils.CollectionViewBehavior.RemoveFilterButtonClickHandler(System.Windows.DependencyObject,System.Windows.RoutedEventHandler)">
            <summary>
            Remove accessor for FilterButtonClick event.
            </summary>
            <param name="obj"></param>
            <param name="handler"></param>
        </member>
        <member name="F:Qhta.WPF.Utils.CollectionViewBehavior.FilterButtonClickEvent">
            <summary>
            Routed event to store FilterButtonClick event handler.
            </summary>
        </member>
        <member name="M:Qhta.WPF.Utils.CollectionViewBehavior.FilterButton_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handler for Click event of ClearButton (defined in default ComboBox style).
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="M:Qhta.WPF.Utils.CollectionViewBehavior.OnShowFilterButton_Clicked(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Default handler for ShowFilterButton_Clicked event.
            Invokes DisplayFilterDialog method.
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="M:Qhta.WPF.Utils.CollectionViewBehavior.DisplayFilterDialog(System.Windows.Controls.DataGridColumn,System.Reflection.PropertyInfo,System.Windows.Point)">
            <summary>
            Displays a filter dialog for a column bound to the specific property.
            Dialog is displayed in specific screen position.
            View model is stored in column's attached ColumnFilter property.
            </summary>
            <param name="column"></param>
            <param name="propInfo"></param>
            <param name="position"></param>
        </member>
        <member name="M:Qhta.WPF.Utils.CollectionViewBehavior.GetFilterButtonShape(System.Windows.Controls.DataGridColumn)">
            <summary>
            Getter of FilterButtonShape property.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Qhta.WPF.Utils.CollectionViewBehavior.SetFilterButtonShape(System.Windows.Controls.DataGridColumn,Qhta.WPF.Utils.FilterButtonShape)">
            <summary>
            Setter of FilterButtonShape property.
            </summary>
            <param name="target"></param>
            <param name="value"></param>
        </member>
        <member name="F:Qhta.WPF.Utils.CollectionViewBehavior.FilterButtonShapeProperty">
            <summary>
            Dependency property to store FilterButtonShape property.
            </summary>
        </member>
        <member name="M:Qhta.WPF.Utils.CollectionViewBehavior.GetColumnFilter(System.Windows.DependencyObject)">
            <summary>
            Getter of ColumnFilter property.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Qhta.WPF.Utils.CollectionViewBehavior.SetColumnFilter(System.Windows.DependencyObject,System.Object)">
            <summary>
            Setter of ColumnFilter property.
            </summary>
            <param name="target"></param>
            <param name="value"></param>
        </member>
        <member name="F:Qhta.WPF.Utils.CollectionViewBehavior.ColumnFilterProperty">
            <summary>
            Dependency property to store ColumnFilter property.
            </summary>
        </member>
        <member name="M:Qhta.WPF.Utils.CollectionViewBehavior.GetCollectionFilter(System.Windows.DependencyObject)">
            <summary>
            Getter of CollectionFilter property.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Qhta.WPF.Utils.CollectionViewBehavior.SetCollectionFilter(System.Windows.DependencyObject,System.Object)">
            <summary>
            Setter of CollectionFilter property.
            </summary>
            <param name="target"></param>
            <param name="value"></param>
        </member>
        <member name="F:Qhta.WPF.Utils.CollectionViewBehavior.CollectionFilterProperty">
            <summary>
            Dependency property to store CollectionFilter property.
            </summary>
        </member>
        <member name="M:Qhta.WPF.Utils.CollectionViewBehavior.GetSortingEventHandler(System.Windows.DependencyObject)">
            <summary>
            Getter of SortingEventHandler property.
            We do not define new event, but a handler for already defined event.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Qhta.WPF.Utils.CollectionViewBehavior.SetSortingEventHandler(System.Windows.DependencyObject,System.Object)">
            <summary>
            Setter of SortingEventHandler property.
            We do not define new event, but a handler for already defined event.
            </summary>
            <param name="target"></param>
            <param name="value"></param>
        </member>
        <member name="F:Qhta.WPF.Utils.CollectionViewBehavior.SortingEventHandlerProperty">
            <summary>
            Dependency property to store SortingEventHandler property.
            </summary>
        </member>
        <member name="M:Qhta.WPF.Utils.CollectionViewBehavior.OnSortingEventHandlerChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Method to handle SortingEventHandler property changed event.
            If its new value is a proper <see cref="T:System.Windows.Controls.DataGridSortingEventHandler"/>, it is assigned to the data grid.
            Otherwise a default handler is assigned.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Qhta.WPF.Utils.CollectionViewBehavior.DataGrid_Sorting(System.Object,System.Windows.Controls.DataGridSortingEventArgs)">
            <summary>
            Default handler method of the DataGrid sorting event.
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="M:Qhta.WPF.Utils.CollectionViewBehavior.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Qhta.WPF.Utils.CollectionViewFilter">
            <summary>
            Prepared filter for a collection view.
            </summary>
        </member>
        <member name="F:Qhta.WPF.Utils.CollectionViewFilter.Filters">
            <summary>
            Internal storage of column filters. 
            The order of filtering can be different than the order of columns.
            </summary>
        </member>
        <member name="M:Qhta.WPF.Utils.CollectionViewFilter.#ctor">
            <summary>
            Default constructor. Initialized Predicate.
            </summary>
        </member>
        <member name="P:Qhta.WPF.Utils.CollectionViewFilter.Predicate">
            <summary>
            Qualifier function for the whole object.
            </summary>
        </member>
        <member name="M:Qhta.WPF.Utils.CollectionViewFilter.IsEmpty">
            <summary>
            Checks if there is no column filter.
            </summary>
        </member>
        <member name="M:Qhta.WPF.Utils.CollectionViewFilter.ContainsFilter(System.String)">
            <summary>
            Checks if the filter for this property name already exits.
            </summary>
            <param name="propName"></param>
        </member>
        <member name="M:Qhta.WPF.Utils.CollectionViewFilter.AddFilter(System.String,Qhta.WPF.Utils.ColumnFilter)">
            <summary>
            Adds a column filter to collection view filter.
            </summary>
            <param name="propName"></param>
            <param name="filter"></param>
        </member>
        <member name="M:Qhta.WPF.Utils.CollectionViewFilter.ChangeFilter(System.String,Qhta.WPF.Utils.ColumnFilter)">
            <summary>
            Changes a column filter to another one.
            </summary>
            <param name="propName"></param>
            <param name="filter"></param>
        </member>
        <member name="M:Qhta.WPF.Utils.CollectionViewFilter.RemoveFilter(System.String)">
            <summary>
            Removes a column filter from collection view filter.
            </summary>
            <param name="propName"></param>
        </member>
        <member name="M:Qhta.WPF.Utils.CollectionViewFilter.ApplyFilter(System.String,Qhta.WPF.Utils.ColumnFilter)">
            <summary>
            Adds, changes or removes filter for a column.
            Returns predicate or null (if is empty)
            </summary>
            <param name="propName"></param>
            <param name="filter"></param>
        </member>
        <member name="T:Qhta.WPF.Utils.CollectionViewSource`1">
            <summary>
            CollectionViewSource specialized for a specific item type.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Qhta.WPF.Utils.CollectionViewSource`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializing constructor.
            </summary>
            <param name="sourceCollection"></param>
        </member>
        <member name="P:Qhta.WPF.Utils.CollectionViewSource`1.SourceCollection">
            <summary>
            Represents the source collection passed in constructor.
            </summary>
        </member>
        <member name="M:Qhta.WPF.Utils.CollectionViewSource`1.GetDefaultView(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Invokes base GetDefaultView with SourceCollection.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Qhta.WPF.Utils.CollectionViewSource`1.IsFiltered">
            <summary>
            Implemented IFiltered property.
            </summary>
        </member>
        <member name="P:Qhta.WPF.Utils.CollectionViewSource`1.Filter">
            <summary>
            Implemented IFiltered predicate.
            </summary>
        </member>
        <member name="T:Qhta.WPF.Utils.CollectionView`1">
            <summary>
            Generic version of CollectionView class.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Qhta.WPF.Utils.CollectionView`1.#ctor(System.Collections.IEnumerable)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="collection"></param>
        </member>
        <member name="T:Qhta.WPF.Utils.ColorAdjustEffect">
            <summary>
            ShaderEffect class to adjust colors of the brush.
            </summary>
        </member>
        <member name="F:Qhta.WPF.Utils.ColorAdjustEffect.InputProperty">
            <summary>Dependency property to store Input property.</summary>
        </member>
        <member name="F:Qhta.WPF.Utils.ColorAdjustEffect.SaturationProperty">
            <summary>Dependency property to store Saturation property.</summary>
        </member>
        <member name="F:Qhta.WPF.Utils.ColorAdjustEffect.GammaProperty">
            <summary>Dependency property to store Gamma property.</summary>
        </member>
        <member name="F:Qhta.WPF.Utils.ColorAdjustEffect.BrightnessAdjustmentProperty">
            <summary>Dependency property to store BrightnessAdjustment property.</summary>
        </member>
        <member name="F:Qhta.WPF.Utils.ColorAdjustEffect.RedAdjustmentProperty">
            <summary>Dependency property to store RedAdjustment property.</summary>
        </member>
        <member name="F:Qhta.WPF.Utils.ColorAdjustEffect.GreenAdjustmentProperty">
            <summary>Dependency property to store GreenAdjustment property.</summary>
        </member>
        <member name="F:Qhta.WPF.Utils.ColorAdjustEffect.BlueAdjustmentProperty">
            <summary>Dependency property to store BlueAdjustment property.</summary>
        </member>
        <member name="M:Qhta.WPF.Utils.ColorAdjustEffect.#ctor">
            <summary>
            Default constructor that updates shader values.
            </summary>
        </member>
        <member name="P:Qhta.WPF.Utils.ColorAdjustEffect.Input">
            <summary>
            Input brush property.
            </summary>
        </member>
        <member name="P:Qhta.WPF.Utils.ColorAdjustEffect.Saturation">
            <summary>
            A value between 0 and 1 to alter the amount of colour left in the image. 0 is entirely greyscale, and 1 is unaffected. Default is 1.
            </summary>
        </member>
        <member name="P:Qhta.WPF.Utils.ColorAdjustEffect.Gamma">
            <summary>
            A value between 0 and 1 to alter the lightness of the greyscale without altering true black or true white. 
            0 shifts shades closer to true black, and 1 shifts shades closer to true white. Default is 0.5.
            </summary>
        </member>
        <member name="P:Qhta.WPF.Utils.ColorAdjustEffect.BrightnessAdjustment">
            <summary>
            A value between -1 and 1 to linearly move the end result closer to true black or true white respectively.
            -1 will result in an entirely black image, +1 will result in an entirely white image. Default is 0.
            </summary>
        </member>
        <member name="P:Qhta.WPF.Utils.ColorAdjustEffect.RedAdjustment">
            <summary>
            A value between -1 and 1 to linearly increase the Red component of the result.
            -1 will remove all Red from the image, +1 will maximize all Red in the image. Default is 0.
            </summary>
        </member>
        <member name="P:Qhta.WPF.Utils.ColorAdjustEffect.GreenAdjustment">
            <summary>
            A value between -1 and 1 to linearly increase the Green component of the result.
            -1 will remove all Green from the image, +1 will maximize all Green in the image. Default is 0.
            </summary>
        </member>
        <member name="P:Qhta.WPF.Utils.ColorAdjustEffect.BlueAdjustment">
            <summary>
            A value between -1 and 1 to linearly increase the Blue component of the result.
            -1 will remove all Blue from the image, +1 will maximize all Blue in the image. Default is 0.
            </summary>
        </member>
        <member name="M:Qhta.WPF.Utils.ColorAdjustEffect.CoerceFactor(System.Windows.DependencyObject,System.Object)">
            <summary>
            Coerces factor to the range of 0.0 to 1.0.
            </summary>
            <param name="d"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:Qhta.WPF.Utils.ColumnFilter">
            <summary>
            Prepared filter for a column. Holds property info, other value to compare, compare function and predicate function.
            </summary>
        </member>
        <member name="M:Qhta.WPF.Utils.ColumnFilter.#ctor(System.Reflection.PropertyInfo)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="propertyInfo"></param>
        </member>
        <member name="P:Qhta.WPF.Utils.ColumnFilter.PropertyInfo">
            <summary>
            Storage for property info.
            </summary>
        </member>
        <member name="P:Qhta.WPF.Utils.ColumnFilter.OtherValue">
            <summary>
            Storage for other value to compare.
            </summary>
        </member>
        <member name="P:Qhta.WPF.Utils.ColumnFilter.CompareFunction">
            <summary>
            Predicate to evaluate for the column value.
            </summary>
        </member>
        <member name="P:Qhta.WPF.Utils.ColumnFilter.Predicate">
            <summary>
            Predicate to evaluate for the column value.
            </summary>
        </member>
        <member name="T:Qhta.WPF.Utils.ColumnsViewInfo">
            <summary>
            Observable collection of <see cref="T:Qhta.WPF.Utils.ColumnViewInfo"/>.
            </summary>
        </member>
        <member name="M:Qhta.WPF.Utils.ColumnsViewInfo.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Qhta.WPF.Utils.ColumnsViewInfo.AllSelected">
            <summary>
            Checks if all the items are selected.
            </summary>
        </member>
        <member name="T:Qhta.WPF.Utils.ColumnViewInfo">
            <summary>
            An information of the single column.
            </summary>
        </member>
        <member name="M:Qhta.WPF.Utils.ColumnViewInfo.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Qhta.WPF.Utils.ColumnViewInfo.Duplicate">
            <summary>
            Duplicates the column definition.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Qhta.WPF.Utils.ColumnViewInfo.Header">
            <summary>
            Header text to be displayed.
            </summary>
        </member>
        <member name="P:Qhta.WPF.Utils.ColumnViewInfo.PropertyName">
            <summary>
            Property name to bind values.
            </summary>
        </member>
        <member name="P:Qhta.WPF.Utils.ColumnViewInfo.PropertyInfo">
            <summary>
            Property info to bind values.
            </summary>
        </member>
        <member name="P:Qhta.WPF.Utils.ColumnViewInfo.IsVisible">
            <summary>
            Property to change column visibility.
            A converter to Control.Visibility may be needed to bind to column Visibility.
            If IsVisibile is changed then ActualWidth is also changed.
            </summary>
        </member>
        <member name="P:Qhta.WPF.Utils.ColumnViewInfo.Width">
            <summary>
            Stored Width of the column. 
            </summary>
        </member>
        <member name="P:Qhta.WPF.Utils.ColumnViewInfo.ActualWidth">
            <summary>
            Actual width of the column. Is changed between 0 and HiddenWidth
            when IsVisible is changed.
            </summary>
        </member>
        <member name="E:Qhta.WPF.Utils.ColumnViewInfo.PropertyChanged">
            <summary>
            Event used to implement <see cref="T:System.ComponentModel.INotifyPropertyChanged"/> interface.
            </summary>
        </member>
        <member name="M:Qhta.WPF.Utils.ColumnViewInfo.ToString">
            <summary>
            Overriden to help debugging.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Qhta.WPF.Utils.ComboBoxBehavior">
            <summary>
            ComboBox behavior class that defines its IsNullable property and Cleared event.
            </summary>
            <summary>
            ComboBoxBehavior
            </summary>
        </member>
        <member name="M:Qhta.WPF.Utils.ComboBoxBehavior.GetIsNullable(System.Windows.DependencyObject)">
            <summary>
            Getter for IsNullable property.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Qhta.WPF.Utils.ComboBoxBehavior.SetIsNullable(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Setter for IsNullable property.
            </summary>
            <param name="obj"></param>
            <param name="value"></param>
        </member>
        <member name="F:Qhta.WPF.Utils.ComboBoxBehavior.IsNullableProperty">
            <summary>
            Dependency property to store IsNullable property.
            </summary>
        </member>
        <member name="M:Qhta.WPF.Utils.ComboBoxBehavior.IsNullablePropertyChangedCallback(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Callback method invoked when IsNullable property was changed.
            </summary>
            <param name="obj"></param>
            <param name="args"></param>
        </member>
        <member name="M:Qhta.WPF.Utils.ComboBoxBehavior.AddClearedHandler(System.Windows.DependencyObject,System.Windows.RoutedEventHandler)">
            <summary>
            Add accessor for Cleared event.
            </summary>
            <param name="obj"></param>
            <param name="handler"></param>
        </member>
        <member name="M:Qhta.WPF.Utils.ComboBoxBehavior.RemoveClearedHandler(System.Windows.DependencyObject,System.Windows.RoutedEventHandler)">
            <summary>
            Remove accessor for Cleared event.
            </summary>
            <param name="obj"></param>
            <param name="handler"></param>
        </member>
        <member name="F:Qhta.WPF.Utils.ComboBoxBehavior.ClearedEvent">
            <summary>
            Routed event to store Cleared event handler.
            </summary>
        </member>
        <member name="M:Qhta.WPF.Utils.ComboBoxBehavior.ComboBox_PreviewKeyDown(System.Object,System.Windows.Input.KeyEventArgs)">
            <summary>
            Handler method for PreviewKeyDown event of the ComboBox. Handles Delete key.
            Clears SelectedValue and SelectedItem properties and raises Cleared event.
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="M:Qhta.WPF.Utils.ComboBoxBehavior.ComboBox_SelectionChanged(System.Object,System.Windows.Controls.SelectionChangedEventArgs)">
            <summary>
            Handler for SelectionChanged event. Now does nothing.
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="M:Qhta.WPF.Utils.ComboBoxBehavior.ClearButton_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handler for Click event of ClearButton (defined in default ComboBox style).
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="M:Qhta.WPF.Utils.ComboBoxBehavior.ComboBoxItem_Selected(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handler for ComboBox item Selected event. Now does nothing.
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="M:Qhta.WPF.Utils.ComboBoxBehavior.ComboBoxItem_PreviewMouseLeftButtonDown(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Handler for PreviewMouseLeftButtonDown of the ComboBox item. Clears the parent ComboBox SelectedValue.
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="M:Qhta.WPF.Utils.ComboBoxBehavior.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Qhta.WPF.Utils.CommandBindingExtension">
            <summary>
            Markup extension class that defines a commandName for a Command XAML definition.
            </summary>
        </member>
        <member name="M:Qhta.WPF.Utils.CommandBindingExtension.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Qhta.WPF.Utils.CommandBindingExtension.#ctor(System.String)">
            <summary>
            Initializing constructor
            </summary>
            <param name="commandName"></param>
        </member>
        <member name="P:Qhta.WPF.Utils.CommandBindingExtension.CommandName">
            <summary>
            Constructor argument.
            </summary>
        </member>
        <member name="F:Qhta.WPF.Utils.CommandBindingExtension.targetObject">
            <summary>
            Defines the target object to which the command is assigned.
            </summary>
        </member>
        <member name="F:Qhta.WPF.Utils.CommandBindingExtension.targetProperty">
            <summary>
            Defines the target property to which the command is assigned.
            </summary>
        </member>
        <member name="M:Qhta.WPF.Utils.CommandBindingExtension.ProvideValue(System.IServiceProvider)">
            <summary>
            Provides a Command using the service provider.
            If there is some problem, it provides a DummyCommand.
            </summary>
            <param name="serviceProvider"></param>
            <returns></returns>
        </member>
        <member name="M:Qhta.WPF.Utils.CommandBindingExtension.GetCommand(System.Object,System.String)">
            <summary>
            Gets a Command for a command name. Can return null.
            </summary>
            <param name="dataContext"></param>
            <param name="commandName"></param>
            <returns></returns>
        </member>
        <member name="M:Qhta.WPF.Utils.CommandBindingExtension.AssignCommand(System.Windows.Input.ICommand)">
            <summary>
            Assignes a command to the target property of the target object.
            </summary>
            <param name="command"></param>
        </member>
        <member name="M:Qhta.WPF.Utils.CommandBindingExtension.RootElement_DataContextChanged(System.Object,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handler for DataContextChanged event of the rpot element.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Qhta.WPF.Utils.CommandBindingExtension.GetPrivateFieldValue``1(System.Object,System.String)">
            <summary>
            Gets a private field value of the target object. Can return null.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="target"></param>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="T:Qhta.WPF.Utils.CommandBindingExtension.DummyCommand">
            <summary>
            A dummy command that does nothing
            </summary>
        </member>
        <member name="T:Qhta.WPF.Utils.CommandManagerBridge">
            <summary>
            Listener for CanExecuteChanged event implementation based on WPF <see cref="T:System.Windows.Input.CommandManager"/>.
            </summary>
        </member>
        <member name="E:Qhta.WPF.Utils.CommandManagerBridge.CanExecuteChanged">
            <summary>
            EventHandler of CanExecuteChanged assigned to <see cref="E:System.Windows.Input.CommandManager.RequerySuggested"/>.
            </summary>
        </member>
        <member name="T:Qhta.WPF.Utils.CommonStrings">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Qhta.WPF.Utils.CommonStrings.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Qhta.WPF.Utils.CommonStrings.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Qhta.WPF.Utils.CommonStrings.AddFilter">
            <summary>
              Looks up a localized string similar to Add filter.
            </summary>
        </member>
        <member name="P:Qhta.WPF.Utils.CommonStrings.Cancel">
            <summary>
              Looks up a localized string similar to Cancel.
            </summary>
        </member>
        <member name="P:Qhta.WPF.Utils.CommonStrings.ChangeFilter">
            <summary>
              Looks up a localized string similar to Replace filter.
            </summary>
        </member>
        <member name="P:Qhta.WPF.Utils.CommonStrings.ClearAllFilters">
            <summary>
              Looks up a localized string similar to Clear all filters.
            </summary>
        </member>
        <member name="P:Qhta.WPF.Utils.CommonStrings.ClearFilter">
            <summary>
              Looks up a localized string similar to Clear filter.
            </summary>
        </member>
        <member name="P:Qhta.WPF.Utils.CommonStrings.Contains">
            <summary>
              Looks up a localized string similar to Contains.
            </summary>
        </member>
        <member name="P:Qhta.WPF.Utils.CommonStrings.EditFilter">
            <summary>
              Looks up a localized string similar to Edit filter.
            </summary>
        </member>
        <member name="P:Qhta.WPF.Utils.CommonStrings.EndsWith">
            <summary>
              Looks up a localized string similar to Ends with.
            </summary>
        </member>
        <member name="P:Qhta.WPF.Utils.CommonStrings.False">
            <summary>
              Looks up a localized string similar to False.
            </summary>
        </member>
        <member name="P:Qhta.WPF.Utils.CommonStrings.FunctionsAndOptions">
            <summary>
              Looks up a localized string similar to Functions and options.
            </summary>
        </member>
        <member name="P:Qhta.WPF.Utils.CommonStrings.IgnoreCase">
            <summary>
              Looks up a localized string similar to Ignore case.
            </summary>
        </member>
        <member name="P:Qhta.WPF.Utils.CommonStrings.IsEmpty">
            <summary>
              Looks up a localized string similar to Is empty.
            </summary>
        </member>
        <member name="P:Qhta.WPF.Utils.CommonStrings.IsEqual">
            <summary>
              Looks up a localized string similar to Is equal.
            </summary>
        </member>
        <member name="P:Qhta.WPF.Utils.CommonStrings.NotEmpty">
            <summary>
              Looks up a localized string similar to Not empty.
            </summary>
        </member>
        <member name="P:Qhta.WPF.Utils.CommonStrings.NotEqual">
            <summary>
              Looks up a localized string similar to Not equal.
            </summary>
        </member>
        <member name="P:Qhta.WPF.Utils.CommonStrings.OK">
            <summary>
              Looks up a localized string similar to OK.
            </summary>
        </member>
        <member name="P:Qhta.WPF.Utils.CommonStrings.RegularExpression">
            <summary>
              Looks up a localized string similar to Regular expression.
            </summary>
        </member>
        <member name="P:Qhta.WPF.Utils.CommonStrings.StartsWith">
            <summary>
              Looks up a localized string similar to Starts with.
            </summary>
        </member>
        <member name="P:Qhta.WPF.Utils.CommonStrings.True">
            <summary>
              Looks up a localized string similar to True.
            </summary>
        </member>
        <member name="T:Qhta.WPF.Utils.DataGridColumnCreator">
            <summary>
            Utility class that helps to autogenerate <see cref="T:Qhta.WPF.Utils.DataGridContentBoundColumn"/>.
            It uses DataGridColumn attributes assigned to properties.
            </summary>
        </member>
        <member name="M:Qhta.WPF.Utils.DataGridColumnCreator.#ctor(System.Windows.Controls.DataGrid,System.Type,System.Type)">
            <summary>
            Initializing contructor
            </summary>
        </member>
        <member name="P:Qhta.WPF.Utils.DataGridColumnCreator.DataGrid">
            <summary>
            Assigned data grid to create columns.
            </summary>
        </member>
        <member name="P:Qhta.WPF.Utils.DataGridColumnCreator.SourceItemsType">
            <summary>
            Type of the source collection.
            </summary>
        </member>
        <member name="P:Qhta.WPF.Utils.DataGridColumnCreator.ItemType">
            <summary>
            ItemType that can be presetted.
            </summary>
        </member>
        <member name="P:Qhta.WPF.Utils.DataGridColumnCreator.IsFilterButtonVisible">
            <summary>
            Should creator add filter button to each column header.
            </summary>
        </member>
        <member name="P:Qhta.WPF.Utils.DataGridColumnCreator.ItemProperties">
            <summary>
            Public properties declared in ItemType
            </summary>
        </member>
        <member name="M:Qhta.WPF.Utils.DataGridColumnCreator.GenerateColumn(System.Object,System.Windows.Controls.DataGridAutoGeneratingColumnEventArgs)">
            <summary>
            Creates <see cref="T:Qhta.WPF.Utils.DataGridContentBoundColumn"/> for ItemsSource thas have DataGridColumnAttribute (defined in Qhta.MVVM)
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="T:Qhta.WPF.Utils.DataGridColumnDef">
            <summary>
            This data contains full <see cref="T:Qhta.WPF.Utils.DataGridContentBoundColumn"/> definition.
            </summary>
        </member>
        <member name="M:Qhta.WPF.Utils.DataGridColumnDef.#ctor(System.Windows.Data.BindingBase)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="binding"></param>
        </member>
        <member name="P:Qhta.WPF.Utils.DataGridColumnDef.Binding">
            <summary>
            Required binding to data.
            </summary>
        </member>
        <member name="P:Qhta.WPF.Utils.DataGridColumnDef.CanUserReorder">
            <summary>
            Indicates whether the user can change the column display position by dragging the column header.
            Default is true.
            </summary>
        </member>
        <member name="P:Qhta.WPF.Utils.DataGridColumnDef.CanUserResize">
            <summary>
            Indicates whether the user can adjust the column width by using the mouse.
            Default is true.
            </summary>
        </member>
        <member name="P:Qhta.WPF.Utils.DataGridColumnDef.CanUserSort">
            <summary>
            Indicates whether the user can sort the column by clicking the column header.
            Default is true.
            </summary>
        </member>
        <member name="P:Qhta.WPF.Utils.DataGridColumnDef.CanUserFind">
            <summary>
            Indicates whether the user can search the column for a value provided in FindDialog.
            Default is true.
            </summary>
        </member>
        <member name="P:Qhta.WPF.Utils.DataGridColumnDef.ShowFindButton">
            <summary>
            Indicates whether Find button should be displayed in the column header.
            Default is true.
            </summary>
        </member>
        <member name="P:Qhta.WPF.Utils.DataGridColumnDef.CanUserFilter">
            <summary>
            Indicates whether the user can filter column with a predicate provided in FilterDialog.
            Default is true.
            </summary>
        </member>
        <member name="P:Qhta.WPF.Utils.DataGridColumnDef.ShowFilterButton">
            <summary>
            Indicates whether Filter button should be displayed in the column header.
            Default is true.
            </summary>
        </member>
        <member name="P:Qhta.WPF.Utils.DataGridColumnDef.ClipboardContentPath">
            <summary>
            Specifies the binding path of properties to use when getting or setting cell content for the clipboard.
            Default is null.
            </summary>
        </member>
        <member name="P:Qhta.WPF.Utils.DataGridColumnDef.DisplayIndex">
            <summary>
            Gets or sets the display position of the column relative to the other columns in the DataGrid.
            Default is -1.
            </summary>
        </member>
        <member name="P:Qhta.WPF.Utils.DataGridColumnDef.Header">
            <summary>
            Gets or sets the column header.
            Default is null.
            </summary>
        </member>
        <member name="P:Qhta.WPF.Utils.DataGridColumnDef.HeaderStringFormat">
            <summary>
            Gets or sets the format pattern to apply to the content of the column header.
            Default is null.
            </summary>
        </member>
        <member name="P:Qhta.WPF.Utils.DataGridColumnDef.HeaderTemplate">
            <summary>
            Gets or sets the header template to apply to the content of the column header.
            Default is null.
            </summary>
        </member>
        <member name="P:Qhta.WPF.Utils.DataGridColumnDef.IsReadOnly">
            <summary>
            Gets a value that indicates whether cells in the column can be edited.
            Default is null.
            </summary>
        </member>
        <member name="P:Qhta.WPF.Utils.DataGridColumnDef.MaxWidth">
            <summary>
            Gets or sets the maximum width constraint of the column. Default is PositiveInfinity.
            </summary>
        </member>
        <member name="P:Qhta.WPF.Utils.DataGridColumnDef.MinWidth">
            <summary>
            Gets or sets the minimum width constraint of the column. Default is 20.
            </summary>
        </member>
        <member name="P:Qhta.WPF.Utils.DataGridColumnDef.SortDirection">
            <summary>
            Gets or sets the sort direction (ascending or descending) of the column. Default is null;
            </summary>
        </member>
        <member name="P:Qhta.WPF.Utils.DataGridColumnDef.SortMemberPath">
            <summary>
            Gets or sets a property name, or a period-delimited hierarchy of property names, 
            that indicates the member to sort by.
            Default is null.
            </summary>
        </member>
        <member name="P:Qhta.WPF.Utils.DataGridColumnDef.Visibility">
            <summary>
            Gets or sets the visibility of the column. Default is Visible
            </summary>
        </member>
        <member name="P:Qhta.WPF.Utils.DataGridColumnDef.Width">
            <summary>
            Gets or sets the column width or automatic sizing mode.
            Default is NaN.
            </summary>
        </member>
        <member name="P:Qhta.WPF.Utils.DataGridColumnDef.HeaderContextMenu">
            <summary>
            Context menu for a column.
            </summary>
        </member>
        <member name="T:Qhta.WPF.Utils.DataGridColumnUtils">
            <summary>
            Utility class that contains extension methods for DataGridColumn.
            </summary>
        </member>
        <member name="M:Qhta.WPF.Utils.DataGridColumnUtils.GetHeaderText(System.Windows.Controls.DataGridColumn)">
            <summary>
            Gets a header text of the column. 
            Header text can be declared directly as string, as a text of TextBlock or as string content of Label.
            </summary>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="T:Qhta.WPF.Utils.DataGridContentBoundColumn">
            <summary>
            Specific implementation of DataGridBoundColumn with <see cref="P:Qhta.WPF.Utils.DataGridContentBoundColumn.ContentTemplate"/>
            </summary>
        </member>
        <member name="P:Qhta.WPF.Utils.DataGridContentBoundColumn.ContentTemplate">
            <summary>
            DataTemplate to be used in <see cref="M:Qhta.WPF.Utils.DataGridContentBoundColumn.GenerateElement(System.Windows.Controls.DataGridCell,System.Object)"/>. Must be set if WPF.
            Sets also <see cref="P:Qhta.WPF.Utils.DataGridContentBoundColumn.ContentEditingTemplate"/>.
            </summary>
        </member>
        <member name="P:Qhta.WPF.Utils.DataGridContentBoundColumn.ContentEditingTemplate">
            <summary>
            DataTemplate to be used in <see cref="M:Qhta.WPF.Utils.DataGridContentBoundColumn.GenerateEditingElement(System.Windows.Controls.DataGridCell,System.Object)"/>. Can be set in WPF.
            </summary>
        </member>
        <member name="M:Qhta.WPF.Utils.DataGridContentBoundColumn.GenerateElement(System.Windows.Controls.DataGridCell,System.Object)">
            <summary>
            Overriden abstract method to generate view element in DataGrid.
            </summary>
            <param name="cell"></param>
            <param name="dataItem"></param>
            <returns></returns>
        </member>
        <member name="M:Qhta.WPF.Utils.DataGridContentBoundColumn.GenerateEditingElement(System.Windows.Controls.DataGridCell,System.Object)">
            <summary>
            Overriden abstract method to generate editing element in DataGrid.
            </summary>
            <param name="cell"></param>
            <param name="dataItem"></param>
            <returns></returns>
        </member>
        <member name="T:Qhta.WPF.Utils.DispatcherBridge">
            <summary>
            A class that implements <see cref="T:Qhta.ObservableObjects.IDispatcherBridge"/> in WPF applications
            </summary>
        </member>
        <member name="M:Qhta.WPF.Utils.DispatcherBridge.#ctor(System.Windows.Threading.Dispatcher)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="dispatcher"></param>
        </member>
        <member name="M:Qhta.WPF.Utils.DispatcherBridge.BeginInvoke(System.Delegate)">
            <summary>
             Executes the specified delegate asynchronously 
             on the thread that the System.Windows.Threading.Dispatcher was created on.
            </summary>
            <param name="method">The delegate to a method that takes parameters specified in args, which is pushed
                onto the Dispatcher event queue.
            </param>
        </member>
        <member name="M:Qhta.WPF.Utils.DispatcherBridge.BeginInvoke(System.Delegate,System.Object)">
            <summary>
             Executes the specified delegate asynchronously 
             on the thread that the Dispatcher was created on.
            </summary>
            <param name="method">The delegate to a method that takes parameters specified in args, which is pushed
            onto the Dispatcher event queue.</param>
            <param name="args">An array of objects to pass as arguments to the given method.</param>
        </member>
        <member name="M:Qhta.WPF.Utils.DispatcherBridge.BeginInvoke(System.Delegate,System.Object,System.Object)">
            <summary>
             Executes the specified delegate asynchronously 
             on the thread that the Dispatcher was created on.
            </summary>
            <param name="method">The delegate to a method that takes parameters specified in args, which is pushed
            onto the Dispatcher event queue.</param>
            <param name="sender">Sender object to pass as the first argument to the given method</param>
            <param name="args">An array of objects to pass as arguments to the given method.</param>
        </member>
        <member name="M:Qhta.WPF.Utils.DispatcherBridge.Invoke(System.Delegate)">
            <summary>
            Executes the specified delegate synchronously on the thread the Dispatcher is associated with.
            </summary>
            <param name="method">A delegate to a method that takes parameters specified in args, which is pushed
             onto the Dispatcher event queue.</param>
            <returns>The return value from the delegate being invoked or null if the delegate has no return value</returns>
        </member>
        <member name="M:Qhta.WPF.Utils.DispatcherBridge.Invoke(System.Delegate,System.Object)">
            <summary>
            Executes the specified delegate with the specified arguments synchronously on the thread the Dispatcher is associated with.
            </summary>
            <param name="method">A delegate to a method that takes parameters specified in args, which is pushed
             onto the Dispatcher event queue.</param>
            <param name="args">An array of objects to pass as arguments to the given method.</param>
            <returns>The return value from the delegate being invoked or null if the delegate has no return value</returns>
        </member>
        <member name="M:Qhta.WPF.Utils.DispatcherBridge.Invoke(System.Delegate,System.Object,System.Object)">
            <summary>
            Executes the specified delegate with the specified arguments synchronously on the thread the Dispatcher is associated with.
            </summary>
            <param name="method">A delegate to a method that takes parameters specified in args, which is pushed
             onto the Dispatcher event queue.</param>
            <param name="sender">Sender object to pass as the first argument to the given method</param>
            <param name="args">An array of objects to pass as arguments to the given method.</param>
            <returns>The return value from the delegate being invoked or null if the delegate has no return value</returns>
        </member>
        <member name="M:Qhta.WPF.Utils.DispatcherBridge.Invoke(System.Action)">
            <summary>
             Executes the specified System.Action synchronously on the thread the Dispatcher is associated with.
            </summary>
            <param name="callback">A delegate to invoke through the dispatcher.</param>
        </member>
        <member name="M:Qhta.WPF.Utils.DispatcherBridge.Invoke``1(System.Func{``0})">
            <summary>
             Executes the specified System.Func synchronously on the thread the Dispatcher is associated with.
            </summary>
            <param name="callback">A delegate to invoke through the dispatcher.</param>
            <returns>The value returned by callback.</returns>
        </member>
        <member name="T:Qhta.WPF.Utils.DragData">
            <summary>
            Helper class to drag data. Contains source DependencyObject and dragged data.
            </summary>
        </member>
        <member name="P:Qhta.WPF.Utils.DragData.Source">
            <summary>
            Source DependencyObject.
            </summary>
        </member>
        <member name="P:Qhta.WPF.Utils.DragData.Data">
            <summary>
            Dragged data.
            </summary>
        </member>
        <member name="T:Qhta.WPF.Utils.DynamicResource">
            <summary>
            Markup extension class that defines a dynamic resource.
            </summary>
        </member>
        <member name="M:Qhta.WPF.Utils.DynamicResource.#ctor(System.String)">
            <summary>
            Ininitalizing constructor.
            </summary>
            <param name="resourceName"></param>
        </member>
        <member name="P:Qhta.WPF.Utils.DynamicResource.ResourceName">
            <summary>
            Name of the resource.
            </summary>
        </member>
        <member name="M:Qhta.WPF.Utils.DynamicResource.ProvideValue(System.IServiceProvider)">
            <summary>
            Provides value of the resource using service provider.
            </summary>
            <param name="serviceProvider"></param>
            <returns></returns>
        </member>
        <member name="T:Qhta.WPF.Utils.DynamicResourceBinding">
            <summary>
            DynamicResourceExtension class that implements dynamic resource binding with optional converter (as normal Binding).
            </summary>
        </member>
        <member name="M:Qhta.WPF.Utils.DynamicResourceBinding.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Qhta.WPF.Utils.DynamicResourceBinding.#ctor(System.String)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="resourceKey"></param>
        </member>
        <member name="P:Qhta.WPF.Utils.DynamicResourceBinding.Converter">
            <summary>
            Optional converter of the resource value.
            </summary>
        </member>
        <member name="P:Qhta.WPF.Utils.DynamicResourceBinding.ConverterParameter">
            <summary>
            Optional parameter of the converter.
            </summary>
        </member>
        <member name="P:Qhta.WPF.Utils.DynamicResourceBinding.ConverterCulture">
            <summary>
            Optional culture of the conversion.
            </summary>
        </member>
        <member name="P:Qhta.WPF.Utils.DynamicResourceBinding.StringFormat">
            <summary>
            String format to convert data.
            </summary>
        </member>
        <member name="M:Qhta.WPF.Utils.DynamicResourceBinding.ProvideValue(System.IServiceProvider)">
            <summary>
            Provides resource value using service provider.
            </summary>
            <param name="serviceProvider"></param>
            <returns></returns>
        </member>
        <member name="T:Qhta.WPF.Utils.DynamicResourceProvider">
            <summary>
            Markup extension class that provides a type instance.
            </summary>
        </member>
        <member name="M:Qhta.WPF.Utils.DynamicResourceProvider.#ctor(System.String)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="typeName"></param>
        </member>
        <member name="P:Qhta.WPF.Utils.DynamicResourceProvider.TypeName">
            <summary>
            Name of the type.
            </summary>
        </member>
        <member name="M:Qhta.WPF.Utils.DynamicResourceProvider.ProvideValue(System.IServiceProvider)">
            <summary>
            Provides value using IXamlTypeResolver interface.
            </summary>
            <param name="serviceProvider"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="T:Qhta.WPF.Utils.DynamicTemplateSelector">
            <summary>
            Provides means to specify DataTemplates to be selected from within WPF code.
            </summary>
        </member>
        <member name="F:Qhta.WPF.Utils.DynamicTemplateSelector.TemplatesProperty">
            <summary>
            Generic attached property specifying <see cref="T:Qhta.WPF.Utils.Template"/>s
            used by the <see cref="T:Qhta.WPF.Utils.DynamicTemplateSelector"/>
            </summary>
            <remarks>
            This attached property will allow you to set the templates you wish to be available whenever
            a control's TemplateSelector is set to an instance of <see cref="T:Qhta.WPF.Utils.DynamicTemplateSelector"/>
            </remarks>
        </member>
        <member name="M:Qhta.WPF.Utils.DynamicTemplateSelector.GetTemplates(System.Windows.UIElement)">
            <summary>
            Gets the value of the <paramref name="element"/>'s attached <see cref="F:Qhta.WPF.Utils.DynamicTemplateSelector.TemplatesProperty"/>
            </summary>
            <param name="element">The <see cref="T:System.Windows.UIElement"/> who's attached template's property you wish to retrieve</param>
            <returns>The templates used by the givem <paramref name="element"/>
            when using the <see cref="T:Qhta.WPF.Utils.DynamicTemplateSelector"/></returns>
        </member>
        <member name="M:Qhta.WPF.Utils.DynamicTemplateSelector.SetTemplates(System.Windows.UIElement,Qhta.WPF.Utils.TemplateCollection)">
            <summary>
            Sets the value of the <paramref name="element"/>'s attached <see cref="F:Qhta.WPF.Utils.DynamicTemplateSelector.TemplatesProperty"/>
            </summary>
            <param name="element">The element to set the property on</param>
            <param name="collection">The collection of <see cref="T:Qhta.WPF.Utils.Template"/>s to apply to this element</param>
        </member>
        <member name="M:Qhta.WPF.Utils.DynamicTemplateSelector.SelectTemplate(System.Object,System.Windows.DependencyObject)">
            <summary>
            Overriden base method to allow the selection of the correct DataTemplate
            </summary>
            <param name="item">The item for which the template should be retrieved</param>
            <param name="container">The object containing the current item</param>
            <returns>The <see cref="T:System.Windows.DataTemplate"/> to use when rendering the <paramref name="item"/></returns>
        </member>
        <member name="T:Qhta.WPF.Utils.TemplateCollection">
            <summary>
            Holds a collection of <see cref="T:Qhta.WPF.Utils.Template"/> items
            for application as a control's DataTemplate.
            </summary>
        </member>
        <member name="T:Qhta.WPF.Utils.Template">
            <summary>
            Provides a link between a value and a <see cref="P:Qhta.WPF.Utils.Template.DataTemplate"/>
            for the <see cref="T:Qhta.WPF.Utils.DynamicTemplateSelector"/>
            </summary>
            <remarks>
            In this case, our value is a <see cref="T:System.Type"/> which we are attempting to match
            to a <see cref="P:Qhta.WPF.Utils.Template.DataTemplate"/>
            </remarks>
        </member>
        <member name="F:Qhta.WPF.Utils.Template.ValueProperty">
            <summary>
            Provides the value used to match this <see cref="P:Qhta.WPF.Utils.Template.DataTemplate"/> to an item
            </summary>
        </member>
        <member name="F:Qhta.WPF.Utils.Template.DataTemplateProperty">
            <summary>
            Provides the <see cref="P:Qhta.WPF.Utils.Template.DataTemplate"/> used to render items matching the <see cref="P:Qhta.WPF.Utils.Template.DataType"/>
            </summary>
        </member>
        <member name="P:Qhta.WPF.Utils.Template.DataType">
            <summary>
            Gets or Sets the value used to match this <see cref="P:Qhta.WPF.Utils.Template.DataTemplate"/> to an item
            </summary>
        </member>
        <member name="P:Qhta.WPF.Utils.Template.DataTemplate">
            <summary>
            Gets or Sets the <see cref="P:Qhta.WPF.Utils.Template.DataTemplate"/> used to render items matching the <see cref="P:Qhta.WPF.Utils.Template.DataType"/>
            </summary>
        </member>
        <member name="T:Qhta.WPF.Utils.EnumValuesProvider">
            <summary>
            DataSourceProvider that provides enum type values.
            </summary>
        </member>
        <member name="P:Qhta.WPF.Utils.EnumValuesProvider.ObjectType">
            <summary>
            Enum type to get values.
            </summary>
        </member>
        <member name="P:Qhta.WPF.Utils.EnumValuesProvider.ItemType">
            <summary>
            Type of the item.
            </summary>
        </member>
        <member name="P:Qhta.WPF.Utils.EnumValuesProvider.AddNull">
            <summary>
            Specifies whether it should add a null value.
            </summary>
        </member>
        <member name="M:Qhta.WPF.Utils.EnumValuesProvider.BeginQuery">
            <summary>
            Starts querying.
            </summary>
        </member>
        <member name="M:Qhta.WPF.Utils.EnumValuesProvider.GetValues(System.Type)">
            <summary>
            Gets values array
            </summary>
            <param name="enumtype"></param>
            <returns></returns>
        </member>
        <member name="M:Qhta.WPF.Utils.EnumValuesProvider.GetValuesWithNull(System.Type)">
            <summary>
            Gets value array with null value.
            </summary>
            <param name="enumType"></param>
            <returns></returns>
        </member>
        <member name="M:Qhta.WPF.Utils.EnumValuesProvider.GetNames(System.Type,System.Globalization.CultureInfo)">
            <summary>
            Get names of the values.
            </summary>
            <param name="enumtype"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="T:Qhta.WPF.Utils.FocusUtils">
            <summary>
            Utility class that checks whether the window has a control with focus.
            </summary>
        </member>
        <member name="M:Qhta.WPF.Utils.FocusUtils.HasFocus(System.Windows.Window,System.Windows.Controls.Control,System.Boolean)">
            <summary>
            Checks whether the window has a control with focus.
            </summary>
            <param name="parentWindow"></param>
            <param name="aControl"></param>
            <param name="aCheckChildren"></param>
            <returns></returns>
        </member>
        <member name="T:Qhta.WPF.Utils.FrameworkElementUtils">
            <summary>
            Utility class that gets a parent window of the framework element.
            </summary>
        </member>
        <member name="M:Qhta.WPF.Utils.FrameworkElementUtils.FindParentWindow(System.Windows.FrameworkElement)">
            <summary>
            Obsolete method to find a parent window od the framework element.
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:Qhta.WPF.Utils.FrameworkElementUtils.GetParentWindow(System.Windows.FrameworkElement)">
            <summary>
            Method to get a parent window od the framework element.
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="T:Qhta.WPF.Utils.GeometryUtils">
            <summary>
            Utility class that contains some geometry calculation methods.
            </summary>
        </member>
        <member name="M:Qhta.WPF.Utils.GeometryUtils.Angle(System.Windows.Point,System.Windows.Point)">
            <summary>
            The angle of the point in the polar coordinate system.
            </summary>
            <param name="p">Input point</param>
            <param name="center">The center of the coordinate system</param>
            <returns></returns>
        </member>
        <member name="M:Qhta.WPF.Utils.GeometryUtils.Radius(System.Windows.Point,System.Windows.Point)">
            <summary>
            The distance of a point from the center of the coordinate system.
            </summary>
            <param name="p">Input point</param>
            <param name="center">The center of the coordinate system</param>
            <returns></returns>
        </member>
        <member name="M:Qhta.WPF.Utils.GeometryUtils.Move(System.Windows.Point,System.Windows.Point,System.Double)">
            <summary>
            Shift the coordinates of a point radially from the center by some distance.
            </summary>
            <param name="p">Moved point</param>
            <param name="center">The center of the coordinate system</param>
            <param name="M">Move distance</param>
            <returns></returns>
        </member>
        <member name="M:Qhta.WPF.Utils.GeometryUtils.Rotate(System.Windows.Point,System.Windows.Point,System.Double)">
            <summary>
            Shifting the coordinates of a point in a circle relative to the center by some angle.
            </summary>
            <param name="p">Moved point</param>
            <param name="center">The center of the coordinate system</param>
            <param name="A">Rotation angle</param>
            <returns></returns>
        </member>
        <member name="M:Qhta.WPF.Utils.GeometryUtils.GetOverlappingGeometry(System.Windows.Media.Geometry)">
            <summary>
            Merging overlapping areas from the geometry.
            </summary>
            <param name="geometry">Input geometry</param>
            <returns></returns>
        </member>
        <member name="M:Qhta.WPF.Utils.GeometryUtils.GetPoints(System.Windows.Media.PathGeometry)">
            <summary>
            Extracting points from the PathGeometry.
            </summary>
            <param name="geometry"></param>
            <returns></returns>
        </member>
        <member name="T:Qhta.WPF.Utils.GridViewBehavior">
            <summary>
            Defines behavior for GridView - a special component of ListView.
            </summary>
        </member>
        <member name="M:Qhta.WPF.Utils.GridViewBehavior.GetCommand(System.Windows.DependencyObject)">
            <summary>
            Getter for Command property.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Qhta.WPF.Utils.GridViewBehavior.SetCommand(System.Windows.DependencyObject,System.Windows.Input.ICommand)">
            <summary>
            Setter for Command property
            </summary>
            <param name="obj"></param>
            <param name="value"></param>
        </member>
        <member name="F:Qhta.WPF.Utils.GridViewBehavior.CommandProperty">
            <summary>
              DependencyProperty as the backing store for Command.
            </summary>
        </member>
        <member name="M:Qhta.WPF.Utils.GridViewBehavior.GetSortEnabled(System.Windows.DependencyObject)">
            <summary>
            Getter for SortEnabled property
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Qhta.WPF.Utils.GridViewBehavior.SetSortEnabled(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Setter for SortEnabled property
            </summary>
            <param name="obj"></param>
            <param name="value"></param>
        </member>
        <member name="F:Qhta.WPF.Utils.GridViewBehavior.SortEnabledProperty">
            <summary>
            DependencyProperty as the backing store for SortEnabled.
            </summary>
        </member>
        <member name="M:Qhta.WPF.Utils.GridViewBehavior.GetPropertyName(System.Windows.DependencyObject)">
            <summary>
            Getter for PropertyName property
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Qhta.WPF.Utils.GridViewBehavior.SetPropertyName(System.Windows.DependencyObject,System.String)">
            <summary>
            Setter for PropertyName property
            </summary>
            <param name="obj"></param>
            <param name="value"></param>
        </member>
        <member name="F:Qhta.WPF.Utils.GridViewBehavior.PropertyNameProperty">
            <summary>
            DependencyProperty as the backing store for PropertyName.
            </summary>
        </member>
        <member name="M:Qhta.WPF.Utils.GridViewBehavior.GetWidth(System.Windows.DependencyObject)">
            <summary>
            Getter for Width property
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Qhta.WPF.Utils.GridViewBehavior.SetWidth(System.Windows.DependencyObject,System.Double)">
            <summary>
            Setter for Width property
            </summary>
            <param name="obj"></param>
            <param name="value"></param>
        </member>
        <member name="F:Qhta.WPF.Utils.GridViewBehavior.WidthProperty">
            <summary>
            DependencyProperty as the backing store for Width.
            </summary>
        </member>
        <member name="M:Qhta.WPF.Utils.GridViewBehavior.GetShowColumnWidthChangeCursor(System.Windows.DependencyObject)">
            <summary>
            Getter for ShowColumnWidthChangeCursor property
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Qhta.WPF.Utils.GridViewBehavior.SetShowColumnWidthChangeCursor(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Setter for ShowColumnWidthChangeCursor property
            </summary>
            <param name="obj"></param>
            <param name="value"></param>
        </member>
        <member name="F:Qhta.WPF.Utils.GridViewBehavior.ShowColumnWidthChangeCursorProperty">
            <summary>
            DependencyProperty as the backing store for ShowColumnWidthChangeCursor.
            </summary>
        </member>
        <member name="M:Qhta.WPF.Utils.GridViewBehavior.GetColumnWidthChangeCursor(System.Windows.DependencyObject)">
            <summary>
            Getter for ColumnWidthChangeCursor property
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Qhta.WPF.Utils.GridViewBehavior.SetColumnWidthChangeCursor(System.Windows.DependencyObject,System.Windows.Input.Cursor)">
            <summary>
            Setter for ColumnWidthChangeCursor property.
            </summary>
            <param name="obj"></param>
            <param name="value"></param>
        </member>
        <member name="F:Qhta.WPF.Utils.GridViewBehavior.ColumnWidthChangeCursorProperty">
            <summary>
            DependencyProperty as the backing store for ColumnWidthChangeCursor.
            </summary>
        </member>
        <member name="M:Qhta.WPF.Utils.GridViewBehavior.GetShowSortGlyph(System.Windows.DependencyObject)">
            <summary>
            Getter for ShowSortGlyph property
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Qhta.WPF.Utils.GridViewBehavior.SetShowSortGlyph(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Setter for ShowSortGlyph property
            </summary>
            <param name="obj"></param>
            <param name="value"></param>
        </member>
        <member name="F:Qhta.WPF.Utils.GridViewBehavior.ShowSortGlyphProperty">
            <summary>
            DependencyProperty as the backing store for ShowSortGlyph.
            </summary>
        </member>
        <member name="M:Qhta.WPF.Utils.GridViewBehavior.GetSortGlyphAscending(System.Windows.DependencyObject)">
            <summary>
            Getter for SortGlyphAscending property
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Qhta.WPF.Utils.GridViewBehavior.SetSortGlyphAscending(System.Windows.DependencyObject,System.Windows.Media.ImageSource)">
            <summary>
            Setter for SortGlyphAscending property.
            </summary>
            <param name="obj"></param>
            <param name="value"></param>
        </member>
        <member name="F:Qhta.WPF.Utils.GridViewBehavior.SortGlyphAscendingProperty">
            <summary>
            DependencyProperty as the backing store for SortGlyphAscending.
            </summary>
        </member>
        <member name="M:Qhta.WPF.Utils.GridViewBehavior.GetSortGlyphDescending(System.Windows.DependencyObject)">
            <summary>
            Getter for SortGlyphDescending property
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Qhta.WPF.Utils.GridViewBehavior.SetSortGlyphDescending(System.Windows.DependencyObject,System.Windows.Media.ImageSource)">
            <summary>
            Setter for SortGlyphDescending property
            </summary>
            <param name="obj"></param>
            <param name="value"></param>
        </member>
        <member name="F:Qhta.WPF.Utils.GridViewBehavior.SortGlyphDescendingProperty">
            <summary>
            DependencyProperty as the backing store for SortGlyphDescending.
            </summary>
        </member>
        <member name="M:Qhta.WPF.Utils.GridViewBehavior.GetColumnHeader(System.Windows.DependencyObject)">
            <summary>
            Getter for ColumnHeader property
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Qhta.WPF.Utils.GridViewBehavior.SetColumnHeader(System.Windows.DependencyObject,System.String)">
            <summary>
            Setter for ColumnHeader property
            </summary>
            <param name="obj"></param>
            <param name="value"></param>
        </member>
        <member name="F:Qhta.WPF.Utils.GridViewBehavior.ColumnHeaderProperty">
            <summary>
            DependencyProperty as the backing store for ColumnHeader.
            </summary>
        </member>
        <member name="M:Qhta.WPF.Utils.GridViewBehavior.GetAncestor``1(System.Windows.DependencyObject)">
            <summary>
            Helper method to get ancestor of the dependency object.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="reference"></param>
            <returns></returns>
        </member>
        <member name="M:Qhta.WPF.Utils.GridViewBehavior.ApplySort(System.ComponentModel.ICollectionView,System.String,System.Windows.Controls.ListView,System.Windows.Controls.GridViewColumnHeader)">
            <summary>
            Helper method to apply sort on ICollectionView.
            </summary>
            <param name="view">CollectionView to sort</param>
            <param name="properties">String of property names to sort (separated with comma or semicolon)</param>
            <param name="listView">Parent ListView</param>
            <param name="clickedHeader">Currently clicked header</param>
        </member>
        <member name="M:Qhta.WPF.Utils.GridViewBehavior.TryGetPropertyNames(System.String,System.String[]@,System.ComponentModel.ListSortDirection[]@)">
            <summary>
            Helper method to split property names string to the array and check their sort directions.
            </summary>
            <param name="properties">String of property names to sort (separated with comma or semicolon)</param>
            <param name="propertyNames">Result property name array</param>
            <param name="directions">Array of directions (size same as property names)</param>
            <returns></returns>
        </member>
        <member name="M:Qhta.WPF.Utils.GridViewBehavior.GetPropertyNames(System.String)">
            <summary>
            Helper method to split property names string to the array.
            </summary>
            <param name="properties">String of property names to sort (separated with comma or semicolon)</param>
            <returns>Result property name array</returns>
        </member>
        <member name="M:Qhta.WPF.Utils.GridViewBehavior.ApplySort(System.ComponentModel.ICollectionView,System.String,System.Windows.Controls.ListView,System.Boolean,System.ComponentModel.ListSortDirection)">
            <summary>
            Helper method to apply sort operation 
            </summary>
            <param name="view">CollectionView to sort</param>
            <param name="propertyName">Clicked header property name</param>
            <param name="listView">Parent ListView</param>
            <param name="addSortColumn">Specifies whether to add a column to sort (or sort separately)</param>
            <param name="direction">Direction to sort a column</param>
            <returns></returns>
        </member>
        <member name="M:Qhta.WPF.Utils.GridViewBehavior.RemoveAllSortGlyphs(System.Windows.Controls.ListView)">
            <summary>
            Remove all sort buttons from the ListView headers.
            </summary>
            <param name="listView"></param>
        </member>
        <member name="M:Qhta.WPF.Utils.GridViewBehavior.AddSortGlyph(System.Windows.Controls.GridViewColumnHeader,System.ComponentModel.ListSortDirection,System.Windows.Media.ImageSource)">
            <summary>
            Add sort glyph adorner to column header.
            </summary>
            <param name="columnHeader"></param>
            <param name="direction"></param>
            <param name="imageSource"></param>
        </member>
        <member name="M:Qhta.WPF.Utils.GridViewBehavior.RemoveSortGlyph(System.Windows.Controls.GridViewColumnHeader)">
            <summary>
            Remove sort glyph adorner from column header.
            </summary>
            <param name="columnHeader"></param>
        </member>
        <member name="M:Qhta.WPF.Utils.GridViewBehavior.CopyToClipboard(System.Windows.Controls.ListView,System.Type,Qhta.WPF.Utils.ColumnsViewInfo)">
            <summary>
            Copies selected items of the ListView to the clipboard. Data is copied as HTML table string.
            Result is the number of copied items.
            </summary>
            <param name="listView">ListView to copy items</param>
            <param name="itemType">Type of the item (not used)</param>
            <param name="columnsInfo">Info of columns to copy</param>
            <returns>Number of the copied items</returns>
        </member>
        <member name="M:Qhta.WPF.Utils.GridViewBehavior.GetColumnsViewInfo(System.Windows.DependencyObject)">
            <summary>
            Getter for ColumnsViewInfo property.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Qhta.WPF.Utils.GridViewBehavior.SetColumnsViewInfo(System.Windows.DependencyObject,Qhta.WPF.Utils.ColumnsViewInfo)">
            <summary>
            Setter for ColumnsViewInfo property.
            </summary>
            <param name="obj"></param>
            <param name="value"></param>
        </member>
        <member name="F:Qhta.WPF.Utils.GridViewBehavior.ColumnsViewInfoProperty">
            <summary>
            Dependency property to store ColumnsViewInfo property.
            </summary>
        </member>
        <member name="M:Qhta.WPF.Utils.GridViewBehavior.InitColumnsViewInfo(System.Windows.Controls.ListView)">
            <summary>
            Initializing method for ColumnsViewInfo property.
            </summary>
            <param name="listView"></param>
            <returns></returns>
        </member>
        <member name="M:Qhta.WPF.Utils.GridViewBehavior.GetColumnsViewInfo(System.Windows.Controls.GridViewColumnCollection,System.Type)">
            <summary>
            Gets ColumnsViewInfo for specific GridViewColumnCollection and item type
            </summary>
            <param name="columns">Initial columns collection</param>
            <param name="itemType">ItemType where properties are searched</param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Qhta.WPF.Utils.GridViewBehavior.FindProperties(Qhta.WPF.Utils.ColumnsViewInfo,System.Type)">
            <summary>
            Finds properties in itemType and fills PropertyInfo in collection items.
            </summary>
            <param name="info">ColumnsViewInfo collection</param>
            <param name="itemType">ItemType where properties are searched</param>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Qhta.WPF.Utils.GridViewBehavior.GetFitLastColumnWidth(System.Windows.DependencyObject)">
            <summary>
            Getter for FitLastColumnWidth property.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Qhta.WPF.Utils.GridViewBehavior.SetFitLastColumnWidth(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Setter for FitLastColumnWidth property.
            </summary>
            <param name="target"></param>
            <param name="value"></param>
        </member>
        <member name="F:Qhta.WPF.Utils.GridViewBehavior.FitLastColumnWidthProperty">
            <summary>
            Dependency property to store FitLastColumnWidth property.
            </summary>
        </member>
        <member name="M:Qhta.WPF.Utils.GridViewBehavior.FitLastColumnWidthEnable(System.Windows.Controls.ListView,System.Boolean)">
            <summary>
            Method to set FitLastColumnWidth manually.
            </summary>
            <param name="listView"></param>
            <param name="value"></param>
        </member>
        <member name="M:Qhta.WPF.Utils.GridViewBehavior.RegisterColumn(System.Windows.Controls.GridViewColumn,System.Windows.Controls.ListView)">
            <summary>
            Registering columns needed as there is no backward relationship between GridViewColumn an its parent ListView
            </summary>
            <param name="column"></param>
            <param name="listView"></param>
        </member>
        <member name="T:Qhta.WPF.Utils.ICompoundItem">
            <summary>
            Interface that defines Items property.
            </summary>
        </member>
        <member name="P:Qhta.WPF.Utils.ICompoundItem.Items">
            <summary>
            IEnumerable Items.
            </summary>
        </member>
        <member name="T:Qhta.WPF.Utils.IListSelector">
            <summary>
            Interface that defines selecting methods.
            </summary>
        </member>
        <member name="M:Qhta.WPF.Utils.IListSelector.SelectItem(System.Object,System.Boolean)">
            <summary>
            Select an item.
            </summary>
            <param name="item"></param>
            <param name="select"></param>
        </member>
        <member name="M:Qhta.WPF.Utils.IListSelector.SelectAll(System.Boolean)">
            <summary>
            Select all items.
            </summary>
            <param name="select"></param>
        </member>
        <member name="P:Qhta.WPF.Utils.IListSelector.SelectedItemsCount">
            <summary>
            Count of selected items.
            </summary>
        </member>
        <member name="P:Qhta.WPF.Utils.IListSelector.SelectedItems">
            <summary>
            Enumeration of selected items.
            </summary>
        </member>
        <member name="M:Qhta.WPF.Utils.IListSelector.NotifySelectionChanged">
            <summary>
            A method to notify that selection was changed.
            </summary>
        </member>
        <member name="T:Qhta.WPF.Utils.InputBindingAttachment">
            <summary>
            Behavior class to define an InputBinding property that can be attached to an UI element.
            </summary>
        </member>
        <member name="M:Qhta.WPF.Utils.InputBindingAttachment.GetInputBindings(System.Windows.UIElement)">
            <summary>
            Getter of InputBinding property.
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:Qhta.WPF.Utils.InputBindingAttachment.SetInputBindings(System.Windows.UIElement,System.Windows.Input.InputBindingCollection)">
            <summary>
            Setter of InputBinding property
            </summary>
            <param name="element"></param>
            <param name="inputBindings"></param>
        </member>
        <member name="F:Qhta.WPF.Utils.InputBindingAttachment.InputBindingsProperty">
            <summary>
            Dependency property to store InputBinding property.
            </summary>
        </member>
        <member name="T:Qhta.WPF.Utils.IProposedValueErrorInfo">
            <summary>
            Interface that defines GetError method.
            </summary>
        </member>
        <member name="M:Qhta.WPF.Utils.IProposedValueErrorInfo.GetError(System.String,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Gets an error for some value proposed for a property.
            </summary>
            <param name="propertyName"></param>
            <param name="value"></param>
            <param name="cultureInfo"></param>
            <returns></returns>
        </member>
        <member name="T:Qhta.WPF.Utils.JoinStrings">
            <summary>
            Markup extension that joins input strings.
            </summary>
        </member>
        <member name="P:Qhta.WPF.Utils.JoinStrings.Separator">
            <summary>
            Separator set between input strings.
            </summary>
        </member>
        <member name="P:Qhta.WPF.Utils.JoinStrings.Items">
            <summary>
            Input strings.
            </summary>
        </member>
        <member name="M:Qhta.WPF.Utils.JoinStrings.ProvideValue(System.IServiceProvider)">
            <summary>
            Provides value with service provider.
            </summary>
            <param name="serviceProvider"></param>
            <returns></returns>
        </member>
        <member name="M:Qhta.WPF.Utils.JoinStrings.ToString">
            <summary>
            Joins the strings.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Qhta.WPF.Utils.ListBoxBehavior">
            <summary>
            Behavior class that defines attached property for ListBox. It is:
            <list type="table">
              <item><term>MoveItemsEnabled</term><description>Enables moving items</description></item>
            </list>
            </summary>
        </member>
        <member name="M:Qhta.WPF.Utils.ListBoxBehavior.GetMoveItemsEnabled(System.Windows.DependencyObject)">
            <summary>
              MoveItemsEnabled behavior allows ListBoxItems to be drag and drop inside list with mouse.
            </summary>
        </member>
        <member name="M:Qhta.WPF.Utils.ListBoxBehavior.SetMoveItemsEnabled(System.Windows.DependencyObject,System.Boolean)">
            <summary>
              For MoveItemsEnabled behavior list view items source should implement IListSelector interface.
            </summary>
        </member>
        <member name="F:Qhta.WPF.Utils.ListBoxBehavior.MoveItemsEnabledProperty">
            <summary>
              For MoveItemsEnabled behavior list view items source should implement IListSelector interface.
            </summary>
        </member>
        <member name="M:Qhta.WPF.Utils.ListBoxBehavior.FindListBox(System.Windows.DependencyObject)">
            <summary>
            Finds a parent that is a ListBox of the dependency object.
            </summary>
            <param name="dependencyObject"></param>
            <returns></returns>
        </member>
        <member name="M:Qhta.WPF.Utils.ListBoxBehavior.FindListBoxItem(System.Windows.DependencyObject)">
            <summary>
            Finds a parent that is a ListBoxItem of the dependency object.
            </summary>
            <param name="dependencyObject"></param>
            <returns></returns>
        </member>
        <member name="T:Qhta.WPF.Utils.ListViewBehavior">
            <summary>
            Behavior class that defines a few ListView properties.
            </summary>
        </member>
        <member name="M:Qhta.WPF.Utils.ListViewBehavior.GetFitLastColumnWidth(System.Windows.DependencyObject)">
            <summary>
            Getter for FitLastColumnWidth property.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Qhta.WPF.Utils.ListViewBehavior.SetFitLastColumnWidth(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Setter for FitLastColumnWidth property.
            </summary>
            <param name="target"></param>
            <param name="value"></param>
        </member>
        <member name="F:Qhta.WPF.Utils.ListViewBehavior.FitLastColumnWidthProperty">
            <summary>
            Dependency property to store FitLastColumnWidth property.
            </summary>
        </member>
        <member name="M:Qhta.WPF.Utils.ListViewBehavior.RegisterColumn(System.Windows.Controls.GridViewColumn,System.Windows.Controls.ListView)">
            <summary>
            Registering columns needed as there is no backward relationship between GridViewColumn an its parent ListView
            </summary>
            <param name="column"></param>
            <param name="listView"></param>
        </member>
        <member name="M:Qhta.WPF.Utils.ListViewBehavior.GetMultiSelect(System.Windows.DependencyObject)">
            <summary>
              For MultiSelect behavior list view items source should implement IListSelector interface.
            </summary>
        </member>
        <member name="M:Qhta.WPF.Utils.ListViewBehavior.SetMultiSelect(System.Windows.DependencyObject,System.Boolean)">
            <summary>
              For MultiSelect behavior list view items source should implement IListSelector interface.
            </summary>
        </member>
        <member name="F:Qhta.WPF.Utils.ListViewBehavior.MultiSelectProperty">
            <summary>
              For MultiSelect behavior list view items source should implement IListSelector interface.
            </summary>
        </member>
        <member name="M:Qhta.WPF.Utils.ListViewBehavior.GetIsItemSelected(System.Windows.Controls.ListViewItem)">
            <summary>
            Getter for IsItemSelected property.
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:Qhta.WPF.Utils.ListViewBehavior.SetIsItemSelected(System.Windows.Controls.ListViewItem,System.Boolean)">
            <summary>
            Setter for IsItemSelected property.
            </summary>
            <param name="element"></param>
            <param name="value"></param>
        </member>
        <member name="F:Qhta.WPF.Utils.ListViewBehavior.IsItemSelectedProperty">
            <summary>
            Dependency property for IsItemSelected property
            </summary>
        </member>
        <member name="M:Qhta.WPF.Utils.ListViewBehavior.GetSelectedItems(System.Windows.Controls.ListView)">
            <summary>
            Getter for SelectedItems property.
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:Qhta.WPF.Utils.ListViewBehavior.SetSelectedItems(System.Windows.Controls.ListView,System.Collections.IList)">
            <summary>
            Setter for SelectedItems property.
            </summary>
            <param name="element"></param>
            <param name="value"></param>
        </member>
        <member name="F:Qhta.WPF.Utils.ListViewBehavior.SelectedItemsProperty">
            <summary>
            Dependency property to store SelectedItems property.
            </summary>
        </member>
        <member name="M:Qhta.WPF.Utils.ListViewBehavior.GetCurrentItem(System.Windows.Controls.ListView)">
            <summary>
            Getter for CurrentItem property.
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:Qhta.WPF.Utils.ListViewBehavior.SetCurrentItem(System.Windows.Controls.ListView,System.Object)">
            <summary>
            Setter for CurrentItem property.
            </summary>
            <param name="listView"></param>
            <param name="value"></param>
        </member>
        <member name="M:Qhta.WPF.Utils.ListViewBehavior.UpdateCurrentItem(System.Windows.Controls.ListView,System.Object)">
            <summary>
            Updater for CurrentItem property.
            </summary>
            <param name="listView"></param>
            <param name="value"></param>
        </member>
        <member name="F:Qhta.WPF.Utils.ListViewBehavior.CurrentItemProperty">
            <summary>
            Dependency property to store CurrentItem property.
            </summary>
        </member>
        <member name="M:Qhta.WPF.Utils.ListViewBehavior.GetUseCurrentItemChangeEvent(System.Windows.DependencyObject)">
            <summary>
            Setter for UseCurrentItemChangedEvent property.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Qhta.WPF.Utils.ListViewBehavior.SetUseCurrentItemChangeEvent(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Getter for UseCurrentItemChangeEvent property
            </summary>
            <param name="obj"></param>
            <param name="value"></param>
        </member>
        <member name="F:Qhta.WPF.Utils.ListViewBehavior.UseCurrentItemChangeEventProperty">
            <summary>
            Dependency property to store UseCurrentItemChangeEvent property.
            </summary>
        </member>
        <member name="M:Qhta.WPF.Utils.ListViewBehavior.AddCurrentItemChangeHandler(System.Windows.DependencyObject,System.Windows.RoutedEventHandler)">
            <summary>
            Add method for CurrentItemChange event handler.
            </summary>
            <param name="obj"></param>
            <param name="handler"></param>
        </member>
        <member name="M:Qhta.WPF.Utils.ListViewBehavior.RemoveCurrentItemChangeHandler(System.Windows.DependencyObject,System.Windows.RoutedEventHandler)">
            <summary>
            Remove method for CurrentItemChange event handler.
            </summary>
            <param name="obj"></param>
            <param name="handler"></param>
        </member>
        <member name="F:Qhta.WPF.Utils.ListViewBehavior.CurrentItemChangeEvent">
            <summary>
            Routed event to store CurrentItemChange event handler.
            </summary>
        </member>
        <member name="M:Qhta.WPF.Utils.ListViewBehavior.GetStartItem(System.Windows.Controls.ListView)">
            <summary>
            Getter for StartItem property.
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:Qhta.WPF.Utils.ListViewBehavior.SetStartItem(System.Windows.Controls.ListView,System.Object)">
            <summary>
            Setter for StartItem property.
            </summary>
            <param name="element"></param>
            <param name="value"></param>
        </member>
        <member name="F:Qhta.WPF.Utils.ListViewBehavior.StartItemProperty">
            <summary>
            Dependency property to store StartItem property.
            </summary>
        </member>
        <member name="M:Qhta.WPF.Utils.ListViewBehavior.OnListViewItemGotFocus(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handle method for ListViewItem GotFocus event.
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="M:Qhta.WPF.Utils.ListViewBehavior.OnListViewItemPreviewMouseDown(System.Object,System.Windows.Input.MouseEventArgs)">
            <summary>
            Handle method for ListViewItem PreviewMouseDown event.
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="M:Qhta.WPF.Utils.ListViewBehavior.OnListViewItemPreviewMouseUp(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Handle method for ListViewItem PreviewMouseUp event.
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="M:Qhta.WPF.Utils.ListViewBehavior.FindParentListView(System.Windows.DependencyObject)">
            <summary>
            Helper method to find parent ListView of the dependency object.
            </summary>
            <param name="dependencyObject"></param>
            <returns></returns>
        </member>
        <member name="M:Qhta.WPF.Utils.ListViewBehavior.FindParentListViewItem(System.Windows.DependencyObject)">
            <summary>
            Helper method to find parent ListViewItem of the dependency object.
            </summary>
            <param name="dependencyObject"></param>
            <returns></returns>
        </member>
        <member name="M:Qhta.WPF.Utils.ListViewBehavior.SelectItems(System.Windows.Controls.ListView,System.Windows.Controls.ListViewItem)">
            <summary>
            Helper method to select items in a ListView when a ListViewItem is currently pointed by mouse.
            </summary>
            <param name="listView"></param>
            <param name="listViewItem"></param>
            <returns></returns>
        </member>
        <member name="M:Qhta.WPF.Utils.ListViewBehavior.SelectSingleItem(System.Windows.Controls.ListView,System.Windows.Controls.ListViewItem)">
            <summary>
            Helper method to select a single item in a ListView when a ListViewItem is currently pointed by mouse.
            </summary>
            <param name="listView"></param>
            <param name="listViewItem"></param>
            <returns></returns>
        </member>
        <member name="M:Qhta.WPF.Utils.ListViewBehavior.DeselectAllItems(System.Windows.Controls.ListView)">
            <summary>
            Helper method to deselect all items in a ListView.
            </summary>
            <param name="listView"></param>
            <returns></returns>
        </member>
        <member name="M:Qhta.WPF.Utils.ListViewBehavior.DeselectAllItemsExcept(System.Windows.Controls.ListView,System.Collections.Generic.IEnumerable{System.Windows.Controls.ListViewItem})">
            <summary>
            Helper method to deselect all items in a ListView except specific view items list.
            </summary>
            <param name="listView"></param>
            <param name="exceptViewItems"></param>
        </member>
        <member name="M:Qhta.WPF.Utils.ListViewBehavior.SelectMultipleItems(System.Windows.Controls.ListView,System.Windows.Controls.ListViewItem)">
            <summary>
            Helper method to select multiple items in a list view when ListViewItem is currently pointed by mouse.
            </summary>
            <param name="listView"></param>
            <param name="listViewItem"></param>
            <returns></returns>
        </member>
        <member name="M:Qhta.WPF.Utils.ListViewBehavior.SelectMultipleItemsContinuously(System.Windows.Controls.ListView,System.Windows.Controls.ListViewItem,System.Boolean)">
            <summary>
            Helper method to select multiple items in a list view when ListViewItem is currently pointed by mouse.
            All items from StartItem to the current list view item are selected.
            </summary>
            <param name="listView"></param>
            <param name="listViewItem"></param>
            <param name="shiftControl">Is Shift key is currently pressed</param>
            <returns></returns>
        </member>
        <member name="M:Qhta.WPF.Utils.ListViewBehavior.GetAllItems(System.Windows.Controls.ListView,System.Collections.Generic.ICollection{System.Windows.Controls.ListViewItem})">
            <summary>
            Helper method to get all items of the ListView in the order specified by ItemContainerGenerator.
            </summary>
            <param name="listView"></param>
            <param name="allItems"></param>
        </member>
        <member name="T:Qhta.WPF.Utils.ListViewCustomizableCellPresenter">
            <summary>
            Class allows for reseting hard coded ListViewItem margins and paddings
            </summary>
        </member>
        <member name="M:Qhta.WPF.Utils.ListViewCustomizableCellPresenter.OnVisualParentChanged(System.Windows.DependencyObject)">
            <summary>
            Overriden method to handle visual parent changed.
            </summary>
            <param name="oldParent"></param>
        </member>
        <member name="F:Qhta.WPF.Utils.ListViewCustomizableCellPresenter.PaddingProperty">
            <summary>
            Padding dependency property registration
            </summary>
        </member>
        <member name="P:Qhta.WPF.Utils.ListViewCustomizableCellPresenter.Padding">
            <summary>
            Padding dependency property
            </summary>
        </member>
        <member name="T:Qhta.WPF.Utils.ListViewNavigator">
            <summary>
            Helper class with several methods invoking on moving selection in ListView.
            </summary>
        </member>
        <member name="E:Qhta.WPF.Utils.ListViewNavigator.PropUpdate">
            <summary>
            Event to invoke on property update.
            </summary>
        </member>
        <member name="M:Qhta.WPF.Utils.ListViewNavigator.TryUpdateProperty(System.Object)">
            <summary>
            Method that tries to invoke focusable fields in ListView.
            </summary>
            <param name="sender"></param>
            <returns></returns>
            <exception cref="T:System.InvalidCastException"></exception>
        </member>
        <member name="M:Qhta.WPF.Utils.ListViewNavigator.ListViewItem_PreviewKeyDown(System.Object,System.Windows.Input.KeyEventArgs)">
            <summary>
            Handler for ListViewItem PreviewKeyDown event.
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
            <exception cref="T:System.InvalidCastException"></exception>
        </member>
        <member name="M:Qhta.WPF.Utils.ListViewNavigator.ListView_SelectionChanged(System.Object,System.Windows.Controls.SelectionChangedEventArgs)">
            <summary>
            Handler for ListView SelectionChanged event.
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="M:Qhta.WPF.Utils.ListViewNavigator.ListView_MoveFocus(System.Windows.Controls.ListView,System.Windows.Input.TraversalRequest,System.Object)">
            <summary>
            Handler for ListView MoveFocus event.
            </summary>
            <param name="listView"></param>
            <param name="request"></param>
            <param name="selectedItem"></param>
        </member>
        <member name="T:Qhta.WPF.Utils.MvvmVisualTreeHelper">
            <summary>
            Utility class that contains a method working on VisualTree.
            </summary>
        </member>
        <member name="M:Qhta.WPF.Utils.MvvmVisualTreeHelper.FindVisualChildForDataContext``1(System.Windows.DependencyObject,System.Object)">
            <summary>
            Finds a visual child where DataContext equals dataObject.
            </summary>
            <typeparam name="VisualType"></typeparam>
            <param name="parent"></param>
            <param name="dataObject"></param>
            <returns></returns>
        </member>
        <member name="T:Qhta.WPF.Utils.ProgressMonitor`1">
            <summary>
            A class that reports progress in programmable time periods. 
            It updates a dependency property in an dependency object using target object dispatcher.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Qhta.WPF.Utils.ProgressMonitor`1.#ctor(System.Windows.DependencyObject,System.Windows.DependencyProperty,System.Int32)">
            <summary>
            Create for value only update.
            </summary>
            <param name="target">DependencyObject to be updated on Report</param>
            <param name="valueProperty">DependencyProperty of DependencyObject to be updated</param>
            <param name="updatePeriod">updatePeriod in milliseconds</param>
        </member>
        <member name="M:Qhta.WPF.Utils.ProgressMonitor`1.#ctor(System.Windows.DependencyObject,System.Windows.DependencyProperty,System.Windows.DependencyProperty,System.Int32)">
            <summary>
            Create for maximum and current value update.
            </summary>
            <param name="target">DependencyObject to be updated</param>
            <param name="valueProperty">DependencyProperty of DependencyObject to be updated on Report</param>
            <param name="maxProperty">DependencyProperty of DependencyObject to be updated on SetMaximum</param>
            <param name="updatePeriod">updatePeriod in milliseconds (apply to valueProperty only)</param>
        </member>
        <member name="F:Qhta.WPF.Utils.ProgressMonitor`1.Target">
            <summary>
            DependencyObject that is updated.
            </summary>
        </member>
        <member name="F:Qhta.WPF.Utils.ProgressMonitor`1.ValueProperty">
            <summary>
            Dependency property that is updated.
            </summary>
        </member>
        <member name="F:Qhta.WPF.Utils.ProgressMonitor`1.MaximumProperty">
            <summary>
            A property with maximum value.
            </summary>
        </member>
        <member name="F:Qhta.WPF.Utils.ProgressMonitor`1.UpdatePeriod">
            <summary>
             Time period to report progress.
            </summary>
        </member>
        <member name="M:Qhta.WPF.Utils.ProgressMonitor`1.SetMaximum(`0)">
            <summary>
            Set maximum value using Target Dispatcher.
            </summary>
            <param name="value"></param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Qhta.WPF.Utils.ProgressMonitor`1.Report(`0)">
            <summary>
            Method to report a valu using Target Dispatcher.
            </summary>
            <param name="value"></param>
        </member>
        <member name="T:Qhta.WPF.Utils.ProposedValueErrorValidationRule">
            <summary>
            ValidationRule that checks a proposed property value.
            </summary>
        </member>
        <member name="M:Qhta.WPF.Utils.ProposedValueErrorValidationRule.#ctor(System.Windows.DependencyObject,System.Windows.DependencyProperty)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="targetObject"></param>
            <param name="targetProperty"></param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Qhta.WPF.Utils.ProposedValueErrorValidationRule.Validate(System.Object,System.Globalization.CultureInfo)">
            <summary>
            Defined Validate method.
            </summary>
            <param name="value"></param>
            <param name="cultureInfo"></param>
            <returns></returns>
        </member>
        <member name="T:Qhta.WPF.Utils.ProposedValueValidationBindingExtension">
            <summary>
            Markup extension that defines proposed value validation binding.
            </summary>
        </member>
        <member name="M:Qhta.WPF.Utils.ProposedValueValidationBindingExtension.#ctor(System.Windows.Data.Binding)">
            <summary>
            Initialization constructor.
            </summary>
            <param name="binding"></param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Qhta.WPF.Utils.ProposedValueValidationBindingExtension.ProvideValue(System.IServiceProvider)">
            <summary>
            Provides value using service provider.
            </summary>
            <param name="serviceProvider"></param>
            <returns></returns>
        </member>
        <member name="T:Qhta.WPF.Utils.PropUpdateEventArgs">
            <summary>
            CancelEventArgs that holds information on updating a property.
            </summary>
        </member>
        <member name="M:Qhta.WPF.Utils.PropUpdateEventArgs.#ctor(System.Object,System.Reflection.PropertyInfo,System.Object,System.Object)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="targetObject"></param>
            <param name="property"></param>
            <param name="newValue"></param>
            <param name="oldValue"></param>
        </member>
        <member name="P:Qhta.WPF.Utils.PropUpdateEventArgs.TargetObject">
            <summary>
            Updated object
            </summary>
        </member>
        <member name="P:Qhta.WPF.Utils.PropUpdateEventArgs.Property">
            <summary>
            Updated property info.
            </summary>
        </member>
        <member name="P:Qhta.WPF.Utils.PropUpdateEventArgs.NewValue">
            <summary>
            New value of the property.
            </summary>
        </member>
        <member name="P:Qhta.WPF.Utils.PropUpdateEventArgs.OldValue">
            <summary>
            Old value of the property.
            </summary>
        </member>
        <member name="T:Qhta.WPF.Utils.PropUpdateEventHandler">
            <summary>
            Handler for prop update event.
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="T:Qhta.WPF.Utils.TextBoxBehavior">
            <summary>
            Behavior class that defines TextBox properties.
            </summary>
        </member>
        <member name="M:Qhta.WPF.Utils.TextBoxBehavior.GetIsNullable(System.Windows.DependencyObject)">
            <summary>
            Getter for IsNullable property.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Qhta.WPF.Utils.TextBoxBehavior.SetIsNullable(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Setter for IsNullable property.
            </summary>
            <param name="obj"></param>
            <param name="value"></param>
        </member>
        <member name="F:Qhta.WPF.Utils.TextBoxBehavior.IsNullableProperty">
            <summary>
            Dependency property to store IsNullable property.
            </summary>
        </member>
        <member name="M:Qhta.WPF.Utils.TextBoxBehavior.AddClearedHandler(System.Windows.DependencyObject,System.Windows.RoutedEventHandler)">
            <summary>
            Add method for Cleared event handler.
            </summary>
            <param name="obj"></param>
            <param name="handler"></param>
        </member>
        <member name="M:Qhta.WPF.Utils.TextBoxBehavior.RemoveClearedHandler(System.Windows.DependencyObject,System.Windows.RoutedEventHandler)">
            <summary>
            Remove method for Cleared event handler.
            </summary>
            <param name="obj"></param>
            <param name="handler"></param>
        </member>
        <member name="F:Qhta.WPF.Utils.TextBoxBehavior.ClearedEvent">
            <summary>
            Routed event to store Cleared event handler.
            </summary>
        </member>
        <member name="M:Qhta.WPF.Utils.TextBoxBehavior.ClearButton_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            A method to handle ClearedButton Click event.
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="T:Qhta.WPF.Utils.TimingMessageBox">
            <summary>
            TimingMessageBox
            </summary>
        </member>
        <member name="M:Qhta.WPF.Utils.TimingMessageBox.Show(System.String,System.Int32)">
            <summary>
            Shows message box with empty caption, OK button, using timeout.
            </summary>
            <param name="text"></param>
            <param name="timeout"></param>
            <returns></returns>
        </member>
        <member name="M:Qhta.WPF.Utils.TimingMessageBox.Show(System.String,System.Windows.Size,System.Int32)">
            <summary>
            Shows message box with empty caption, OK button, using timeout.
            Uses specific window size.
            </summary>
            <param name="text"></param>
            <param name="size"></param>
            <param name="timeout"></param>
            <returns></returns>
        </member>
        <member name="M:Qhta.WPF.Utils.TimingMessageBox.Show(System.String,System.String,System.Int32)">
            <summary>
            Shows message box with specific caption, OK button, using timeout.
            </summary>
            <param name="text"></param>
            <param name="caption"></param>
            <param name="timeout"></param>
            <returns></returns>
        </member>
        <member name="M:Qhta.WPF.Utils.TimingMessageBox.Show(System.String,System.String,System.Windows.Size,System.Int32)">
            <summary>
            Shows message box with specific caption, OK button, using timeout.
            Uses specific window size.
            </summary>
            <param name="text"></param>
            <param name="caption"></param>
            <param name="size"></param>
            <param name="timeout"></param>
            <returns></returns>
        </member>
        <member name="M:Qhta.WPF.Utils.TimingMessageBox.Show(System.String,System.Windows.MessageBoxButton,System.Int32)">
            <summary>
            Shows message box with empty caption, specified button, using timeout.
            </summary>
            <param name="text"></param>
            <param name="button"></param>
            <param name="timeout"></param>
            <returns></returns>
        </member>
        <member name="M:Qhta.WPF.Utils.TimingMessageBox.Show(System.String,System.Windows.MessageBoxButton,System.Windows.Size,System.Int32)">
            <summary>
            Shows message box with empty caption, specified button, using timeout.
            Uses specific window size.
            </summary>
            <param name="text"></param>
            <param name="button"></param>
            <param name="size"></param>
            <param name="timeout"></param>
            <returns></returns>
        </member>
        <member name="M:Qhta.WPF.Utils.TimingMessageBox.Show(System.String,System.String,System.Windows.MessageBoxButton,System.Int32)">
            <summary>
            Shows message box with specified caption, specified button, using timeout.
            </summary>
            <param name="text"></param>
            <param name="caption"></param>
            <param name="button"></param>
            <param name="timeout"></param>
            <returns></returns>
        </member>
        <member name="M:Qhta.WPF.Utils.TimingMessageBox.Show(System.String,System.String,System.Windows.MessageBoxButton,System.Windows.Size,System.Int32)">
            <summary>
            Shows message box with specified caption, specified button, using timeout.
            Uses specific window size.
            </summary>
            <param name="text"></param>
            <param name="caption"></param>
            <param name="button"></param>
            <param name="size"></param>
            <param name="timeout"></param>
            <returns></returns>
        </member>
        <member name="M:Qhta.WPF.Utils.TimingMessageBox.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Qhta.WPF.Utils.ToolTipBehavior">
            <summary>
            Behavior class that defines properties and events for ToolTipPopup.
            </summary>
        </member>
        <member name="M:Qhta.WPF.Utils.ToolTipBehavior.GetActiveToolTipEnabled(System.Windows.DependencyObject)">
            <summary>
              ActiveToolTipEnabled behavior allows ToolTip Popup to contain active hyperlinks
            </summary>
        </member>
        <member name="M:Qhta.WPF.Utils.ToolTipBehavior.SetActiveToolTipEnabled(System.Windows.DependencyObject,System.Boolean)">
            <summary>
              ActiveToolTipEnabled behavior allows ToolTip Popup to contain active hyperlinks
            </summary>
        </member>
        <member name="F:Qhta.WPF.Utils.ToolTipBehavior.ActiveToolTipEnabledProperty">
            <summary>
              Dependency property for ActiveToolTipEnabled
            </summary>
        </member>
        <member name="T:Qhta.WPF.Utils.TreeViewBehavior">
            <summary>
            Behavior class that defines properties for TreeView.
            </summary>
        </member>
        <member name="M:Qhta.WPF.Utils.TreeViewBehavior.GetSelectedItem(System.Windows.DependencyObject)">
            <summary>
            Getter for SelectedItem property.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Qhta.WPF.Utils.TreeViewBehavior.SetSelectedItem(System.Windows.DependencyObject,System.Object)">
            <summary>
            Setter for SelectedItem property.
            </summary>
            <param name="obj"></param>
            <param name="value"></param>
        </member>
        <member name="F:Qhta.WPF.Utils.TreeViewBehavior.SelectedItemProperty">
            <summary>
            Dependency property to store SelectedItem property.
            </summary>
        </member>
        <member name="M:Qhta.WPF.Utils.TreeViewBehavior.GetUseSelectedItemChangeEvent(System.Windows.DependencyObject)">
            <summary>
            Getter for UseSelectedItemChangeEvent property.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Qhta.WPF.Utils.TreeViewBehavior.SetUseSelectedItemChangeEvent(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Setter for UseSelectedItemCHangeEvent property.
            </summary>
            <param name="obj"></param>
            <param name="value"></param>
        </member>
        <member name="F:Qhta.WPF.Utils.TreeViewBehavior.UseSelectedItemChangeEventProperty">
            <summary>
            Dependency property to store UseSelectedItemChangeEvent
            </summary>
        </member>
        <member name="M:Qhta.WPF.Utils.TreeViewBehavior.AddSelectedItemChangeHandler(System.Windows.DependencyObject,System.Windows.RoutedEventHandler)">
            <summary>
            Add method for SelectedItemChange event handler.
            </summary>
            <param name="obj"></param>
            <param name="handler"></param>
        </member>
        <member name="M:Qhta.WPF.Utils.TreeViewBehavior.RemoveSelectedItemChangeHandler(System.Windows.DependencyObject,System.Windows.RoutedEventHandler)">
            <summary>
            Remove method for SelectedItemChange event handler.
            </summary>
            <param name="obj"></param>
            <param name="handler"></param>
        </member>
        <member name="F:Qhta.WPF.Utils.TreeViewBehavior.SelectedItemChangeEvent">
            <summary>
            RoutedEvent to store SelectedItemChange event handler.
            </summary>
        </member>
        <member name="M:Qhta.WPF.Utils.TreeViewBehavior.CopyToClipboard(System.Windows.Controls.TreeView,System.Type,Qhta.WPF.Utils.ColumnsViewInfo)">
            <summary>
            Copies TreeView content fo clipboard as HTML table.
            </summary>
            <param name="treeView"></param>
            <param name="itemType"></param>
            <param name="columns"></param>
            <returns></returns>
        </member>
        <member name="M:Qhta.WPF.Utils.TreeViewBehavior.TreeViewSelectedItemBehavior.GetTreeViewItem(System.Windows.Controls.ItemsControl,System.Object)">
            <summary>
              Recursively search for an item in this subtree.
            </summary>
            <param name="container">
              The parent ItemsControl. This can be a TreeView or a TreeViewItem.
            </param>
            <param name="obj">
              The object to search item for.
            </param>
            <returns>
              The TreeViewItem that DataContext is the specified object.
            </returns>
        </member>
        <member name="M:Qhta.WPF.Utils.TreeViewBehavior.GetMultiSelect(System.Windows.DependencyObject)">
            <summary>
            For MultiSelect behavior not only tree view items source should implement IListSelector interface, 
            but also all tree view item items sources.
            </summary>
        </member>
        <member name="M:Qhta.WPF.Utils.TreeViewBehavior.SetMultiSelect(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            For MultiSelect behavior not only tree view items source should implement IListSelector interface, 
            but also all tree view item items sources.
            </summary>
        </member>
        <member name="F:Qhta.WPF.Utils.TreeViewBehavior.MultiSelectProperty">
            <summary>
            For MultiSelect behavior not only tree view items source should implement IListSelector interface, 
            but also all tree view item items sources.
            </summary>
        </member>
        <member name="M:Qhta.WPF.Utils.TreeViewBehavior.GetIsItemSelected(System.Windows.Controls.TreeViewItem)">
            <summary>
            Getter for IsItemSelected property.
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:Qhta.WPF.Utils.TreeViewBehavior.SetIsItemSelected(System.Windows.Controls.TreeViewItem,System.Boolean)">
            <summary>
            Setter for IsItemSelected property.
            </summary>
            <param name="element"></param>
            <param name="value"></param>
        </member>
        <member name="F:Qhta.WPF.Utils.TreeViewBehavior.IsItemSelectedProperty">
            <summary>
            Dependency property to store IsItemSelected property.
            </summary>
        </member>
        <member name="M:Qhta.WPF.Utils.TreeViewBehavior.GetSelectedItems(System.Windows.Controls.TreeView)">
            <summary>
            Getter for SelectedItems property.
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:Qhta.WPF.Utils.TreeViewBehavior.SetSelectedItems(System.Windows.Controls.TreeView,System.Collections.IList)">
            <summary>
            Setter for SelectedItmes property.
            </summary>
            <param name="element"></param>
            <param name="value"></param>
        </member>
        <member name="F:Qhta.WPF.Utils.TreeViewBehavior.SelectedItemsProperty">
            <summary>
            Dependency property to store SelectedItems property.
            </summary>
        </member>
        <member name="M:Qhta.WPF.Utils.TreeViewBehavior.CurrentItem(System.Windows.Controls.TreeView)">
            <summary>
            Getter for CurrentItem property.
            </summary>
            <param name="treeView"></param>
            <returns></returns>
        </member>
        <member name="M:Qhta.WPF.Utils.TreeViewBehavior.SetCurrentItem(System.Windows.Controls.TreeView,System.Object)">
            <summary>
            Setter for CurrentItem property.
            </summary>
            <param name="obj"></param>
            <param name="treeView"></param>
        </member>
        <member name="M:Qhta.WPF.Utils.TreeViewBehavior.UpdateCurrentItem(System.Windows.Controls.TreeView,System.Object)">
            <summary>
            Update method for CurrentItem.
            </summary>
            <param name="treeView"></param>
            <param name="value"></param>
        </member>
        <member name="F:Qhta.WPF.Utils.TreeViewBehavior.CurrentItemProperty">
            <summary>
            Dependency property to store CurrentItem property.
            </summary>
        </member>
        <member name="M:Qhta.WPF.Utils.TreeViewBehavior.GetUseCurrentItemChangeEvent(System.Windows.DependencyObject)">
            <summary>
            Getter for UseCurrentItemChangeEvent property.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Qhta.WPF.Utils.TreeViewBehavior.SetUseCurrentItemChangeEvent(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Setter for UseCurrentItemChangeEvent property.
            </summary>
            <param name="obj"></param>
            <param name="value"></param>
        </member>
        <member name="F:Qhta.WPF.Utils.TreeViewBehavior.UseCurrentItemChangeEventProperty">
            <summary>
            Dependency property to store UseCurrentItemChangeEvent property.
            </summary>
        </member>
        <member name="M:Qhta.WPF.Utils.TreeViewBehavior.AddCurrentItemChangeHandler(System.Windows.DependencyObject,System.Windows.RoutedEventHandler)">
            <summary>
            Add method for CurrentItemChange event handler.
            </summary>
            <param name="obj"></param>
            <param name="handler"></param>
        </member>
        <member name="M:Qhta.WPF.Utils.TreeViewBehavior.RemoveCurrentItemChangeHandler(System.Windows.DependencyObject,System.Windows.RoutedEventHandler)">
            <summary>
            Remove method for CurrentItemChange event handler.
            </summary>
            <param name="obj"></param>
            <param name="handler"></param>
        </member>
        <member name="F:Qhta.WPF.Utils.TreeViewBehavior.CurrentItemChangeEvent">
            <summary>
            Routed event to store CurrentItemChange event.
            </summary>
        </member>
        <member name="M:Qhta.WPF.Utils.TreeViewBehavior.GetStartItem(System.Windows.Controls.TreeView)">
            <summary>
            Getter for StartItem property.
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:Qhta.WPF.Utils.TreeViewBehavior.SetStartItem(System.Windows.Controls.TreeView,System.Object)">
            <summary>
            Setter for StartItem property.
            </summary>
            <param name="element"></param>
            <param name="value"></param>
        </member>
        <member name="F:Qhta.WPF.Utils.TreeViewBehavior.StartItemProperty">
            <summary>
            Dependency property to store StartItem property.
            </summary>
        </member>
        <member name="M:Qhta.WPF.Utils.TreeViewBehavior.FindTreeViewItem(System.Windows.DependencyObject)">
            <summary>
            Find TreeViewItem parent of the dependency object.
            </summary>
            <param name="dependencyObject"></param>
            <returns></returns>
        </member>
        <member name="M:Qhta.WPF.Utils.TreeViewBehavior.FindTreeView(System.Windows.DependencyObject)">
            <summary>
            Find TreeView parent of the dependency object.
            </summary>
            <param name="dependencyObject"></param>
            <returns></returns>
        </member>
        <member name="M:Qhta.WPF.Utils.TreeViewBehavior.SelectItems(System.Windows.Controls.TreeView,System.Windows.Controls.TreeViewItem)">
            <summary>
            Selecte items of the tree view.
            </summary>
            <param name="treeView"></param>
            <param name="treeViewItem"></param>
            <returns></returns>
        </member>
        <member name="M:Qhta.WPF.Utils.TreeViewBehavior.SelectSingleItem(System.Windows.Controls.TreeView,System.Windows.Controls.TreeViewItem)">
            <summary>
            Select a single tree view item.
            </summary>
            <param name="treeView"></param>
            <param name="treeViewItem"></param>
            <returns></returns>
        </member>
        <member name="M:Qhta.WPF.Utils.TreeViewBehavior.DeselectAllItems(System.Windows.Controls.TreeView,System.Windows.Controls.TreeViewItem)">
            <summary>
            Deselect all tree view items.
            </summary>
            <param name="treeView"></param>
            <param name="treeViewItem"></param>
        </member>
        <member name="M:Qhta.WPF.Utils.TreeViewBehavior.SelectMultipleItems(System.Windows.Controls.TreeView,System.Windows.Controls.TreeViewItem)">
            <summary>
            Selects multiple tree view items
            </summary>
            <param name="treeView"></param>
            <param name="treeViewItem"></param>
            <returns></returns>
        </member>
        <member name="M:Qhta.WPF.Utils.TreeViewBehavior.SelectMultipleItemsContinuously(System.Windows.Controls.TreeView,System.Windows.Controls.TreeViewItem,System.Boolean)">
            <summary>
            Selects multiple tree view items in a continuous range.
            </summary>
            <param name="treeView"></param>
            <param name="treeViewItem"></param>
            <param name="shiftControl"></param>
            <returns></returns>
        </member>
        <member name="M:Qhta.WPF.Utils.TreeViewBehavior.GetAllItems(System.Windows.Controls.TreeView,System.Windows.Controls.TreeViewItem,System.Collections.Generic.ICollection{System.Windows.Controls.TreeViewItem})">
            <summary>
            Get all items of the tree view.
            </summary>
            <param name="treeView"></param>
            <param name="treeViewItem"></param>
            <param name="allItems"></param>
        </member>
        <member name="T:Qhta.WPF.Utils.TreeViewHelper">
            <summary>
            Helper class for tree view.
            </summary>
        </member>
        <member name="M:Qhta.WPF.Utils.TreeViewHelper.ContainerFromItem(System.Windows.Controls.TreeView,System.Object)">
            <summary>
            Finds a tree view item as a container of the specific data.
            </summary>
            <param name="treeView"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Qhta.WPF.Utils.TreeViewHelper.ContainerFromItem(System.Windows.Controls.TreeViewItem,System.Object)">
            <summary>
            Finds a tree view item as a container of the specific data starting from specified item.
            </summary>
            <param name="thisItem"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="T:Qhta.WPF.Utils.TreeViewHelper.OnTreeViewVisible">
            <summary>
            Delegate for TreeViewItem Visible event handler.
            </summary>
            <param name="tvi"></param>
        </member>
        <member name="T:Qhta.WPF.Utils.TreeViewHelper.OnItemExpanded">
            <summary>
            Delegate for TreeViewItem expanded event handler.
            </summary>
            <param name="tvi"></param>
            <param name="item"></param>
        </member>
        <member name="T:Qhta.WPF.Utils.TreeViewHelper.OnAllItemExpanded">
            <summary>
            Delegate for AllItemsExpanded event.
            </summary>
        </member>
        <member name="M:Qhta.WPF.Utils.TreeViewHelper.SetItemHierarchyVisible(System.Windows.Controls.TreeView,System.Collections.Generic.IEnumerable{System.Object},Qhta.WPF.Utils.TreeViewHelper.OnTreeViewVisible)">
            <summary>
            You cannot rely on this method to be synchronous. If you have any action that depend on the TreeViewItem 
            (last item of collectionOfRootToNodePath) to be visible, you should set it in the 'onTreeViewItemVisible' method.
            This method should work for Virtualized and non virtualized tree.
            The difference with ExpandItem is that this one open up the tree up to the target but will not expand the target itself,
            while ExpandItem expand the target itself.
            </summary>
            <param name="treeView">TreeView where  an item has to be set visible</param>
            <param name="listOfRootToNodePath">Any collectionic List. The collection should have every objet of the path to the targeted item from the root
            to the target. For example for an apple tree: AppleTree (index 0), Branch4, SubBranch3, Leaf2 (index 3)</param>
            <param name="onTreeViewVisible">Optionnal</param>
        </member>
        <member name="M:Qhta.WPF.Utils.TreeViewHelper.ExpandItem(System.Windows.Controls.TreeView,System.Collections.Generic.IEnumerable{System.Object},Qhta.WPF.Utils.TreeViewHelper.OnTreeViewVisible)">
            <summary>
            You cannot rely on this method to be synchronous. If you have any action that depend on the TreeViewItem 
            (last item of collectionOfRootToNodePath) to be visible, you should set it in the 'onTreeViewItemVisible' method.
            This method should work for Virtualized and non virtualized tree.
            The difference with SetItemHierarchyVisible is that this one open the target while SetItemHierarchyVisible does not try to expand the target.
            (SetItemHierarchyVisible just ensure the target will be visible)
            </summary>
            <param name="treeView">TreeView where  an item has to be set visible</param>
            <param name="listOfRootToNodePath">The collection should have every objet of the path, from the root to the targeted item.
            For example for an apple tree: AppleTree (index 0), Branch4, SubBranch3, Leaf2</param>
            <param name="onTreeViewVisible">Optionnal</param>
        </member>
        <member name="M:Qhta.WPF.Utils.TreeViewHelper.ExpandSubContainers(System.Windows.Controls.ItemsControl,System.Action{System.Windows.Controls.TreeViewItem,System.Object},Qhta.WPF.Utils.TreeViewHelper.ReferenceCounterTracker)">
            <summary>
            Expand any ItemsControl (TreeView, TreeViewItem, ListBox, ComboBox, ...) and their childs if any (TreeView)
            </summary>
            <param name="ic"></param>
            <param name="actionItemExpanded"></param>
            <param name="referenceCounterTracker"></param>
        </member>
        <member name="M:Qhta.WPF.Utils.TreeViewHelper.ExpandAll(System.Windows.Controls.TreeView,System.Action{System.Windows.Controls.TreeViewItem,System.Object},System.Action)">
            <summary>
            This method is asynchronous.
            Expand all items and subs recursively if any. Does support virtualization (item recycling).
            But honestly, make you a favor, make your life easier en create a model view around your hierarchy with
            a IsExpanded property for each node level and bind it to each TreeView node level.
            </summary>
            <param name="treeView"></param>
            <param name="actionItemExpanded"></param>
            <param name="actionAllItemExpanded"></param>
        </member>
        <member name="T:Qhta.WPF.Utils.TreeViewHelper.CountToZeroAction">
            <summary>
            Delegate to Count to zero action.
            </summary>
        </member>
        <member name="T:Qhta.WPF.Utils.TreeViewHelper.ReferenceCounterTracker">
            <summary>
            Tracker for reference counter.
            </summary>
        </member>
        <member name="M:Qhta.WPF.Utils.TreeViewHelper.ReferenceCounterTracker.#ctor(System.Action)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="actionOnCountReachZero"></param>
        </member>
        <member name="M:Qhta.WPF.Utils.TreeViewHelper.ReferenceCounterTracker.AddRef">
            <summary>
            Increments reference counter.
            </summary>
        </member>
        <member name="M:Qhta.WPF.Utils.TreeViewHelper.ReferenceCounterTracker.ReleaseRef">
            <summary>
            Decrements reference counter.
            </summary>
        </member>
        <member name="T:Qhta.WPF.Utils.TreeViewItemBehavior">
            <summary>
            Exposes attached behaviors that can be
            applied to TreeViewItem objects.
            </summary>
        </member>
        <member name="M:Qhta.WPF.Utils.TreeViewItemBehavior.GetIsBroughtIntoViewWhenSelected(System.Windows.Controls.TreeViewItem)">
            <summary>
            Getter for IsBroughtIntoViewWhenSelected property
            </summary>
            <param name="treeViewItem"></param>
            <returns></returns>
        </member>
        <member name="M:Qhta.WPF.Utils.TreeViewItemBehavior.SetIsBroughtIntoViewWhenSelected(System.Windows.Controls.TreeViewItem,System.Boolean)">
            <summary>
            Setter for IsBroughtIntoViewWhenSelected property.
            </summary>
            <param name="treeViewItem"></param>
            <param name="value"></param>
        </member>
        <member name="F:Qhta.WPF.Utils.TreeViewItemBehavior.IsBroughtIntoViewWhenSelectedProperty">
            <summary>
            Dependency property to store IsBroughtIntoViewWhenSelected property.
            </summary>
        </member>
        <member name="T:Qhta.WPF.Utils.TriggerTracing">
            <summary>
            Contains attached properties to activate Trigger Tracing on the specified Triggers.
            This file alone should be dropped into your app.
            </summary>
        </member>
        <member name="M:Qhta.WPF.Utils.TriggerTracing.GetTriggerName(System.Windows.TriggerBase)">
            <summary>
            Gets the trigger name for the specified trigger. This will be used
            to identify the trigger in the debug output.
            </summary>
            <param name="trigger">The trigger.</param>
            <returns></returns>
        </member>
        <member name="M:Qhta.WPF.Utils.TriggerTracing.SetTriggerName(System.Windows.TriggerBase,System.String)">
            <summary>
            Sets the trigger name for the specified trigger. This will be used
            to identify the trigger in the debug output.
            </summary>
            <param name="trigger">The trigger.</param>
            <param name="value">Value to set.</param>
            <returns></returns>
        </member>
        <member name="F:Qhta.WPF.Utils.TriggerTracing.TriggerNameProperty">
            <summary>
            Dependency property to store TriggerName property.
            </summary>
        </member>
        <member name="M:Qhta.WPF.Utils.TriggerTracing.GetTraceEnabled(System.Windows.TriggerBase)">
            <summary>
            Gets a value indication whether trace is enabled for the specified trigger.
            </summary>
            <param name="trigger">The trigger.</param>
            <returns></returns>
        </member>
        <member name="M:Qhta.WPF.Utils.TriggerTracing.SetTraceEnabled(System.Windows.TriggerBase,System.Boolean)">
            <summary>
            Sets a value specifying whether trace is enabled for the specified trigger
            </summary>
            <param name="trigger"></param>
            <param name="value"></param>
        </member>
        <member name="F:Qhta.WPF.Utils.TriggerTracing.TraceEnabledProperty">
            <summary>
            Dependency property to store TraceEnabled property.
            </summary>
        </member>
        <member name="T:Qhta.WPF.Utils.TriggerTracing.TriggerTraceStoryboard">
            <summary>
            A dummy storyboard for tracing purposes
            </summary>
        </member>
        <member name="T:Qhta.WPF.Utils.TriggerTracing.TriggerTraceListener">
            <summary>
            A custom tracelistener.
            </summary>
        </member>
        <member name="T:Qhta.WPF.Utils.UndoManager`1">
            <summary>
            Implements undo operation for a specific object type.
            </summary>
            <typeparam name="ObjectType"></typeparam>
        </member>
        <member name="M:Qhta.WPF.Utils.UndoManager`1.StartProtection">
            <summary>
            Starts registering undo and redo operation.
            </summary>
        </member>
        <member name="M:Qhta.WPF.Utils.UndoManager`1.Done">
            <summary>
            Ends managing.
            </summary>
        </member>
        <member name="M:Qhta.WPF.Utils.UndoManager`1.SaveState(`0)">
            <summary>
            Save the current state.
            </summary>
            <param name="current"></param>
        </member>
        <member name="P:Qhta.WPF.Utils.UndoManager`1.CanUndo">
            <summary>
            Checks if undo stack is not empty.
            </summary>
        </member>
        <member name="P:Qhta.WPF.Utils.UndoManager`1.CanRedo">
            <summary>
            Checks if redo stack is not empty.
            </summary>
        </member>
        <member name="M:Qhta.WPF.Utils.UndoManager`1.UndoChanges(`0)">
            <summary>
            Undoes changes on specified object type.
            </summary>
            <param name="current"></param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Qhta.WPF.Utils.UndoManager`1.RedoChanges">
            <summary>
            Redoes changes.
            </summary>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="T:Qhta.WPF.Utils.ViewModels.BoolFilterViewModel">
            <summary>
            View model shown in TextFilterWindow.
            </summary>
        </member>
        <member name="M:Qhta.WPF.Utils.ViewModels.BoolFilterViewModel.#ctor(System.Reflection.PropertyInfo,System.String)">
            <summary>
            Initializing constructor.
            </summary>
        </member>
        <member name="M:Qhta.WPF.Utils.ViewModels.BoolFilterViewModel.#ctor(Qhta.WPF.Utils.ViewModels.BoolFilterViewModel)">
            <summary>
            Copying constructor.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Qhta.WPF.Utils.ViewModels.BoolFilterViewModel.CreateCopy">
            <summary>
            Creates a copy of this instance;
            </summary>
            <returns></returns>
        </member>
        <member name="M:Qhta.WPF.Utils.ViewModels.BoolFilterViewModel.ClearFilter">
            <summary>
            Clears the <see cref="P:Qhta.WPF.Utils.ViewModels.BoolFilterViewModel.Function"/> property.
            </summary>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="P:Qhta.WPF.Utils.ViewModels.BoolFilterViewModel.Function">
            <summary>
            Selected predicate function.
            </summary>
        </member>
        <member name="P:Qhta.WPF.Utils.ViewModels.BoolFilterViewModel.IsTrue">
            <summary>
            Specifies whether predicate function is IsTrue.
            </summary>
        </member>
        <member name="P:Qhta.WPF.Utils.ViewModels.BoolFilterViewModel.IsFalse">
            <summary>
            Specifies whether predicate function is IsFalse.
            </summary>
        </member>
        <member name="P:Qhta.WPF.Utils.ViewModels.BoolFilterViewModel.IsEmpty">
            <summary>
            Specifies whether predicate function is IsEmpty.
            </summary>
        </member>
        <member name="P:Qhta.WPF.Utils.ViewModels.BoolFilterViewModel.NotEmpty">
            <summary>
            Specifies whether predicate function is NotEmpty.
            </summary>
        </member>
        <member name="M:Qhta.WPF.Utils.ViewModels.BoolFilterViewModel.CreateFilter">
            <summary>
            Creates DataGridColumnFilter basing on current properties.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Qhta.WPF.Utils.ViewModels.BoolPredicateFunction">
            <summary>
            Enumeration of functions used to define boolean predicate.
            </summary>
        </member>
        <member name="F:Qhta.WPF.Utils.ViewModels.BoolPredicateFunction.IsTrue">
            <summary>
            Is boolean a true value.
            </summary>
        </member>
        <member name="F:Qhta.WPF.Utils.ViewModels.BoolPredicateFunction.IsFalse">
            <summary>
            Is boolean a false value.
            </summary>
        </member>
        <member name="F:Qhta.WPF.Utils.ViewModels.BoolPredicateFunction.IsEmpty">
            <summary>
            Boolean is undefined (is null).
            </summary>
        </member>
        <member name="F:Qhta.WPF.Utils.ViewModels.BoolPredicateFunction.NotEmpty">
            <summary>
            Boolean is defined (is not null).
            </summary>
        </member>
        <member name="T:Qhta.WPF.Utils.ViewModels.ColumnFilterOperation">
            <summary>
            Specifies what to do with a column filter.
            </summary>
        </member>
        <member name="F:Qhta.WPF.Utils.ViewModels.ColumnFilterOperation.Add">
            <summary>
            Add a filter to collection filter.
            </summary>
        </member>
        <member name="F:Qhta.WPF.Utils.ViewModels.ColumnFilterOperation.Edit">
            <summary>
            Edit a filter and replace the old one in collection filter.
            </summary>
        </member>
        <member name="F:Qhta.WPF.Utils.ViewModels.ColumnFilterOperation.Clear">
            <summary>
            Clear the filter and remove the old one from collection filter.
            </summary>
        </member>
        <member name="T:Qhta.WPF.Utils.ViewModels.ColumnFilterViewModel">
            <summary>
            View model stored and shown in FilterDialog.
            </summary>
        </member>
        <member name="P:Qhta.WPF.Utils.ViewModels.ColumnFilterViewModel.Operation">
            <summary>
             Specifies what to do with a column filter.
            </summary>
        </member>
        <member name="P:Qhta.WPF.Utils.ViewModels.ColumnFilterViewModel.EditOpEnabled">
            <summary>
            Specifies whether Edit operation is enabled. If not, then Add operation is enabled.
            </summary>
        </member>
        <member name="P:Qhta.WPF.Utils.ViewModels.ColumnFilterViewModel.DefaultOp">
            <summary>
            Specifies whether Operation is Add or Edit.
            </summary>
        </member>
        <member name="P:Qhta.WPF.Utils.ViewModels.ColumnFilterViewModel.AddOp">
            <summary>
            Specifies whether Operation is Add.
            </summary>
        </member>
        <member name="P:Qhta.WPF.Utils.ViewModels.ColumnFilterViewModel.EditOp">
            <summary>
            Specifies whether Operation is Edit.
            </summary>
        </member>
        <member name="P:Qhta.WPF.Utils.ViewModels.ColumnFilterViewModel.ClearOp">
            <summary>
             Specifies whether Operation is Clear.
            </summary>
        </member>
        <member name="P:Qhta.WPF.Utils.ViewModels.ColumnFilterViewModel.PropInfo">
            <summary>
            Stored info on column binding property.
            </summary>
        </member>
        <member name="P:Qhta.WPF.Utils.ViewModels.ColumnFilterViewModel.PropName">
            <summary>
            Displayed name of column binding property.
            </summary>
        </member>
        <member name="M:Qhta.WPF.Utils.ViewModels.ColumnFilterViewModel.#ctor(System.Reflection.PropertyInfo,System.String)">
            <summary>
            Initializing constructor.
            </summary>
        </member>
        <member name="M:Qhta.WPF.Utils.ViewModels.ColumnFilterViewModel.#ctor(Qhta.WPF.Utils.ViewModels.ColumnFilterViewModel)">
            <summary>
            Copying constructor that copies the data of the view model is needed
            because we need to edit its copy and after Cancel button is pressed
            the previous content remains unchanged.
            </summary>
        </member>
        <member name="M:Qhta.WPF.Utils.ViewModels.ColumnFilterViewModel.CreateCopy">
            <summary>
            This method must create a copy of the original instance;
            </summary>
            <returns></returns>
        </member>
        <member name="M:Qhta.WPF.Utils.ViewModels.ColumnFilterViewModel.CreateFilter">
            <summary>
            Creates Predicate basing on current properties.
            </summary>
            <returns>Predicate that takes a property value from the object.</returns>
        </member>
        <member name="M:Qhta.WPF.Utils.ViewModels.ColumnFilterViewModel.ClearFilter">
            <summary>
            Clear filter properties.
            </summary>
        </member>
        <member name="T:Qhta.WPF.Utils.ViewModels.TextFilterViewModel">
            <summary>
            View model shown in TextFilterWindow.
            </summary>
        </member>
        <member name="M:Qhta.WPF.Utils.ViewModels.TextFilterViewModel.#ctor(System.Reflection.PropertyInfo,System.String)">
            <summary>
            Initializing constructor.
            </summary>
        </member>
        <member name="M:Qhta.WPF.Utils.ViewModels.TextFilterViewModel.#ctor(Qhta.WPF.Utils.ViewModels.TextFilterViewModel)">
            <summary>
            Copying constructor.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Qhta.WPF.Utils.ViewModels.TextFilterViewModel.CreateCopy">
            <summary>
            Creates a copy of this instance;
            </summary>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Qhta.WPF.Utils.ViewModels.TextFilterViewModel.ClearFilter">
            <summary>
            Clears <see cref="P:Qhta.WPF.Utils.ViewModels.TextFilterViewModel.FilterText"/> and <see cref="P:Qhta.WPF.Utils.ViewModels.TextFilterViewModel.Function"/> properties.
            </summary>
        </member>
        <member name="P:Qhta.WPF.Utils.ViewModels.TextFilterViewModel.FilterText">
            <summary>
            Simple filter text.
            </summary>
        </member>
        <member name="P:Qhta.WPF.Utils.ViewModels.TextFilterViewModel.Function">
            <summary>
            Selected predicate function.
            </summary>
        </member>
        <member name="P:Qhta.WPF.Utils.ViewModels.TextFilterViewModel.IgnoreCase">
            <summary>
            Specifies whether letter case should be ignored.
            </summary>
        </member>
        <member name="P:Qhta.WPF.Utils.ViewModels.TextFilterViewModel.IsEqual">
            <summary>
            Specifies whether predicate function is IsEqual.
            </summary>
        </member>
        <member name="P:Qhta.WPF.Utils.ViewModels.TextFilterViewModel.NotEqual">
            <summary>
            Specifies whether predicate function is NotEqual.
            </summary>
        </member>
        <member name="P:Qhta.WPF.Utils.ViewModels.TextFilterViewModel.IsEmpty">
            <summary>
            Specifies whether predicate function is IsEmpty.
            </summary>
        </member>
        <member name="P:Qhta.WPF.Utils.ViewModels.TextFilterViewModel.NotEmpty">
            <summary>
            Specifies whether predicate function is NotEmpty.
            </summary>
        </member>
        <member name="P:Qhta.WPF.Utils.ViewModels.TextFilterViewModel.StartsWith">
            <summary>
            Specifies whether predicate function is StartsWith.
            </summary>
        </member>
        <member name="P:Qhta.WPF.Utils.ViewModels.TextFilterViewModel.EndsWith">
            <summary>
            Specifies whether predicate function is EndsWith.
            </summary>
        </member>
        <member name="P:Qhta.WPF.Utils.ViewModels.TextFilterViewModel.Contains">
            <summary>
            Specifies whether predicate function is Contains.
            </summary>
        </member>
        <member name="P:Qhta.WPF.Utils.ViewModels.TextFilterViewModel.RegExpr">
            <summary>
            Specifies whether predicate function is RegExpr.
            </summary>
        </member>
        <member name="M:Qhta.WPF.Utils.ViewModels.TextFilterViewModel.CreateFilter">
            <summary>
            Creates DataGridColumnFilter basing on current properties.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Qhta.WPF.Utils.ViewModels.TextPredicateFunction">
            <summary>
            Enumeration of functions used to define text predicate,
            </summary>
        </member>
        <member name="F:Qhta.WPF.Utils.ViewModels.TextPredicateFunction.IsEqual">
            <summary>
            Is text equal to specific string.
            </summary>
        </member>
        <member name="F:Qhta.WPF.Utils.ViewModels.TextPredicateFunction.NotEqual">
            <summary>
            Text is not equal to specific string.
            </summary>
        </member>
        <member name="F:Qhta.WPF.Utils.ViewModels.TextPredicateFunction.IsEmpty">
            <summary>
            Text is null or empty.
            </summary>
        </member>
        <member name="F:Qhta.WPF.Utils.ViewModels.TextPredicateFunction.NotEmpty">
            <summary>
            Text is not null and is not empty.
            </summary>
        </member>
        <member name="F:Qhta.WPF.Utils.ViewModels.TextPredicateFunction.StartsWith">
            <summary>
            Text starts with specific string.
            </summary>
        </member>
        <member name="F:Qhta.WPF.Utils.ViewModels.TextPredicateFunction.EndsWith">
            <summary>
            Text ends with specific string.
            </summary>
        </member>
        <member name="F:Qhta.WPF.Utils.ViewModels.TextPredicateFunction.Contains">
            <summary>
            Text contains specific string.
            </summary>
        </member>
        <member name="F:Qhta.WPF.Utils.ViewModels.TextPredicateFunction.RegExpr">
            <summary>
            Regular expression is found in text.
            </summary>
        </member>
        <member name="T:Qhta.WPF.Utils.Views.BoolFilterView">
            <summary>
            Interaction logic for BoolFilterView.xaml
            </summary>
            <summary>
            BoolFilterView
            </summary>
        </member>
        <member name="M:Qhta.WPF.Utils.Views.BoolFilterView.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Qhta.WPF.Utils.Views.ColumnFilterDialog">
            <summary>
            Popup window to edit text filter
            </summary>
            <summary>
            ColumnFilterDialog
            </summary>
        </member>
        <member name="M:Qhta.WPF.Utils.Views.ColumnFilterDialog.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Qhta.WPF.Utils.Views.TextFilterView">
            <summary>
            Interaction logic for TextFilterView.xaml
            </summary>
            <summary>
            TextFilterView
            </summary>
        </member>
        <member name="M:Qhta.WPF.Utils.Views.TextFilterView.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Qhta.WPF.Utils.FilterButtonShape">
            <summary>
            Enumeration of the shape of the filter button image.
            </summary>
        </member>
        <member name="F:Qhta.WPF.Utils.FilterButtonShape.Empty">
            <summary>
            Filter glyph is empty.
            </summary>
        </member>
        <member name="F:Qhta.WPF.Utils.FilterButtonShape.Filled">
            <summary>
            Filter glyph is filled
            </summary>
        </member>
        <member name="T:Qhta.WPF.Utils.VisualTreeHelperExt">
            <summary>
            Extensions for VisualTreeHelper
            </summary>
        </member>
        <member name="M:Qhta.WPF.Utils.VisualTreeHelperExt.GetVisualChildCollection``1(System.Object)">
            <summary>
            Gets a collection of visual children of the specified type
            </summary>
            <typeparam name="T"></typeparam>
            <param name="parent"></param>
            <returns></returns>
        </member>
        <member name="M:Qhta.WPF.Utils.VisualTreeHelperExt.GetVisualChildCollection``1(System.Windows.DependencyObject,System.Collections.Generic.List{``0})">
            <summary>
            Gets a collection of visual children of the specified type
            </summary>
            <typeparam name="T"></typeparam>
            <param name="parent"></param>
            <param name="visualCollection"></param>
        </member>
        <member name="M:Qhta.WPF.Utils.VisualTreeHelperExt.FindRootVisualParent(System.Windows.DependencyObject)">
            <summary>
            Finds a root visual parent.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Qhta.WPF.Utils.VisualTreeHelperExt.FindRootVisualParent``1(System.Windows.DependencyObject)">
            <summary>
            Finds a root visual parent of the specified type.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Qhta.WPF.Utils.VisualTreeHelperExt.FindRootParent``1(System.Windows.DependencyObject)">
            <summary>
            Finds a root paretn of the specified type.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Qhta.WPF.Utils.VisualTreeHelperExt.FindAncestor``1(System.Windows.DependencyObject)">
            <summary>
            Find ancestor of the specified type.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Qhta.WPF.Utils.VisualTreeHelperExt.FindAncestor``1(System.String,System.Windows.DependencyObject)">
            <summary>
            Find ancestor of the specified type.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="elementName"></param>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Qhta.WPF.Utils.VisualTreeHelperExt.FindAllDescendants``1(System.Windows.DependencyObject)">
            <summary>
            Find all descendants of the specified type.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Qhta.WPF.Utils.VisualTreeHelperExt.GetChildrenCount(System.Windows.DependencyObject)">
            <summary>
            Returns all children count.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Qhta.WPF.Utils.VisualTreeHelperExt.GetChild(System.Windows.DependencyObject,System.Int32)">
            <summary>
            Get a child of the specific index.
            </summary>
            <param name="obj"></param>
            <param name="n"></param>
            <returns></returns>
        </member>
        <member name="M:Qhta.WPF.Utils.VisualTreeHelperExt.FindDescendant``1(System.Windows.DependencyObject)">
            <summary>
            Find first descendant of the specific type.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Qhta.WPF.Utils.VisualTreeHelperExt.FindDescendant``1(System.String,System.Windows.DependencyObject)">
            <summary>
            Find first descendant of the specific type and specific name.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="elementName"></param>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Qhta.WPF.Utils.VisualTreeHelperExt.FindDescendant``1(System.Type[],System.Windows.DependencyObject)">
            <summary>
            Find first descendant of one of the specific types.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="subtypes"></param>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Qhta.WPF.Utils.VisualTreeHelperExt.FindFirstFocusableDescendant(System.Windows.DependencyObject)">
            <summary>
            First first focusable descendant.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Qhta.WPF.Utils.VisualTreeHelperExt.FindAllFocusableDescendants(System.Windows.DependencyObject)">
            <summary>
            Find all focusable descenants.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Qhta.WPF.Utils.VisualTreeHelperExt.DumpElement(System.Windows.DependencyObject,System.String)">
            <summary>
            Helper method to dump element to XAML file.
            </summary>
            <param name="obj"></param>
            <param name="filename"></param>
        </member>
        <member name="M:Qhta.WPF.Utils.VisualTreeHelperExt.DumpElement(System.Windows.DependencyObject,System.Xml.XmlWriter)">
            <summary>
            Helper method to dump element to the specific Xml writer.
            </summary>
            <param name="obj"></param>
            <param name="writer"></param>
        </member>
        <member name="M:Qhta.WPF.Utils.VisualTreeHelperExt.FindColumnsContent(System.Windows.Controls.ListViewItem)">
            <summary>
            Find columns witch have content framework elements.
            </summary>
            <param name="listViewItem"></param>
            <returns></returns>
        </member>
        <member name="M:Qhta.WPF.Utils.VisualTreeHelperExt.FindColumnsContent``1(System.Windows.Controls.ListViewItem)">
            <summary>
            Find columns witch have content framework elements.
            </summary>
            <typeparam name="ElementType"></typeparam>
            <param name="listViewItem"></param>
            <returns></returns>
        </member>
        <member name="M:Qhta.WPF.Utils.VisualTreeHelperExt.FindColumnsContent``1(System.Type[],System.Windows.Controls.ListViewItem)">
            <summary>
            Find columns witch have content framework elements.
            </summary>
            <typeparam name="ElementType"></typeparam>
            <param name="subtypes"></param>
            <param name="listViewItem"></param>
            <returns></returns>
        </member>
        <member name="M:Qhta.WPF.Utils.VisualTreeHelperExt.DebugText(System.Windows.FrameworkElement)">
            <summary>
            Helper method to get debug text of the framework element.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Qhta.WPF.Utils.VisualTreeHelperExt.DebugText(System.Windows.IInputElement)">
            <summary>
            Helper method to get debug text of the input element
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Qhta.WPF.Utils.VisualTreeHelperExt.DebugText(System.Object)">
            <summary>
            Helper method to get debug text of the object.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="T:XamlGeneratedNamespace.GeneratedInternalTypeHelper">
            <summary>
            GeneratedInternalTypeHelper
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.CreateInstance(System.Type,System.Globalization.CultureInfo)">
            <summary>
            CreateInstance
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.GetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Globalization.CultureInfo)">
            <summary>
            GetPropertyValue
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.SetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Object,System.Globalization.CultureInfo)">
            <summary>
            SetPropertyValue
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.CreateDelegate(System.Type,System.Object,System.String)">
            <summary>
            CreateDelegate
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.AddEventHandler(System.Reflection.EventInfo,System.Object,System.Delegate)">
            <summary>
            AddEventHandler
            </summary>
        </member>
    </members>
</doc>
