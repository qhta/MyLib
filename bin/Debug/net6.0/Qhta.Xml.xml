<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Qhta.Xml</name>
    </assembly>
    <members>
        <member name="T:Qhta.Xml.IRealTypeConverter">
            <summary>
              Interface for a type converter with unit property.
            </summary>
        </member>
        <member name="P:Qhta.Xml.IRealTypeConverter.Unit">
            <summary>
            Defines string shortcut of unit.
            </summary>
        </member>
        <member name="T:Qhta.Xml.IXmlConverter">
            <summary>
              Reads and writes object from/to XML.
              Can be defined in a data class.
            </summary>
        </member>
        <member name="P:Qhta.Xml.IXmlConverter.CanRead">
            <summary>
            Specifies if it can read.
            </summary>
        </member>
        <member name="P:Qhta.Xml.IXmlConverter.CanWrite">
            <summary>
            Specifies if it can write.
            </summary>
        </member>
        <member name="M:Qhta.Xml.IXmlConverter.WriteXml(System.Object,Qhta.Xml.IXmlWriter,System.Object,Qhta.Xml.IXmlSerializer)">
            <summary>
            Writers an object to XML using IXmlWriter.
            </summary>
        </member>
        <member name="M:Qhta.Xml.IXmlConverter.ReadXml(System.Object,Qhta.Xml.IXmlReader,System.Type,System.Object,Qhta.Xml.IXmlSerializer)">
            <summary>
            Reads an object from XML using IXmlReaded.
            </summary>
        </member>
        <member name="M:Qhta.Xml.IXmlConverter.CanConvert(System.Type)">
            <summary>
            Specifies if it can convert an object type.
            </summary>
            <param name="objectType"></param>
            <returns></returns>
        </member>
        <member name="T:Qhta.Xml.IXmlReader">
            <summary>
            Defines methods that must be implemented in an XmlReader.
            </summary>
        </member>
        <member name="M:Qhta.Xml.IXmlReader.Dispose">
            <summary>
             IDisposable interface
            </summary>
        </member>
        <member name="M:Qhta.Xml.IXmlReader.Close">
            <summary>
             Closes the stream/TextReader (if CloseInput==true), changes the ReadState to Closed, and sets all the properties back to zero/empty string.
            </summary>
        </member>
        <member name="P:Qhta.Xml.IXmlReader.BaseXmlReader">
            <summary>
            Needed to use IXmlSerializable interface.
            </summary>
        </member>
        <member name="P:Qhta.Xml.IXmlReader.Settings">
            <summary>
             Predefined reader settings
            </summary>
        </member>
        <member name="P:Qhta.Xml.IXmlReader.WhitespaceHandling">
            <summary>
            Gets or sets the whitespace handling.
            Can return all Whitespace and SignificantWhitespace nodes,
            or just SignificantWhitespace, i.e. whitespace nodes that are in scope of xml:space="preserve",
            no Whitespace at all.
            </summary>
        </member>
        <member name="P:Qhta.Xml.IXmlReader.EOF">
            <summary>
             Returns true when the XmlReader is positioned at the end of the stream.
            </summary>
        </member>
        <member name="P:Qhta.Xml.IXmlReader.ReadState">
            <summary>
             Returns the read state of the XmlReader.
            </summary>
        </member>
        <member name="P:Qhta.Xml.IXmlReader.NodeType">
            <summary>
             Get the type of the current node.
            </summary>
        </member>
        <member name="P:Qhta.Xml.IXmlReader.Name">
            <summary>
             Gets the name of the current node, including the namespace prefix.
            </summary>
        </member>
        <member name="P:Qhta.Xml.IXmlReader.LocalName">
            <summary>
             Gets the name of the current node without the namespace prefix.
            </summary>
        </member>
        <member name="P:Qhta.Xml.IXmlReader.NamespaceURI">
            <summary>
             Gets the namespace URN (as defined in the W3C Namespace Specification) of the current namespace scope.
            </summary>
        </member>
        <member name="P:Qhta.Xml.IXmlReader.Prefix">
            <summary>
             Gets the namespace prefix associated with the current node.
            </summary>
        </member>
        <member name="P:Qhta.Xml.IXmlReader.HasValue">
            <summary>
             Gets a value indicating whether the current node can have a Value.
            </summary>
        </member>
        <member name="P:Qhta.Xml.IXmlReader.ValueType">
            <summary>
             returns the type of the current node
            </summary>
        </member>
        <member name="P:Qhta.Xml.IXmlReader.Value">
            <summary>
             Gets the text value of the current node.
            </summary>
        </member>
        <member name="P:Qhta.Xml.IXmlReader.Depth">
            <summary>
             Gets the depth of the current node in the XML element stack.
            </summary>
        </member>
        <member name="P:Qhta.Xml.IXmlReader.BaseURI">
            <summary>
             Gets the base URI of the current node.
            </summary>
        </member>
        <member name="P:Qhta.Xml.IXmlReader.IsEmptyElement">
            <summary>
             Gets a value indicating whether the current node is an empty element (for example, <MyElement/>).
            </summary>
        </member>
        <member name="P:Qhta.Xml.IXmlReader.IsDefault">
            <summary>
             Gets a value indicating whether the current node is an attribute that was generated from the default value defined in the DTD or schema.
            </summary>
        </member>
        <member name="P:Qhta.Xml.IXmlReader.QuoteChar">
            <summary>
             Gets the quotation mark character used to enclose the value of an attribute node.
            </summary>
        </member>
        <member name="P:Qhta.Xml.IXmlReader.XmlSpace">
            <summary>
             Gets the current xml:space scope.
            </summary>
        </member>
        <member name="P:Qhta.Xml.IXmlReader.XmlLang">
            <summary>
             Gets the current xml:lang scope.
            </summary>
        </member>
        <member name="P:Qhta.Xml.IXmlReader.LineNumber">
            <summary>
            Gets line number of XML text file where the exception occured.
            </summary>
        </member>
        <member name="P:Qhta.Xml.IXmlReader.LinePosition">
            <summary>
            Gets the position in line of XML text file where the exception occured.
            </summary>
        </member>
        <member name="P:Qhta.Xml.IXmlReader.HasAttributes">
            <summary>
             Returns true when the current node has any attributes.
            </summary>
        </member>
        <member name="P:Qhta.Xml.IXmlReader.AttributeCount">
            <summary>
             The number of attributes on the current node.
            </summary>
        </member>
        <member name="P:Qhta.Xml.IXmlReader.Item(System.Int32)">
            <summary>
             Gets the value of the attribute with the specified index.
            </summary>
        </member>
        <member name="P:Qhta.Xml.IXmlReader.Item(System.String)">
            <summary>
             Gets the value of the attribute with the specified Name.
            </summary>
        </member>
        <member name="P:Qhta.Xml.IXmlReader.Item(Qhta.Xml.XmlQualifiedTagName)">
            <summary>
             Gets the value of the attribute with the LocalName and NamespaceURI
            </summary>
        </member>
        <member name="M:Qhta.Xml.IXmlReader.GetAttribute(System.String)">
            <summary>
             Gets the value of the attribute with the specified Name
            </summary>
        </member>
        <member name="M:Qhta.Xml.IXmlReader.GetAttribute(Qhta.Xml.XmlQualifiedTagName)">
            <summary>
             Gets the value of the attribute with the LocalName and NamespaceURI
            </summary>
        </member>
        <member name="M:Qhta.Xml.IXmlReader.GetAttribute(System.Int32)">
            <summary>
             Gets the value of the attribute with the specified index.
            </summary>
        </member>
        <member name="M:Qhta.Xml.IXmlReader.ReadString">
            <summary>
             Concatenates values of textual nodes of the current content, ignoring comments and PIs, expanding entity references, and returns the content as a string. Stops at start tags and end tags.
            </summary>
        </member>
        <member name="M:Qhta.Xml.IXmlReader.ReadContentAs(System.Type)">
            <summary>
             Concatenates values of textual nodes of the current content, ignoring comments and PIs, expanding entity references,
             and converts the content to the requested type. Stops at start tags and end tags.
            </summary>
        </member>
        <member name="M:Qhta.Xml.IXmlReader.ReadElementContentAsString">
            <summary>
             Returns the content of the current element as a string. Moves to the node following the element's end tag.
            </summary>
        </member>
        <member name="M:Qhta.Xml.IXmlReader.ReadElementContentAsString(Qhta.Xml.XmlQualifiedTagName)">
            <summary>
             Checks local name and namespace of the current element and returns its content as a string. Moves to the node following the element's end tag.
            </summary>
        </member>
        <member name="M:Qhta.Xml.IXmlReader.ReadElementString">
            <summary>
             Reads a text-only element.
            </summary>
        </member>
        <member name="M:Qhta.Xml.IXmlReader.ReadElementString(System.String)">
            <summary>
             Checks that the Name property of the element found matches the given string before reading a text-only element.
            </summary>
        </member>
        <member name="M:Qhta.Xml.IXmlReader.ReadElementString(Qhta.Xml.XmlQualifiedTagName)">
            <summary>
             Checks that the LocalName and NamespaceURI properties of the element found matches the given strings before reading a text-only element.
            </summary>
        </member>
        <member name="M:Qhta.Xml.IXmlReader.MoveToAttribute(System.String)">
            <summary>
             Moves to the attribute with the specified Name.
            </summary>
        </member>
        <member name="M:Qhta.Xml.IXmlReader.MoveToAttribute(Qhta.Xml.XmlQualifiedTagName)">
            <summary>
             Moves to the attribute with the specified LocalName and NamespaceURI.
            </summary>
        </member>
        <member name="M:Qhta.Xml.IXmlReader.MoveToAttribute(System.Int32)">
            <summary>
             Moves to the attribute with the specified index.
            </summary>
        </member>
        <member name="M:Qhta.Xml.IXmlReader.MoveToFirstAttribute">
            <summary>
             Moves to the first attribute of the current node.
            </summary>
        </member>
        <member name="M:Qhta.Xml.IXmlReader.MoveToNextAttribute">
            <summary>
             Moves to the next attribute.
            </summary>
        </member>
        <member name="M:Qhta.Xml.IXmlReader.MoveToElement">
            <summary>
             Moves to the element that contains the current attribute node.
            </summary>
        </member>
        <member name="M:Qhta.Xml.IXmlReader.MoveToContent">
            <summary>
             Checks whether the current node is a content (non-whitespace text, CDATA, Element, EndElement, EntityReference or EndEntity) node.
             If the node is not a content node, then the method skips ahead to the next content node or end of file.
             Skips over nodes of type ProcessingInstruction, DocumentType, Comment, Whitespace and SignificantWhitespace.
            </summary>
        </member>
        <member name="M:Qhta.Xml.IXmlReader.Skip">
            <summary>
             Skips to the end tag of the current element.
            </summary>
        </member>
        <member name="M:Qhta.Xml.IXmlReader.Read">
            <summary>
             Reads the next node from the stream.
            </summary>
        </member>
        <member name="M:Qhta.Xml.IXmlReader.ReadAttributeValue">
            <summary>
             Parses the attribute value into one or more Text and/or EntityReference node types.
            </summary>
             <returns>True if there are nodes to return. False otherwise.</returns>
        </member>
        <member name="M:Qhta.Xml.IXmlReader.IsStartElement">
            <summary>
             Calls MoveToContent and tests if the current content node is a start tag or empty element tag (XmlNodeType.Element).
            </summary>
        </member>
        <member name="M:Qhta.Xml.IXmlReader.IsStartElement(System.String)">
            <summary>
             Calls MoveToContent and tests if the current content node is a start tag or empty element tag (XmlNodeType.Element)
             and if the Name property of the element found matches the given argument.
            </summary>
        </member>
        <member name="M:Qhta.Xml.IXmlReader.IsStartElement(Qhta.Xml.XmlQualifiedTagName)">
            <summary>
             Calls MoveToContent and tests if the current content node is a start tag or empty element tag (XmlNodeType.Element)
             and if the LocalName and NamespaceURI properties of the element found match the given strings.
            </summary>
        </member>
        <member name="M:Qhta.Xml.IXmlReader.ReadStartElement">
            <summary>
             Checks that the current node is an element and advances the reader to the next node.
            </summary>
        </member>
        <member name="M:Qhta.Xml.IXmlReader.ReadStartElement(System.String)">
            <summary>
             Checks that the current content node is an element with the given Name and advances the reader to the next node.
            </summary>
        </member>
        <member name="M:Qhta.Xml.IXmlReader.ReadStartElement(Qhta.Xml.XmlQualifiedTagName)">
            <summary>
             Checks that the current content node is an element with the given LocalName and NamespaceURI and advances the reader to the next node.
            </summary>
        </member>
        <member name="M:Qhta.Xml.IXmlReader.IsEndElement">
            <summary>
            Checks if reader node type is EndElement.
            </summary>
        </member>
        <member name="M:Qhta.Xml.IXmlReader.IsEndElement(System.String)">
            <summary>
            Checks if reader node type is EndElement and reade name is a specified string
            </summary>
        </member>
        <member name="M:Qhta.Xml.IXmlReader.IsEndElement(Qhta.Xml.XmlQualifiedTagName)">
            <summary>
            Checks if reader node type is EndElement and reade name is a specified local name and namespaceURI is a specified namespace.
            </summary>
        </member>
        <member name="M:Qhta.Xml.IXmlReader.ReadEndElement">
            <summary>
            Wrapper for ReadEndElement operation.
            Checks that the current content node is an end tag and advances the reader to the next node.
            </summary>
        </member>
        <member name="M:Qhta.Xml.IXmlReader.ReadEndElement(System.String)">
            <summary>
            Wrapper for ReadEndElement operation.
            Checks that the current content node is an end tag with a specified name and advances the reader to the next node.
            </summary>
        </member>
        <member name="M:Qhta.Xml.IXmlReader.ReadEndElement(Qhta.Xml.XmlQualifiedTagName)">
            <summary>
            Wrapper for ReadEndElement operation.
            Checks that the current content node is an end tag with a specified name and namespaceURI and advances the reader to the next node.
            </summary>
        </member>
        <member name="T:Qhta.Xml.IXmlSerializer">
            <summary>
              Definition of methods that must be implemented in a Xml serializer.
            </summary>
        </member>
        <member name="M:Qhta.Xml.IXmlSerializer.Serialize(System.IO.Stream,System.Object)">
            <summary>
            Serializes an object to the Stream.
            </summary>
            <param name="stream">The target of serialization.</param>
            <param name="obj">Serialized object.</param>
        </member>
        <member name="M:Qhta.Xml.IXmlSerializer.Serialize(System.Xml.XmlWriter,System.Object)">
            <summary>
            Serializes an object to the System.XmlWriter.
            </summary>
            <param name="xmlWriter">The target of serialization.</param>
            <param name="obj">Serialized object.</param>
        </member>
        <member name="M:Qhta.Xml.IXmlSerializer.Serialize(Qhta.Xml.IXmlWriter,System.Object)">
            <summary>
            Serializes an object to the System.XmlWriter.
            </summary>
            <param name="xmlWriter">The target of serialization.</param>
            <param name="obj">Serialized object.</param>
        </member>
        <member name="M:Qhta.Xml.IXmlSerializer.Deserialize(System.IO.Stream)">
            <summary>
            Deserialized and object from the stream.
            </summary>
            <param name="stream">Source of serialized data.</param>
            <returns>Deserialized object.</returns>
        </member>
        <member name="M:Qhta.Xml.IXmlSerializer.Deserialize(System.IO.TextReader)">
            <summary>
            Deserialized and object from the TextReader.
            </summary>
            <param name="textReader">Source of serialized data.</param>
            <returns>Deserialized object.</returns>
        </member>
        <member name="M:Qhta.Xml.IXmlSerializer.Deserialize(System.Xml.XmlReader)">
            <summary>
            Deserialized and object from the System.XmlReader.
            </summary>
            <param name="xmlReader">Source of serialized data.</param>
            <returns>Deserialized object.</returns>
        </member>
        <member name="M:Qhta.Xml.IXmlSerializer.Deserialize(Qhta.Xml.IXmlReader)">
            <summary>
            Deserialized and object from the IXmlReader.
            </summary>
            <param name="xmlReader">Source of serialized data.</param>
            <returns>Deserialized object.</returns>
        </member>
        <member name="M:Qhta.Xml.IXmlSerializer.WriteObject(System.Object)">
            <summary>
            Writes an object to XML.
            </summary>
        </member>
        <member name="M:Qhta.Xml.IXmlSerializer.WriteObject(System.Object,System.Object)">
            <summary>
            Writes an object in a specified context to XML.
            </summary>
        </member>
        <member name="M:Qhta.Xml.IXmlSerializer.ReadObject(System.Object)">
            <summary>
            Reads an object in a specified context from XML.
            </summary>
        </member>
        <member name="M:Qhta.Xml.IXmlSerializer.TryGetKnownType(System.String,System.Type@)">
            <summary>
            Tries to get a type for a specified type name.
            </summary>
            <param name="typeName"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Qhta.Xml.IXmlSerializer.TryGetTypeConverter(System.Type,System.ComponentModel.TypeConverter@)">
            <summary>
            Tries to get a type converter for a specified type.
            </summary>
            <param name="type"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="T:Qhta.Xml.IXmlWriter">
            <summary>
            Defines methods that must be implemented in an  XmlWriter.
            </summary>
        </member>
        <member name="M:Qhta.Xml.IXmlWriter.Close">
            <summary>
            Closes the XmlWriter and the underlying stream/TextReader (if Settings.CloseOutput is true).
            </summary>
        </member>
        <member name="M:Qhta.Xml.IXmlWriter.Flush">
            <summary>
            Flushes data that is in the internal buffers into the underlying streams/TextReader and flushes the stream/TextReader.
            </summary>
        </member>
        <member name="P:Qhta.Xml.IXmlWriter.EmitNamespaces">
            <summary>
            Gets or sets a value indicating whether namespaces will be written.
            </summary>
        </member>
        <member name="P:Qhta.Xml.IXmlWriter.Settings">
            <summary>
            Returns the settings describing the features of the writer. Returns null for V1 XmlWriters (XmlTextWriter).
            </summary>
        </member>
        <member name="P:Qhta.Xml.IXmlWriter.BaseXmlWriter">
            <summary>
            Needed to use IXmlSerializable interface.
            </summary>
        </member>
        <member name="M:Qhta.Xml.IXmlWriter.WriteStartDocument">
            <summary>
            Writes out the XML declaration with the version "1.0".
            </summary>
        </member>
        <member name="M:Qhta.Xml.IXmlWriter.WriteStartDocument(System.Boolean)">
            <summary>
            Writes out the XML declaration with the version "1.0" and the specified standalone attribute.
            </summary>
        </member>
        <member name="M:Qhta.Xml.IXmlWriter.WriteEndDocument">
            <summary>
            Closes any open elements or attributes and puts the writer back in the Start state.
            </summary>
        </member>
        <member name="M:Qhta.Xml.IXmlWriter.WriteNilAttribute">
            <summary>
            Writes the "xsi:nil=true" attribute that indicates whether an XML element has null value.
            If an XML element represents a string value, its null value is represented by an empty Xml element (i.e. &lt;Title/&gt;)
            and its zero-length value is represented by a pair of open-close Xml elements (i.e. &lt;Title &gt;&lt;/Title &gt;).
            </summary>
        </member>
        <member name="M:Qhta.Xml.IXmlWriter.WriteStartElement(Qhta.Xml.XmlQualifiedTagName)">
            <summary>
            Writes out the specified start tag with a specified tag name.
            </summary>
        </member>
        <member name="M:Qhta.Xml.IXmlWriter.WriteStartElement(System.String)">
            <summary>
            Writes out the specified start tag with a specified local name.
            </summary>
        </member>
        <member name="M:Qhta.Xml.IXmlWriter.WriteEndElement(Qhta.Xml.XmlQualifiedTagName)">
            <summary>
            Closes one element and pops the corresponding namespace scope.
            </summary>
        </member>
        <member name="M:Qhta.Xml.IXmlWriter.WriteEndElement(System.String)">
            <summary>
            Closes one element and pops the corresponding namespace scope.
            </summary>
        </member>
        <member name="M:Qhta.Xml.IXmlWriter.WriteFullEndElement(Qhta.Xml.XmlQualifiedTagName)">
            <summary>
            Closes one element and pops the corresponding namespace scope. Writes out a full end element tag, e.g.
            </summary>
        </member>
        <member name="M:Qhta.Xml.IXmlWriter.WriteFullEndElement(System.String)">
            <summary>
            Closes one element and pops the corresponding namespace scope. Writes out a full end element tag, e.g.
            </summary>
        </member>
        <member name="M:Qhta.Xml.IXmlWriter.WriteNamespaceDef(System.String,System.String)">
            <summary>
            Writes the namespace definition.
            </summary>
        </member>
        <member name="M:Qhta.Xml.IXmlWriter.WriteAttributeString(Qhta.Xml.XmlQualifiedTagName,System.String)">
            <summary>
            Writes out the attribute with the specified tag name.
            </summary>
        </member>
        <member name="M:Qhta.Xml.IXmlWriter.WriteAttributeString(System.String,System.String)">
            <summary>
            Writes out the attribute with the specified local name.
            </summary>
        </member>
        <member name="M:Qhta.Xml.IXmlWriter.WriteStartAttribute(Qhta.Xml.XmlQualifiedTagName)">
            <summary>
            Writes the start of an attribute with a specified tag name.
            </summary>
        </member>
        <member name="M:Qhta.Xml.IXmlWriter.WriteStartAttribute(System.String)">
            <summary>
            Writes the start of an attribute with a specified local name.
            </summary>
        </member>
        <member name="M:Qhta.Xml.IXmlWriter.WriteEndAttribute(Qhta.Xml.XmlQualifiedTagName)">
            <summary>
            Closes the attribute opened by WriteStartAttribute call.
            </summary>
        </member>
        <member name="M:Qhta.Xml.IXmlWriter.WriteEndAttribute(System.String)">
            <summary>
            Closes the attribute opened by WriteStartAttribute call.
            </summary>
        </member>
        <member name="M:Qhta.Xml.IXmlWriter.WriteWhitespace(System.String)">
            <summary>
            Writes out the given whitespace.
            </summary>
        </member>
        <member name="M:Qhta.Xml.IXmlWriter.WriteString(System.String)">
            <summary>
            Writes out the specified text content.
            </summary>
        </member>
        <member name="M:Qhta.Xml.IXmlWriter.WriteTypeAttribute(Qhta.Xml.XmlQualifiedTagName)">
            <summary>
            Writes a xsi:type="typename" attribute
            </summary>
        </member>
        <member name="P:Qhta.Xml.IXmlWriter.XsiNamespaceUsed">
            <summary>
            Option that specifies whether the reader used xsi namespace.
            </summary>
        </member>
        <member name="P:Qhta.Xml.IXmlWriter.XsdNamespaceUsed">
            <summary>
            Option that specifies whether the reader used xsd namespace.
            </summary>
        </member>
        <member name="P:Qhta.Xml.IXmlWriter.NamespacesUsed">
            <summary>
            Sorted list of used namespaces.
            </summary>
        </member>
        <member name="P:Qhta.Xml.IXmlWriter.WriteState">
            <summary>
            Returns the state of the XmlWriter.
            </summary>
        </member>
        <member name="P:Qhta.Xml.IXmlWriter.XmlSpace">
            <summary>
            Gets an XmlSpace representing the current xml:space scope.
            </summary>
        </member>
        <member name="P:Qhta.Xml.IXmlWriter.XmlLang">
            <summary>
            Gets the current xml:lang scope.
            </summary>
        </member>
        <member name="M:Qhta.Xml.IXmlWriter.WriteValue(System.Object)">
            <summary>
            Writes out the specified value.
            </summary>
        </member>
        <member name="M:Qhta.Xml.IXmlWriter.WriteSignificantSpaces(System.Boolean)">
            <summary>
            Specifies whether the significant spaces should be written.
            </summary>
            <param name="value"></param>
        </member>
        <member name="P:Qhta.Xml.IXmlWriter.TraceElementStack">
            <summary>
            Specifies whether the writer should trace element stack building.
            </summary>
        </member>
        <member name="P:Qhta.Xml.IXmlWriter.TraceAttributeStack">
            <summary>
            Specifies whether the writer should trace element stack building.
            </summary>
        </member>
        <member name="T:Qhta.Xml.SerializationOrderAttribute">
            <summary>
            Defines an attribute which can specify missing order number.
            Especially XmlAttribute has no "Order" property.
            </summary>
        </member>
        <member name="M:Qhta.Xml.SerializationOrderAttribute.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Qhta.Xml.SerializationOrderAttribute.#ctor(System.Int32)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="order"></param>
        </member>
        <member name="P:Qhta.Xml.SerializationOrderAttribute.Order">
            <summary>
            An order number for a member (XML attribute or XML element) to be emitted.
            </summary>
        </member>
        <member name="T:Qhta.Xml.XmlCollectionAttribute">
            <summary>
            Defines an attribute which can specify data of collection property, field or class that are needed for serialization/deserialization.
            Replaces <see cref="T:System.Xml.Serialization.XmlArrayAttribute"/>.
            </summary>
        </member>
        <member name="M:Qhta.Xml.XmlCollectionAttribute.#ctor">
            <summary>
             Default constructor.
            </summary>
        </member>
        <member name="M:Qhta.Xml.XmlCollectionAttribute.#ctor(System.String,System.Type)">
            <summary>
            Initializing constructor
            </summary>
            <param name="elementName"></param>
            <param name="collectionType"></param>
        </member>
        <member name="P:Qhta.Xml.XmlCollectionAttribute.CollectionType">
            <summary>
            Collection type to create.
            </summary>
        </member>
        <member name="P:Qhta.Xml.XmlCollectionAttribute.AddMethod">
            <summary>
            A method to add an item to the collection.
            </summary>
        </member>
        <member name="P:Qhta.Xml.XmlCollectionAttribute.XmlConverter">
            <summary>
            A type of XmlConverter which can be defined for a collection.
            </summary>
        </member>
        <member name="T:Qhta.Xml.Serialization.XmlContentElementAttribute">
            <summary>
              Defines an attribute which can specify that a property or field is serialized without preceding xml tag.
              (as a content of parent object element).
            </summary>
        </member>
        <member name="T:Qhta.Xml.Serialization.XmlContentPropertyAttribute">
            <summary>
              This is a replacement for "System.Windows.Markup.ContentPropertyAttribute"
              which is allowed only for .NET Framework, but not for .NET Core.
            </summary>
        </member>
        <member name="M:Qhta.Xml.Serialization.XmlContentPropertyAttribute.#ctor(System.String)">
            <summary>
              This attribute hold the name of the property used to get/set the Xml content.
              of the Xml element.
            </summary>
            <param name="name">A name of the public property of any type</param>
        </member>
        <member name="P:Qhta.Xml.Serialization.XmlContentPropertyAttribute.Name">
            <summary>
              Name of the public property of any type.
            </summary>
        </member>
        <member name="T:Qhta.Xml.XmlConverterAttribute">
            <summary>
            Defines an attribute which can specify a type converter for a class, property or field.
            </summary>
        </member>
        <member name="M:Qhta.Xml.XmlConverterAttribute.#ctor(System.Type,System.Object[])">
            <summary>
            Initializing constructor.
            </summary>
            <param name="converterType"></param>
            <param name="args"></param>
        </member>
        <member name="P:Qhta.Xml.XmlConverterAttribute.ConverterType">
            <summary>
            A type of the converter.
            </summary>
        </member>
        <member name="P:Qhta.Xml.XmlConverterAttribute.Args">
            <summary>
            Arguments to be passed to the type converter.
            </summary>
        </member>
        <member name="T:Qhta.Xml.XmlDataFormatAttribute">
            <summary>
            Defines an attribute which can specify "Format" and "Culture" for a property or field.
            </summary>
        </member>
        <member name="P:Qhta.Xml.XmlDataFormatAttribute.Format">
            <summary>
            Format that must be suitable for a property or field data type.
            </summary>
        </member>
        <member name="P:Qhta.Xml.XmlDataFormatAttribute.Culture">
            <summary>
            Culture info for data conversion.
            </summary>
        </member>
        <member name="T:Qhta.Xml.XmlDictionaryAttribute">
            <summary>
            Defines an attribute which can specify data of dictionary property, field or class that are needed for serialization/deserialization.
            Extends <see cref="T:Qhta.Xml.XmlCollectionAttribute"/>
            </summary>
        </member>
        <member name="M:Qhta.Xml.XmlDictionaryAttribute.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Qhta.Xml.XmlDictionaryAttribute.#ctor(System.String)">
            <summary>
            Initializing constructor
            </summary>
            <param name="elementName"></param>
        </member>
        <member name="P:Qhta.Xml.XmlDictionaryAttribute.KeyType">
            <summary>
            Specifies a type of the key in the dictionary key-value pair.
            </summary>
        </member>
        <member name="P:Qhta.Xml.XmlDictionaryAttribute.KeyName">
            <summary>
            Specifies a name of the key in the dictionary key-value pair.
            </summary>
        </member>
        <member name="P:Qhta.Xml.XmlDictionaryAttribute.ValueType">
            <summary>
            Specifies a type of the value in the dictionary key-value pair.
            </summary>
        </member>
        <member name="P:Qhta.Xml.XmlDictionaryAttribute.AttributesAreKeys">
            <summary>
            Specifies that keys are serialized/deserialized as XML attributes.
            </summary>
        </member>
        <member name="P:Qhta.Xml.XmlDictionaryAttribute.ElementsAreKeys">
            <summary>
            Specifies that keys are serialized/deserialized as XML elements.
            </summary>
        </member>
        <member name="T:Qhta.Xml.XmlDictionaryItemAttribute">
            <summary>
            Defines an attribute which can specify item data of dictionary property, field or class that are needed for serialization/deserialization.
            There may be multiple such attributes declared for a single dictionary.
            </summary>
        </member>
        <member name="M:Qhta.Xml.XmlDictionaryItemAttribute.#ctor(System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="elementName"></param>
        </member>
        <member name="M:Qhta.Xml.XmlDictionaryItemAttribute.#ctor(System.String,System.String,System.Type)">
            <summary>
            Initializing constructor with key name and item type.
            </summary>
            <param name="elementName"></param>
            <param name="keyName"></param>
            <param name="itemType"></param>
        </member>
        <member name="M:Qhta.Xml.XmlDictionaryItemAttribute.#ctor(System.String,System.Type,System.String)">
            <summary>
            Initializing constructor with item type and key name.
            </summary>
            <param name="elementName"></param>
            <param name="itemType"></param>
            <param name="keyName"></param>
        </member>
        <member name="P:Qhta.Xml.XmlDictionaryItemAttribute.KeyAttributeName">
            <summary>
            Name of the key attribute.
            </summary>
        </member>
        <member name="P:Qhta.Xml.XmlDictionaryItemAttribute.ValueAttributeName">
            <summary>
            Name of the value attribute.
            </summary>
        </member>
        <member name="T:Qhta.Xml.XmlItemElementAttribute">
            <summary>
            Defines an attribute which can specify data needed to serialize/deserialize class/interface/struct items.
            There may be multiple such attributes declared for a single container.
            </summary>
        </member>
        <member name="M:Qhta.Xml.XmlItemElementAttribute.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Qhta.Xml.XmlItemElementAttribute.#ctor(System.String)">
            <summary>
            Initializing constructor with element name.
            </summary>
            <param name="elementName"></param>
        </member>
        <member name="M:Qhta.Xml.XmlItemElementAttribute.#ctor(System.String,System.Type)">
            <summary>
            Initializing constructor with element name and type.
            </summary>
            <param name="elementName"></param>
            <param name="type"></param>
        </member>
        <member name="M:Qhta.Xml.XmlItemElementAttribute.#ctor(System.Type)">
            <summary>
            Initializing constructor with element type.
            </summary>
            <param name="type"></param>
        </member>
        <member name="P:Qhta.Xml.XmlItemElementAttribute.AddMethod">
            <summary>
            A method of the container to add an item on deserialization.
            </summary>
        </member>
        <member name="P:Qhta.Xml.XmlItemElementAttribute.ConverterType">
            <summary>
            Type of the converter type used to convert an item on serialization/deserialization.
            </summary>
        </member>
        <member name="P:Qhta.Xml.XmlItemElementAttribute.Args">
            <summary>
            Arguments to be passed to the type converter.
            </summary>
        </member>
        <member name="T:Qhta.Xml.XmlAttributeNameKind">
            <summary>
            Specifies a kind of serialized/desetialized name.
            </summary>
        </member>
        <member name="F:Qhta.Xml.XmlAttributeNameKind.Element">
            <summary>
            Name represents serialized/deserialized element.
            </summary>
        </member>
        <member name="F:Qhta.Xml.XmlAttributeNameKind.Property">
            <summary>
            Name represents serialized/deserialized property or field.
            </summary>
        </member>
        <member name="F:Qhta.Xml.XmlAttributeNameKind.Method">
            <summary>
            Name represents a method used in serialization/deserialization.
            </summary>
        </member>
        <member name="T:Qhta.Xml.XmlNameAttribute">
            <summary>
            Defines an attribute which can specify a name recognized in a class/interface/struct.
            There may be multiple such attributes declared for a single type.
            </summary>
        </member>
        <member name="M:Qhta.Xml.XmlNameAttribute.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Qhta.Xml.XmlNameAttribute.#ctor(System.String)">
            <summary>
            Constructor with element name.
            </summary>
            <param name="elementName"></param>
        </member>
        <member name="P:Qhta.Xml.XmlNameAttribute.NameType">
            <summary>
            A type of the name
            </summary>
        </member>
        <member name="P:Qhta.Xml.XmlNameAttribute.ElementName">
            <summary>
            Gets/sets a name as an element name.
            </summary>
        </member>
        <member name="P:Qhta.Xml.XmlNameAttribute.PropertyName">
            <summary>
            Gets/sets a name as a property (or field) name.
            </summary>
        </member>
        <member name="P:Qhta.Xml.XmlNameAttribute.MethodName">
            <summary>
            Gets/sets a name as a method name.
            </summary>
        </member>
        <member name="T:Qhta.Xml.XmlObjectAttribute">
            <summary>
            Defines an attribute which specifies that the class instance must be serialized as full object
            - not as a simple collection.
            </summary>
        </member>
        <member name="T:Qhta.Xml.XmlQualifiedTagName">
            <summary>
            Declares an Xml Qualified Tag Name. Replaces <see cref="T:System.Xml.XmlQualifiedName"/>.
            </summary>
        </member>
        <member name="P:Qhta.Xml.XmlQualifiedTagName.Name">
            <summary>
            Local name of the tag.
            </summary>
        </member>
        <member name="P:Qhta.Xml.XmlQualifiedTagName.Namespace">
            <summary>
            Full namespace of the tag.
            </summary>
        </member>
        <member name="P:Qhta.Xml.XmlQualifiedTagName.Prefix">
            <summary>
            Prefix representing a namespace of the tag.
            </summary>
        </member>
        <member name="M:Qhta.Xml.XmlQualifiedTagName.#ctor">
            <summary>
            Default constructor initializing "Name" and "Namespace" to empty strings.
            </summary>
        </member>
        <member name="M:Qhta.Xml.XmlQualifiedTagName.#ctor(System.String)">
            <summary>
            Initializing constructor that splits a string with a colon (':').
            </summary>
            <param name="str"></param>
        </member>
        <member name="M:Qhta.Xml.XmlQualifiedTagName.#ctor(System.String,System.String)">
            <summary>
            Initializing constructor with a name and optional namespace.
            </summary>
            <param name="name"></param>
            <param name="nspace"></param>
        </member>
        <member name="M:Qhta.Xml.XmlQualifiedTagName.IsEmpty">
            <summary>
            Checks if "Name" is empty.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Qhta.Xml.XmlQualifiedTagName.ToString">
            <summary>
            Converts to string using a colon as a namespace or prefix separator.
            Uses prefix when namespace is empty.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Qhta.Xml.XmlQualifiedTagName.ToPrefixedString">
            <summary>
            Converts to string using a colon as a namespace or prefix separator.
            Uses namespace when prefix is empty or null.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Qhta.Xml.XmlQualifiedTagName.op_Implicit(System.String)~Qhta.Xml.XmlQualifiedTagName">
            <summary>
            Converts from a string
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Qhta.Xml.XmlQualifiedTagName.Equals(System.Xml.XmlQualifiedName)">
            <summary>
            Checks if a XmlQualifiedTagName object equals System.Xml.XmlQualifiedName object.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Qhta.Xml.XmlQualifiedTagName.GetHashCode">
            <summary>
            Returs a hash code using name and namespace.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Qhta.Xml.XmlQualifiedTagName.op_Addition(Qhta.Xml.XmlQualifiedTagName,System.String)">
            <summary>
            A plus operator to add a string to name. Namespace an prefix are returned without change.
            </summary>
            <param name="value"></param>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="T:Qhta.Xml.XmlReferenceAttribute">
            <summary>
            Defines an attribute which specifies than a property (or field) represents a reference.
            </summary>
        </member>
        <member name="T:Qhta.Xml.XmlReferencesAttribute">
            <summary>
            Defines an attribute which specifies than a property (or class) represents collection of references.
            </summary>
        </member>
        <member name="T:Qhta.Xml.XsdSimpleType">
            <summary>
            Defines Xsd simple types (with their XML tags).
            </summary>
        </member>
    </members>
</doc>
