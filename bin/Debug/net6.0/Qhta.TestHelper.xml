<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Qhta.TestHelper</name>
    </assembly>
    <members>
        <member name="T:Qhta.TestHelper.AbstractFileComparer">
            <summary>
            Abstract class for two files compare. One file is "expected", and one is "output" (received).
            </summary>
        </member>
        <member name="P:Qhta.TestHelper.AbstractFileComparer.Options">
            <summary>
            Options of comparizon (e.g. if letter case is ignored). Set up on comparer constructor,
            but content can be changed on run.
            </summary>
        </member>
        <member name="P:Qhta.TestHelper.AbstractFileComparer.Writer">
            <summary>
            Writer to receive detailed results of comparison. Set up on comparer constructor.
            </summary>
        </member>
        <member name="M:Qhta.TestHelper.AbstractFileComparer.#ctor(Qhta.TestHelper.FileCompareOptions,Qhta.TestHelper.ITraceTextWriter)">
            <summary>
            Simple constructor
            </summary>
            <param name="options">Options (instance of class <see cref="T:Qhta.TestHelper.FileCompareOptions"/>)</param>
            <param name="writer">Writer to receive detailed results of comparison</param>
        </member>
        <member name="M:Qhta.TestHelper.AbstractFileComparer.CompareFiles(System.String,System.String)">
            <summary>
            Abstract method of file compare
            </summary>
            <param name="recFilename">File containing Received content</param>
            <param name="expFilename">File containing expected output</param>
            <returns></returns>
        </member>
        <member name="M:Qhta.TestHelper.AbstractFileComparer.IsEmpty(System.String)">
            <summary>
            Check if a line is empty
            </summary>
            <param name="line">checked line</param>
            <returns>true if line contains no characted or only whitespace characters</returns>
        </member>
        <member name="M:Qhta.TestHelper.AbstractFileComparer.AreEqual(System.String,System.String)">
            <summary>
            Method for two string lines comparison. Compare options are applied.
            </summary>
            <param name="line1">first line to compare</param>
            <param name="line2">second line to compare</param>
            <returns>true is lines are equal</returns>
        </member>
        <member name="M:Qhta.TestHelper.AbstractFileComparer.CompressSpaces(System.String)">
            <summary>
            Method to compress subsequent spaces.
            </summary>
            <param name="line">Input line</param>
            <returns>Excessive spaces deleted</returns>
        </member>
        <member name="M:Qhta.TestHelper.AbstractFileComparer.ShowLine(System.String,System.Nullable{System.ConsoleColor})">
            <summary>
            Send a single line to the writer.
            Colors in options are applied.
            </summary>
            <param name="line">line to write</param>
            <param name="color">Color of the text (if null then lef unchanged)</param>
        </member>
        <member name="F:Qhta.TestHelper.AbstractFileComparer.firstLine">
            <summary>
            If we are at the beginning of trace output.
            </summary>
        </member>
        <member name="M:Qhta.TestHelper.AbstractFileComparer.ShowLines(System.String[],System.Nullable{System.ConsoleColor})">
            <summary>
            Send a sequence of lines to the writer.
            Colors in options are applied.
            </summary>
            <param name="lines">lines to write</param>
            <param name="color">Color of the text (if null then lef unchanged)</param>
        </member>
        <member name="T:Qhta.TestHelper.FileCompareOptions">
            <summary>
            Represents comparing options
            </summary>
        </member>
        <member name="P:Qhta.TestHelper.FileCompareOptions.IgnoreEmptyLines">
            <summary>
            If lines that are empty (without printable characters) are ignored in comparison
            </summary>
        </member>
        <member name="P:Qhta.TestHelper.FileCompareOptions.TrimLines">
            <summary>
            If spaces starting and ending lines are trimmed before comparison
            </summary>
        </member>
        <member name="P:Qhta.TestHelper.FileCompareOptions.CompressSpaces">
            <summary>
            If subsequent spaces are treated as single space
            </summary>
        </member>
        <member name="P:Qhta.TestHelper.FileCompareOptions.IgnoreCase">
            <summary>
            If letter case is ignored
            </summary>
        </member>
        <member name="P:Qhta.TestHelper.FileCompareOptions.CompareCulture">
            <summary>
            Culture to apply if ignore case
            </summary>
        </member>
        <member name="P:Qhta.TestHelper.FileCompareOptions.IgnoreAttributesOrder">
            <summary>
            If attributes order in Xml compare is ignored
            </summary>
        </member>
        <member name="P:Qhta.TestHelper.FileCompareOptions.IgnoreIgnorableAttribute">
            <summary>
            If mc:Ignorable attribute is ignored.
            </summary>
        </member>
        <member name="P:Qhta.TestHelper.FileCompareOptions.WriteContentIfEquals">
            <summary>
            if equal lines are written in text compare
            </summary>
        </member>
        <member name="P:Qhta.TestHelper.FileCompareOptions.DiffLimit">
            <summary>
            How many different regions are synchronized before return false.
            </summary>
        </member>
        <member name="P:Qhta.TestHelper.FileCompareOptions.SyncLimit">
            <summary>
            What is the maximum distance to search for the same line when difference.
            </summary>
        </member>
        <member name="P:Qhta.TestHelper.FileCompareOptions.EqualityMsg">
            <summary>
            Message written if files are equal
            </summary>
        </member>
        <member name="P:Qhta.TestHelper.FileCompareOptions.InequalityMsg">
            <summary>
            Message written if files are not equal
            </summary>
        </member>
        <member name="P:Qhta.TestHelper.FileCompareOptions.StartOfFile">
            <summary>
            Line written at start of file compare.
            </summary>
        </member>
        <member name="P:Qhta.TestHelper.FileCompareOptions.StartOfDiffRec">
            <summary>
            Line written at start of received file different lines or elements
            </summary>
        </member>
        <member name="P:Qhta.TestHelper.FileCompareOptions.StartOfDiffExp">
            <summary>
            Line written at start of expected file different lines or elements
            </summary>
        </member>
        <member name="P:Qhta.TestHelper.FileCompareOptions.StartOfDiffMis">
            <summary>
            Line written at start of missing elements taken from expected file
            </summary>
        </member>
        <member name="P:Qhta.TestHelper.FileCompareOptions.StartOfDiffExc">
            <summary>
            Line written at start of exceeded elements taken from received file
            </summary>
        </member>
        <member name="P:Qhta.TestHelper.FileCompareOptions.EndOfDiffs">
            <summary>
            Line written at end of different lines or elements
            </summary>
        </member>
        <member name="F:Qhta.TestHelper.FileCompareOptions.RecLinesColor">
            <summary>
            Color of received lines if shown in console.
            </summary>
        </member>
        <member name="F:Qhta.TestHelper.FileCompareOptions.ExpLinesColor">
            <summary>
            Color of expected lines if shown in console.
            </summary>
        </member>
        <member name="F:Qhta.TestHelper.FileCompareOptions.MisLinesColor">
            <summary>
            Color of missing lines if shown in console.
            </summary>
        </member>
        <member name="F:Qhta.TestHelper.FileCompareOptions.ExcLinesColor">
            <summary>
            Color of exceeded lines if shown in console.
            </summary>
        </member>
        <member name="T:Qhta.TestHelper.TextFileComparer">
            <summary>
            Concrete comparer for text files
            </summary>
        </member>
        <member name="M:Qhta.TestHelper.TextFileComparer.#ctor(Qhta.TestHelper.FileCompareOptions,Qhta.TestHelper.ITraceTextWriter)">
            <summary>
            Constructor invoking base class constructor
            </summary>
            <param name="options">Options to compare</param>
            <param name="writer">Writer used to show different lines</param>
        </member>
        <member name="M:Qhta.TestHelper.TextFileComparer.CompareFiles(System.String,System.String)">
            <summary>
            Implemented method of file comparison.
            Simply reads out whole files and invokes <see cref="M:Qhta.TestHelper.TextFileComparer.CompareTexts(System.String,System.String)"/>.
            </summary>
            <param name="recFilename">Received content filename</param>
            <param name="expFilename">Expected content filename</param>
            <returns>true is both files are equal</returns>
        </member>
        <member name="M:Qhta.TestHelper.TextFileComparer.CompareTexts(System.String,System.String)">
            <summary>
            Main text comparison method. 
            Input texts are splitted to lines using '\n' character and "\r\n" character pairs.
            Then <see cref="M:Qhta.TestHelper.TextFileComparer.CompareLines(System.String[],System.String[])"/> is called.
            </summary>
            <param name="recText">Received content text</param>
            <param name="expText">Expected content text</param>
            <returns>true if both texts are equal</returns>
        </member>
        <member name="M:Qhta.TestHelper.TextFileComparer.CompareLines(System.String[],System.String[])">
            <summary>
            Main method to compare collection of lines.
            Subsequent lines in the first and second collections are compared.
            If they are not equal then comparer tries to synchronize both collections,
            i.e. to find next equal lines. Unequal lines are shown using writer
            </summary>
            <param name="recLines">Received content text lines</param>
            <param name="expLines">Expected content text lines</param>
            <returns>true if both lines collections are equal</returns>
        </member>
        <member name="M:Qhta.TestHelper.TextFileComparer.TrySynchronize(System.String[],System.Int32,System.String[],System.Int32,System.Int32,System.Int32@,System.Int32@)">
            <summary>
            A method to synchronize output lines and expected lines if the difference is found.
            First different line in <paramref name="recLines"/> is pointed by <paramref name="outIndex"/>
            and first different line in <paramref name="expLines"/> is pointed by <paramref name="outIndex"/>
            Subsequent lines are compared in a maximum distance of <paramref name="maxDist"/>.
            New indexes <paramref name="newOutIndex"/> and <paramref name="newExpIndex"/> point the fist equal lines.
            If synchronization was successful then the different lines are shown.
            </summary>
            <param name="recLines">Received content text lines</param>
            <param name="outIndex">Index of first different line in <paramref name="recLines"/> collection</param>
            <param name="expLines">Expected content text lines</param>
            <param name="expIndex">Index of first different line in <paramref name="expLines"/> collection</param>
            <param name="maxDist">Maximum distance of search for the equal lines</param>
            <param name="newOutIndex">Index of the first equal line in <paramref name="recLines"/> collection</param>
            <param name="newExpIndex">Index of the first equal line in <paramref name="expLines"/> collection</param>
            <returns>true if equal lines found</returns>
        </member>
        <member name="M:Qhta.TestHelper.TextFileComparer.TrySync(System.String[],System.Int32,System.String[],System.Int32,System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Synchronization helper method.
            First tries to find equal line in first collection taking subsequent lines from the second one,
            next tries to find equal line in second collection taking subsequent lines from the first one.
            If not found in first and not in second trial then synchronization failes.
            Otherwise counts the distance of the first and the second trial and returns new indexes of the shorten one.
            </summary>
            <param name="lines1">First collection to search</param>
            <param name="index1">Index of search start in the first collection</param>
            <param name="lines2">Second collection to search</param>
            <param name="index2">Index of search start in the second collection</param>
            <param name="maxDist">Maximum distance of search</param>
            <param name="newIndex1">Index of found equal line in first collection, maxint if not found</param>
            <param name="newIndex2">Index of found equal line in second collection, maxint if not found</param>
            <returns>true if equal lines found</returns>
        </member>
        <member name="M:Qhta.TestHelper.TextFileComparer.TryFindEqualLines(System.String[],System.Int32,System.String[],System.Int32,System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Synchronization helper method.
            Takes subsequent lines from the second collection and searches for the equal line in the first collection.
            If the equal lines are found, both <paramref name="newIndex1"/> and <paramref name="newIndex2"/> 
            point out equal lines.
            The search is limited to <paramref name="maxDist"/> distance.
            If option <see cref="P:Qhta.TestHelper.FileCompareOptions.IgnoreEmptyLines"/> is set 
            then empty lines are ignored but are included in counting distance.
            </summary>
            <param name="lines1">First collection to search</param>
            <param name="index1">Index of search start in the first collection</param>
            <param name="lines2">Second collection to search</param>
            <param name="index2">Index of search start in the second collection</param>
            <param name="maxDist">Maximum distance of search</param>
            <param name="newIndex1">Index of found equal line in first collection, maxint if not found</param>
            <param name="newIndex2">Index of found equal line in second collection, maxint if not found</param>
            <returns>true if equal lines found</returns>
        </member>
        <member name="M:Qhta.TestHelper.TextFileComparer.TryFindEqualLine(System.String[],System.Int32,System.String,System.Int32,System.Int32@)">
            <summary>
            Synchronization helper method.
            Searches in a <paramref name="lines"/> collection starting at <paramref name="startIndex"/>
            for a line that is equal to <paramref name="expLine"/>.
            The search is limited to <paramref name="maxDist"/> distance.
            After search the fist equal line is pointed by <paramref name="foundIndex"/> parameter.
            If option <see cref="P:Qhta.TestHelper.FileCompareOptions.IgnoreEmptyLines"/> is set 
            then empty lines are ignored but are included in counting distance.
            </summary>
            <param name="lines">Collection of lines to search</param>
            <param name="startIndex">Start search index</param>
            <param name="expLine">Expected line</param>
            <param name="maxDist">Maximum distance of search</param>
            <param name="foundIndex"></param>
            <returns>True if equal line was found. If not, the <paramref name="foundIndex"/> should be ignored</returns>
        </member>
        <member name="T:Qhta.TestHelper.XmlFileComparer">
            <summary>
            Concrete class to compare Xml files. 
            </summary>
        </member>
        <member name="T:Qhta.TestHelper.XmlFileComparer.CompResult">
            <summary>
            Compare result for internal methods
            </summary>
        </member>
        <member name="M:Qhta.TestHelper.XmlFileComparer.#ctor(Qhta.TestHelper.FileCompareOptions,Qhta.TestHelper.ITraceTextWriter)">
            <summary>
            Constructor invoking base class constructor
            </summary>
            <param name="options">Options to compare</param>
            <param name="writer">Writer used to show different elements</param>
        </member>
        <member name="M:Qhta.TestHelper.XmlFileComparer.CompareFiles(System.String,System.String)">
            <summary>
            Implemented method of file comparison.
            Simply reads out whole xml documents and invokes <see cref="M:Qhta.TestHelper.XmlFileComparer.CompareXmlDocuments(System.Xml.Linq.XDocument,System.Xml.Linq.XDocument)"/>.
            </summary>
            <param name="recFilename">Received content filename</param>
            <param name="expFilename">Expected content filename</param>
            <returns>true is both files are equal</returns>
        </member>
        <member name="M:Qhta.TestHelper.XmlFileComparer.CompareXmlDocuments(System.Xml.Linq.XDocument,System.Xml.Linq.XDocument)">
            <summary>
            Main method to compare Xml documents. 
            Root elements are compared through CompareXmlElements.
            </summary>
            <param name="recDocument">Received Xml document</param>
            <param name="expDocument">Expected Xml document</param>
            <returns>true if both documents are equal</returns>
        </member>
        <member name="M:Qhta.TestHelper.XmlFileComparer.CompareXmlElements(System.Xml.Linq.XElement,System.Xml.Linq.XElement,System.Boolean,System.Boolean@)">
            <summary>
            Main method to compare XmlElements. If elements are different, they may be show.
            Parameters <paramref name="showUnequal"/> and <paramref name="shown"/> are important
            when the method is called recursive.
            </summary>
            <param name="recElement">Received Xml element</param>
            <param name="expElement">Expected Xml element</param>
            <param name="showUnequal">If unequal element should be shown</param>
            <param name="shown">If unequal element were shown</param>
            <returns>true if both elements are equal</returns>
        </member>
        <member name="M:Qhta.TestHelper.XmlFileComparer.TryCreateDictionary(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement},System.Collections.Generic.SortedDictionary{System.String,System.Xml.Linq.XElement}@)">
            <summary>
            Creates dictionary of elements using element names as keys.
            Returs true if, and only if, all elements have unique names.
            </summary>
            <param name="items">Input enumerations of XElements</param>
            <param name="itemsDictionary">Output dictionary of XElements</param>
            <returns></returns>
        </member>
        <member name="M:Qhta.TestHelper.XmlFileComparer.CompareXmlElements(System.Xml.Linq.XElement,System.Xml.Linq.XElement,System.Collections.Generic.SortedDictionary{System.String,System.Xml.Linq.XElement},System.Collections.Generic.SortedDictionary{System.String,System.Xml.Linq.XElement},System.Boolean,System.Boolean@)">
            <summary>
            Compares dictionaries of items of recElement and expElement
            </summary>
            <param name="recElement">Received Xml element</param>
            <param name="expElement">Expected Xml element</param>
            <param name="recItemsDict">List of child elements of out element</param>
            <param name="expItemsDict">List of child elements of exp element</param>
            <param name="showUnequal">If unequal element should be shown</param>
            <param name="shown">If unequal element were shown</param>
            <returns>true if both elements are equal</returns>
        </member>
        <member name="M:Qhta.TestHelper.XmlFileComparer.CompareXmlElements(System.Xml.Linq.XElement,System.Xml.Linq.XElement,System.Collections.Generic.List{System.Xml.Linq.XElement},System.Collections.Generic.List{System.Xml.Linq.XElement},System.Boolean,System.Boolean@)">
            <summary>
            Compares items lists of recElement and expElement.
            </summary>
            <param name="recElement">Received Xml element</param>
            <param name="expElement">Expected Xml element</param>
            <param name="outItemsList">List of child elements of out element</param>
            <param name="expItemsList">List of child elements of exp element</param>
            <param name="showUnequal">If unequal element should be shown</param>
            <param name="shown">If unequal element were shown</param>
            <returns>true if both elements are equal</returns>
        </member>
        <member name="M:Qhta.TestHelper.XmlFileComparer.CompareXmlAttributes(System.Xml.Linq.XElement,System.Xml.Linq.XElement)">
            <summary>
            Method to compare Xml attributes of two Xml elements.
            </summary>
            <param name="recElement">Received Xml element</param>
            <param name="expElement">Expected Xml element</param>
            <returns>true if attributes of both elements are equal</returns>
        </member>
        <member name="M:Qhta.TestHelper.XmlFileComparer.IgnoreAttribute(System.Xml.Linq.XAttribute)">
            <summary>
            Helper function to filter out NamespaceDeclarations and Ignorable attributes.
            </summary>
            <param name="attribute"></param>
            <returns></returns>
        </member>
        <member name="M:Qhta.TestHelper.XmlFileComparer.CompareAttrName(System.Xml.Linq.XAttribute,System.Xml.Linq.XAttribute)">
            <summary>
            Helper method to compare attribute names. Used to sort attribute lists.
            Namespaces are compared first, local names next.
            </summary>
            <param name="attr1">First attribute to compare</param>
            <param name="attr2">Second attribute to compare</param>
            <returns>1 if first name is greater then second, -1 it is less, 0 if are qual</returns>
        </member>
        <member name="M:Qhta.TestHelper.XmlFileComparer.CompareXmlAttribute(System.Xml.Linq.XAttribute,System.Xml.Linq.XAttribute)">
            <summary>
            Helper method to compare two attributes. Attribute namespaces, localnames and values are compared.
            </summary>
            <param name="recAttribute">First attribute to compare</param>
            <param name="expAttribute">Second attribute to compare</param>
            <returns>true if both attributes are euqal</returns>
        </member>
        <member name="M:Qhta.TestHelper.XmlFileComparer.ShowMissingElements(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})">
            <summary>
            Helper method to show collection of missing elements.
            </summary>
            <param name="expElements">Collection of missing Xml elements</param>
        </member>
        <member name="M:Qhta.TestHelper.XmlFileComparer.ShowExcessiveElements(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})">
            <summary>
            Helper method to show collection of excessive elements.
            </summary>
            <param name="recElements">Collection of excessive Xml elements</param>
        </member>
        <member name="M:Qhta.TestHelper.XmlFileComparer.ShowUnequalElements(System.Xml.Linq.XElement,System.Xml.Linq.XElement,System.Int32)">
            <summary>
            Helper method to show unequal elements.
            </summary>
            <param name="recElement">Received Xml element</param>
            <param name="expElement">Expected Xml element</param>
            <param name="linesLimit">Limit of content lines to show 
            (default 0 changed to <see cref="P:Qhta.TestHelper.FileCompareOptions.SyncLimit"/>)</param>
        </member>
        <member name="M:Qhta.TestHelper.XmlFileComparer.ShowUnequalElements(System.Xml.Linq.XElement[],System.Xml.Linq.XElement[],System.Int32)">
            <summary>
            Helper method to show unequal elements. Two collections of elements are taken.
            Limits from <see cref="P:Qhta.TestHelper.FileCompareOptions.SyncLimit"/> is applied.
            </summary>
            <param name="recElements">Collection of Received Xml elements</param>
            <param name="expElements">Collection of expected Xml elements</param>
            <param name="linesLimit">Limit of content lines to show 
            (default 0 changed to <see cref="P:Qhta.TestHelper.FileCompareOptions.SyncLimit"/>)</param>
        </member>
        <member name="M:Qhta.TestHelper.XmlFileComparer.ShowUnequalItemElements(System.Xml.Linq.XElement,System.Xml.Linq.XElement,System.Int32,System.Int32)">
            <summary>
            Helper method to show unequal items of elements. Similar to previous but with several differeces.
            </summary>
            <param name="recElement">Collection of Received Xml elements</param>
            <param name="expElement">Collection of expected Xml elements</param>
            <param name="fromIndex">Index of the first item</param>
            <param name="linesLimit">Limit of content lines to show 
            (default 0 changed to <see cref="P:Qhta.TestHelper.FileCompareOptions.SyncLimit"/>)</param>
        </member>
        <member name="M:Qhta.TestHelper.XmlFileComparer.ShowXmlElement(System.Xml.Linq.XElement,System.Nullable{System.ConsoleColor},System.Int32)">
            <summary>
            Helper method to show Xml element
            </summary>
            <param name="xmlElement">Element to show</param>
            <param name="color">Color of the text (if null then lef unchanged)</param>  /// <param name="linesLimit">The actual limit of lines to shown</param>
            <returns>the number of lines shown</returns>
        </member>
        <member name="M:Qhta.TestHelper.XmlFileComparer.ToStrings(System.Xml.Linq.XElement)">
            <summary>
            Helper method to convert xml element to a collection of lines
            </summary>
            <param name="xmlElement">Element to convert</param>
            <returns>Collection of lines</returns>
        </member>
        <member name="T:Qhta.TestHelper.ObjectComparer">
            <summary>
            A class to compare objects and write output to TraceTextWriter
            </summary>
        </member>
        <member name="P:Qhta.TestHelper.ObjectComparer.Writer">
            <summary>
            Writer to receive detailed results of comparison. Set up on comparer constructor.
            </summary>
        </member>
        <member name="T:Qhta.TestHelper.AbstractFileGenTest">
            <summary>
            Abstract test with file generating. Contains output file comparison with expected content.
            </summary>
        </member>
        <member name="T:Qhta.TestHelper.AbstractTest">
            <summary>
            Basic abstract test class
            </summary>
        </member>
        <member name="P:Qhta.TestHelper.AbstractTest.TraceOutputEnabled">
            <summary>
            If output test results to trace
            </summary>
        </member>
        <member name="P:Qhta.TestHelper.AbstractTest.OutputToFile">
            <summary>
            Filename to output test results
            </summary>
        </member>
        <member name="P:Qhta.TestHelper.AbstractTest.BreakOnFail">
            <summary>
            If failed test case breaks the whole test
            </summary>
        </member>
        <member name="P:Qhta.TestHelper.AbstractTest.AcceptOnFail">
            <summary>
            If failed test case breaks the whole test
            </summary>
        </member>
        <member name="P:Qhta.TestHelper.AbstractTest.ShowTestRunTime">
            <summary>
            If failed test case breaks the whole test
            </summary>
        </member>
        <member name="M:Qhta.TestHelper.AbstractTest.Run">
            <summary>
            Main method to run a test. Creates a TraceTextWriter to monitor a test and show results.
            First invokes <see cref="M:Qhta.TestHelper.AbstractTest.Init"/> method. 
            Then <see cref="M:Qhta.TestHelper.AbstractTest.Prepare(Qhta.TestHelper.TestCase[]@)"/>, <see cref="M:Qhta.TestHelper.AbstractTest.Execute(Qhta.TestHelper.TestCase[],System.Int32@,System.Int32@)"/> and <see cref="M:Qhta.TestHelper.AbstractTest.Finalize(Qhta.TestHelper.TestCase[],System.Int32,System.Int32)"/>.
            Additionally time of run is measured.
            </summary>
            <returns>True if test passes, false if failed</returns>
        </member>
        <member name="M:Qhta.TestHelper.AbstractTest.Init">
            <summary>
            Creates trace text writer for test results.
            Console output is enabled by default.
            Other test output is controlled by properties.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Qhta.TestHelper.AbstractTest.Prepare(Qhta.TestHelper.TestCase[]@)">
            <summary>
            Abstract test preparation. Output parameter <paramref name="plannedTests"/> must be filled.
            If not - return false
            </summary>
            <param name="plannedTests">Result collection of planned test cases</param>
            <returns>if result collection prepared</returns>
        </member>
        <member name="M:Qhta.TestHelper.AbstractTest.Execute(Qhta.TestHelper.TestCase[],System.Int32@,System.Int32@)">
            <summary>
            Abstract test execution. Planned test cases are given as input parameter.
            Result is number of test cases that were run and number of test cases failed.
            </summary>
            <param name="plannedTests">Collection od planned test cases</param>
            <param name="doneTestsCount">Number of planned test cases that were run</param>
            <param name="failedTestsCount">Number of failed test cases</param>
            <returns>If all the test cases were run succesfully</returns>
        </member>
        <member name="M:Qhta.TestHelper.AbstractTest.Finalize(Qhta.TestHelper.TestCase[],System.Int32,System.Int32)">
            <summary>
            Virtual test finalization. Input parameters are: collection of planned test cases,
            and number of test cases that were run and number of test cases failed.
            Appriopriate messages are written to <see cref="P:Qhta.TestHelper.AbstractTest.TraceWriter"/>
            </summary>
            <param name="plannedTests">Collection od planned test cases</param>
            <param name="doneTestsCount">Number of planned test cases that were run</param>
            <param name="failedTestsCount">Number of failed test cases</param>
            <returns>False only if not tests were planned</returns>
        </member>
        <member name="M:Qhta.TestHelper.AbstractTest.OnDispose">
            <summary>
            Virtual method called on dispose
            </summary>
        </member>
        <member name="T:Qhta.TestHelper.BufferedTextWriter">
            <summary>
            Buffered extension of a text writer
            </summary>
        </member>
        <member name="P:Qhta.TestHelper.BufferedTextWriter.Buffer">
            <summary>
            Buffer must not be a collection of string, because it may contain color tags.
            </summary>
        </member>
        <member name="P:Qhta.TestHelper.BufferedTextWriter.LastChar">
            <summary>
            Last written character
            </summary>
        </member>
        <member name="M:Qhta.TestHelper.BufferedTextWriter.Flush">
            <summary>
            Flush invokes abstract <see cref="M:Qhta.TestHelper.BufferedTextWriter.FlushBuffer"/>.
            This construction is needed to avoid premature cleaning
            when subclasses will invoke base method.
            </summary>
        </member>
        <member name="M:Qhta.TestHelper.BufferedTextWriter.FlushBuffer">
            <summary>
            This method is abstract and must be implemented in a subclass
            </summary>
        </member>
        <member name="P:Qhta.TestHelper.BufferedTextWriter.AutoFlush">
            <summary>
            AutoFlush means that flush is invoked after each operation
            </summary>
        </member>
        <member name="P:Qhta.TestHelper.BufferedTextWriter.IndentSize">
            <summary>
            Indent unit consists of two spaces
            </summary>
        </member>
        <member name="P:Qhta.TestHelper.BufferedTextWriter.IndentLevel">
            <summary>
            Indent level used at the beginning of each line
            </summary>
        </member>
        <member name="M:Qhta.TestHelper.BufferedTextWriter.Indent">
            <summary>
            Unlimited indent level increment
            </summary>
        </member>
        <member name="M:Qhta.TestHelper.BufferedTextWriter.Unindent">
            <summary>
            Indent level decrement imited to zero
            </summary>
        </member>
        <member name="P:Qhta.TestHelper.BufferedTextWriter.Enabled">
            <summary>
            If set to false then disables operations.
            </summary>
        </member>
        <member name="P:Qhta.TestHelper.BufferedTextWriter.WriteVisualNewLine">
            <summary>
            If set then new lines are written visually, as "\n" sequence;
            To so, to write a "real" new line use <see cref="M:Qhta.TestHelper.BufferedTextWriter.WriteLine"/> method.
            </summary>
        </member>
        <member name="P:Qhta.TestHelper.BufferedTextWriter.AllowIntelligentSpacing">
            <summary>
            If set then "\n" and "\s" sequences at start of the string to write are treated specially.
            "\n" forces to write a new line if last char is not a new line character.
            "\s" forces to write a space if last char is not a space and is not an open punctuation character.
            </summary>
        </member>
        <member name="M:Qhta.TestHelper.BufferedTextWriter.Write(System.String)">
            <summary>
            Basic write implementation. New lines and spaces interpreted according to controlling properties.
            </summary>
            <param name="str"></param>
        </member>
        <member name="M:Qhta.TestHelper.BufferedTextWriter.WriteLine">
            <summary>
            After WriteLine last char is '\n'.
            </summary>
        </member>
        <member name="M:Qhta.TestHelper.BufferedTextWriter.WriteLine(System.String)">
            <summary>
            Simply Write(str) and WriteLine();
            </summary>
            <param name="str"></param>
        </member>
        <member name="P:Qhta.TestHelper.BufferedTextWriter.TraceListener">
            <summary>
            TraceListener needed for VisualStudio TraceListeners collections
            </summary>
        </member>
        <member name="T:Qhta.TestHelper.ColorOp">
            <summary>
            Color operation encoded in <see cref="T:Qhta.TestHelper.ColorTag"/>
            </summary>
        </member>
        <member name="T:Qhta.TestHelper.ColorTag">
            <summary>
            Color control element stored in a buffer
            </summary>
        </member>
        <member name="F:Qhta.TestHelper.ColorTag.Type">
            <summary>
            Which operation is encoded
            </summary>
        </member>
        <member name="F:Qhta.TestHelper.ColorTag.Color">
            <summary>
            What specific color is stored
            </summary>
        </member>
        <member name="M:Qhta.TestHelper.ColorTag.#ctor(Qhta.TestHelper.ColorOp,System.Nullable{System.ConsoleColor})">
            <summary>
            Constructor forces at least color operation encoding.
            </summary>
            <param name="type">Color operation to store</param>
            <param name="color">Specific color to store</param>
        </member>
        <member name="T:Qhta.TestHelper.ConsoleWriter">
            <summary>
            Extends <see cref="T:Qhta.TestHelper.BufferedTextWriter"/> with implementation of
            color operations and Console output.
            </summary>
        </member>
        <member name="P:Qhta.TestHelper.ConsoleWriter.ColorEnabled">
            <summary>
            If color operations are enabled
            </summary>
        </member>
        <member name="P:Qhta.TestHelper.ConsoleWriter.ConsoleOutputEnabled">
            <summary>
            If output strings are sent to console
            </summary>
        </member>
        <member name="M:Qhta.TestHelper.ConsoleWriter.#ctor">
            <summary>
            This constructor assures than initial colors would be the same
            for each instance;
            </summary>
        </member>
        <member name="P:Qhta.TestHelper.ConsoleWriter.ForegroundColor">
            <summary>
            The foreground color as get on init from console or as set by user.
            </summary>
        </member>
        <member name="P:Qhta.TestHelper.ConsoleWriter.BackgroundColor">
            <summary>
            The background color as get on init from console or as set by user.
            </summary>
        </member>
        <member name="M:Qhta.TestHelper.ConsoleWriter.ResetColors">
            <summary>
            Color tags are stored to the buffer to reset colors.
            It enables concurrent write.
            </summary>
        </member>
        <member name="M:Qhta.TestHelper.ConsoleWriter.FlushString(System.String)">
            <summary>
            Send a string to console, but only if it is enabled.
            This protected flush can be overriden in subclasses.
            You can control if console is used for output with
            <see cref="P:Qhta.TestHelper.ConsoleWriter.ConsoleOutputEnabled"/> property.
            </summary>
            <param name="str">Flushed string</param>
        </member>
        <member name="M:Qhta.TestHelper.ConsoleWriter.FlushNewLineTag">
            <summary>
            Send a new line character to console, but only if it is enabled.
            This protected flush can be overriden in subclasses.
            You can control if console is used for output with
            <see cref="P:Qhta.TestHelper.ConsoleWriter.ConsoleOutputEnabled"/> property.
            </summary>
        </member>
        <member name="M:Qhta.TestHelper.ConsoleWriter.FlushColorTag(Qhta.TestHelper.ColorTag)">
            <summary>
            This method manipulates the color tag using console.
            This protected operation can be overriden in subclasses.
            You can control the operation is done with
            <see cref="P:Qhta.TestHelper.ConsoleWriter.ColorEnabled"/> property.
            </summary>
        </member>
        <member name="M:Qhta.TestHelper.ConsoleWriter.FlushBuffer">
            <summary>
            This implementation of flush operation sends strings to output via <see cref="M:Qhta.TestHelper.ConsoleWriter.FlushString(System.String)"/>
            and manipulates of console colors via <see cref="M:Qhta.TestHelper.ConsoleWriter.FlushColorTag(Qhta.TestHelper.ColorTag)"/> operations.
            After flush the buffer is cleared.
            </summary>
        </member>
        <member name="P:Qhta.TestHelper.ConsoleWriter.Encoding">
            <summary>
            Implements TextWriter Encoding property.
            </summary>
        </member>
        <member name="T:Qhta.TestHelper.IConsoleWriter">
            <summary>
            Defines operations needed to write text in color to console. Extends ITextWriter.
            </summary>
        </member>
        <member name="P:Qhta.TestHelper.IConsoleWriter.ColorEnabled">
            <summary>
            If color operations will be enabled
            </summary>
        </member>
        <member name="P:Qhta.TestHelper.IConsoleWriter.ForegroundColor">
            <summary>
            Represents a color of text foreground.
            </summary>
        </member>
        <member name="P:Qhta.TestHelper.IConsoleWriter.BackgroundColor">
            <summary>
            Represents a color of text background.
            </summary>
        </member>
        <member name="M:Qhta.TestHelper.IConsoleWriter.ResetColors">
            <summary>
            Resets colors to the default values.
            </summary>
        </member>
        <member name="T:Qhta.TestHelper.ITextWriter">
            <summary>
            Defines operations needed to write text
            </summary>
        </member>
        <member name="P:Qhta.TestHelper.ITextWriter.AutoFlush">
            <summary>
            If set, forces flush after each write operation.
            </summary>
        </member>
        <member name="P:Qhta.TestHelper.ITextWriter.Enabled">
            <summary>
            If set to false then disables operations.
            </summary>
        </member>
        <member name="P:Qhta.TestHelper.ITextWriter.WriteVisualNewLine">
            <summary>
            If set then new lines are written visually, as "\n" sequence;
            To so, to write a "real" new line use <see cref="M:Qhta.TestHelper.ITextWriter.WriteLine"/> method.
            </summary>
        </member>
        <member name="P:Qhta.TestHelper.ITextWriter.AllowIntelligentSpacing">
            <summary>
            If set then "\n" and "\s" sequences at start of the string to write are treated specially.
            "\n" forces to write a new line if last char is not a new line character.
            "\s" forces to write a space if last char is not a space and is not an open punctuation character.
            </summary>
        </member>
        <member name="P:Qhta.TestHelper.ITextWriter.LastChar">
            <summary>
            Last written character
            </summary>
        </member>
        <member name="M:Qhta.TestHelper.ITextWriter.Write(System.String)">
            <summary>
            Writes a string to output. 
            Rules according to <see cref="P:Qhta.TestHelper.ITextWriter.WriteVisualNewLine"/>
            and <see cref="P:Qhta.TestHelper.ITextWriter.AllowIntelligentSpacing"/> are obeyed.
            </summary>
            <param name="str">Written string</param>
        </member>
        <member name="M:Qhta.TestHelper.ITextWriter.WriteLine(System.String)">
            <summary>
            Writes a line of text to output.
            Rules according to <see cref="P:Qhta.TestHelper.ITextWriter.WriteVisualNewLine"/>
            and <see cref="P:Qhta.TestHelper.ITextWriter.AllowIntelligentSpacing"/> are obeyed.
            <see cref="P:Qhta.TestHelper.ITextWriter.IndentLevel"/> is written at the beginning of the line.
            </summary>
            <param name="line">A line of text to write</param>
        </member>
        <member name="M:Qhta.TestHelper.ITextWriter.WriteLine">
            <summary>
            Writes an empty line to output.
            <see cref="P:Qhta.TestHelper.ITextWriter.IndentLevel"/> is written at the beginning of the line.
            </summary>
        </member>
        <member name="P:Qhta.TestHelper.ITextWriter.IndentLevel">
            <summary>
            Indent level of the written line.
            </summary>
        </member>
        <member name="P:Qhta.TestHelper.ITextWriter.IndentSize">
            <summary>
            Indent size counted in spaces.
            </summary>
        </member>
        <member name="M:Qhta.TestHelper.ITextWriter.Indent">
            <summary>
            Increments <see cref="P:Qhta.TestHelper.ITextWriter.IndentLevel"/>
            </summary>
        </member>
        <member name="M:Qhta.TestHelper.ITextWriter.Unindent">
            <summary>
            Decrements <see cref="P:Qhta.TestHelper.ITextWriter.IndentLevel"/>
            </summary>
        </member>
        <member name="M:Qhta.TestHelper.ITextWriter.Flush">
            <summary>
            Flushes the written content to output.
            </summary>
        </member>
        <member name="T:Qhta.TestHelper.ITraceMonitor">
            <summary>
            The monitor does not write messages. It is used to collect messages and process them in aggregation.
            </summary>
        </member>
        <member name="M:Qhta.TestHelper.ITraceMonitor.Notify(System.String,System.String)">
            <summary>
            Register a message send by a caller.
            </summary>
            <param name="message">Text message</param>
            <param name="callerName">Caller name (by default set as name of caller method)</param>
        </member>
        <member name="M:Qhta.TestHelper.ITraceMonitor.WasNotified(System.String,System.String)">
            <summary>
            Check if a message was already registered.
            Enables omitting duplicate message processing.
            </summary>
            <param name="message">Text message</param>
            <param name="callerName">Caller name (by default set as name of caller method)</param>
            <returns>true if the message was already registered</returns>
        </member>
        <member name="M:Qhta.TestHelper.ITraceMonitor.Flush">
            <summary>
            Flush processed data to output
            </summary>
        </member>
        <member name="M:Qhta.TestHelper.ITraceMonitor.Clear">
            <summary>
            Clear registry
            </summary>
        </member>
        <member name="T:Qhta.TestHelper.ITraceTextWriter">
            <summary>
            This trace writer can write text to console, to trace or to a stream.
            It allows to write simultaneously to the three targets.
            </summary>
        </member>
        <member name="P:Qhta.TestHelper.ITraceTextWriter.ConsoleOutputEnabled">
            <summary>
            Controls if text is sent to console
            </summary>
        </member>
        <member name="P:Qhta.TestHelper.ITraceTextWriter.TraceOutputEnabled">
            <summary>
            Controls if text is sent to trace
            </summary>
        </member>
        <member name="P:Qhta.TestHelper.ITraceTextWriter.DebugOutputEnabled">
            <summary>
            Controls if text is sent to debug output window
            </summary>
        </member>
        <member name="P:Qhta.TestHelper.ITraceTextWriter.StreamOutputEnabled">
            <summary>
            Controls if text is sent to stream
            </summary>
        </member>
        <member name="P:Qhta.TestHelper.ITraceTextWriter.OutputStream">
            <summary>
            Output stream
            </summary>
        </member>
        <member name="P:Qhta.TestHelper.ITraceTextWriter.LockObject">
            <summary>
            Enables lock to the same object
            </summary>
        </member>
        <member name="T:Qhta.TestHelper.ITraceXmlWriter">
            <summary>
            Expands <see cref="T:Qhta.TestHelper.ITraceTextWriter"/> to handle XML writting.
            </summary>
            <seealso cref="T:Qhta.TestHelper.ITraceTextWriter" />
        </member>
        <member name="M:Qhta.TestHelper.ITraceXmlWriter.WriteValue(System.String,System.String)">
            <param name="prefix">needed only to enable suppression</param>
            <param name="str">Written string</param>
        </member>
        <member name="M:Qhta.TestHelper.ITraceXmlWriter.WriteStartComment(System.String)">
            <param name="prefix">needed only to enable suppression</param>
        </member>
        <member name="M:Qhta.TestHelper.ITraceXmlWriter.WriteEndComment(System.String)">
            <param name="prefix">needed only to enable suppression</param>
        </member>
        <member name="M:Qhta.TestHelper.ITraceXmlWriter.WriteComment(System.String,System.String)">
            <param name="prefix">needed only to enable suppression</param>
            <param name="text">Written comment text</param>
        </member>
        <member name="T:Qhta.TestHelper.MessageCountingMonitor">
            <summary>
            Trace monitor that counts registered messages
            </summary>
        </member>
        <member name="M:Qhta.TestHelper.MessageCountingMonitor.#ctor(System.String,System.Boolean,System.Boolean)">
            <summary>
            Creates monitor for a file, console or trace output stream is created on flush.
            </summary>
            <param name="filename">name of output file</param>
            <param name="consoleOutputEnabled">if should output to console</param>
            <param name="traceOutputEnabled">if should output to trace</param>
        </member>
        <member name="P:Qhta.TestHelper.MessageCountingMonitor.Filename">
            <summary>
            Output filename
            </summary>
        </member>
        <member name="P:Qhta.TestHelper.MessageCountingMonitor.ConsoleOutputEnabled">
            <summary>
            If monitor flushes to console
            </summary>
        </member>
        <member name="P:Qhta.TestHelper.MessageCountingMonitor.TraceOutputEnabled">
            <summary>
            If monitor flushes to trace
            </summary>
        </member>
        <member name="F:Qhta.TestHelper.MessageCountingMonitor.Messages">
            <summary>
            Internal registry for incoming messages.
            </summary>
        </member>
        <member name="M:Qhta.TestHelper.MessageCountingMonitor.WasNotified(System.String,System.String)">
            <summary>
            Check if a message was already registered.
            Enables omitting duplicate message processing.
            </summary>
            <param name="msg">Text message</param>
            <param name="callerName">Caller name (by default set as name of caller method)</param>
            <returns>true if the message was already registered</returns>
        </member>
        <member name="M:Qhta.TestHelper.MessageCountingMonitor.Notify(System.String,System.String)">
            <summary>
            Register a message send by a caller.
            </summary>
            <param name="msg">Text message</param>
            <param name="callerName">Caller name (by default set as name of caller method)</param>
        </member>
        <member name="M:Qhta.TestHelper.MessageCountingMonitor.Flush">
            <summary>
            Flush creates an output
            </summary>
        </member>
        <member name="M:Qhta.TestHelper.MessageCountingMonitor.Clear">
            <summary>
            Clears the internal registry.
            </summary>
        </member>
        <member name="T:Qhta.TestHelper.TraceTextWriter">
            <summary>
            Main implementation of <see cref="T:Qhta.TestHelper.ITraceTextWriter"/>
            </summary>
            <seealso cref="T:Qhta.TestHelper.TraceWriter" />
            <seealso cref="T:Qhta.TestHelper.ITraceTextWriter" />
        </member>
        <member name="P:Qhta.TestHelper.TraceTextWriter.LockObject">
            <summary>
            Enables lock operation
            </summary>
        </member>
        <member name="P:Qhta.TestHelper.TraceTextWriter.StreamOutputEnabled">
            <summary>
            Controls if text is sent to stream
            </summary>
        </member>
        <member name="P:Qhta.TestHelper.TraceTextWriter.OutputStream">
            <summary>
            Output stream
            </summary>
        </member>
        <member name="P:Qhta.TestHelper.TraceTextWriter._outputStream">
            <summary>
            Set by <see cref="P:Qhta.TestHelper.TraceTextWriter.OutputStream"/> set method
            </summary>
        </member>
        <member name="P:Qhta.TestHelper.TraceTextWriter._writer">
            <summary>
            Usually set to <see cref="P:Qhta.TestHelper.TraceTextWriter._outputStream"/>
            </summary>
        </member>
        <member name="M:Qhta.TestHelper.TraceTextWriter.FlushString(System.String)">
            <summary>
            This implementation uses <see cref="M:Qhta.TestHelper.TraceWriter.FlushString(System.String)"/> operation first
            and then a string is sent to stream text writer(if <see cref="P:Qhta.TestHelper.TraceTextWriter.StreamOutputEnabled"/> is set).
            </summary>
            <param name="str"></param>
        </member>
        <member name="M:Qhta.TestHelper.TraceTextWriter.FlushNewLineTag">
            <summary>
            This implementation uses <see cref="M:Qhta.TestHelper.TraceWriter.FlushNewLineTag"/> operation first
            and then a string is sent to stream text writer (if <see cref="P:Qhta.TestHelper.TraceTextWriter.StreamOutputEnabled"/> is set).
            </summary>
        </member>
        <member name="M:Qhta.TestHelper.TraceTextWriter.FlushBuffer">
            <summary>
            This flush is needed due to trace output.
            </summary>
        </member>
        <member name="T:Qhta.TestHelper.TraceWriter">
            <summary>
            This implementation of <see cref="T:Qhta.TestHelper.ITextWriter"/> uses <see cref="T:Qhta.TestHelper.ConsoleWriter"/>.
            It enables to write simultaneously to console and to trace output.
            You can control the flush with <see cref="P:Qhta.TestHelper.ConsoleWriter.ConsoleOutputEnabled"/>
            and <see cref="P:Qhta.TestHelper.TraceWriter.TraceOutputEnabled"/> operations.
            </summary>
        </member>
        <member name="P:Qhta.TestHelper.TraceWriter.TraceOutputEnabled">
            <summary>
            Controls if output strings are sent to traces
            </summary>
        </member>
        <member name="P:Qhta.TestHelper.TraceWriter.DebugOutputEnabled">
            <summary>
            Controls if output strings are sent to debug outout window.
            </summary>
        </member>
        <member name="M:Qhta.TestHelper.TraceWriter.FlushString(System.String)">
            <summary>
            This implementation uses <see cref="M:Qhta.TestHelper.ConsoleWriter.FlushString(System.String)"/> operation first
            and then a string is sent to trace (if <see cref="P:Qhta.TestHelper.TraceWriter.TraceOutputEnabled"/> is set).
            </summary>
            <param name="str"></param>
        </member>
        <member name="M:Qhta.TestHelper.TraceWriter.FlushNewLineTag">
            <summary>
            This implementation uses <see cref="M:Qhta.TestHelper.ConsoleWriter.FlushNewLineTag"/> operation first
            and then a string is sent to trace (if <see cref="P:Qhta.TestHelper.TraceWriter.TraceOutputEnabled"/> is set).
            </summary>
        </member>
        <member name="M:Qhta.TestHelper.TraceWriter.FlushBuffer">
            <summary>
            This flush is needed due to trace output.
            </summary>
        </member>
        <member name="T:Qhta.TestHelper.TraceXmlWriter">
            <summary>
            Main implementation of <see cref="T:Qhta.TestHelper.ITraceXmlWriter"/>
            </summary>
            <seealso cref="T:Qhta.TestHelper.TraceTextWriter" />
            <seealso cref="T:Qhta.TestHelper.ITraceXmlWriter" />
        </member>
        <member name="M:Qhta.TestHelper.TraceXmlWriter.#ctor(System.String,System.Boolean,System.Boolean)">
            <summary>
            Creates monitor for a file, console or trace output stream is created on flush.
            </summary>
            <param name="filename">name of output file</param>
            <param name="consoleOutputEnabled">if should output to console</param>
            <param name="traceOutputEnabled">if should output to trace</param>
        </member>
        <member name="T:Qhta.TestHelper.TraceWriting.WriterTraceListener">
            <summary>
            Class used as a listener for <see cref="T:System.Diagnostics.Trace"/> output.
            </summary>
        </member>
        <member name="M:Qhta.TestHelper.TraceWriting.WriterTraceListener.#ctor(Qhta.TestHelper.BufferedTextWriter)">
            <summary>
            Connects listener to <see cref="T:Qhta.TestHelper.BufferedTextWriter"/>
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Qhta.TestHelper.TraceWriting.WriterTraceListener.Write(System.String)">
            <summary>
            Implemented method to transfer message to base writer.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Qhta.TestHelper.TraceWriting.WriterTraceListener.WriteLine(System.String)">
            <summary>
            Implemented method to transfer message line to base writer.
            </summary>
            <param name="message"></param>
        </member>
    </members>
</doc>
