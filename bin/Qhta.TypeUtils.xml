<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Qhta.TypeUtils</name>
    </assembly>
    <members>
        <member name="T:Qhta.TypeUtils.DynamicTypeConverter">
            <summary>
            A class that helps using <c>TypeConverter</c> to change an object type in the runtime.
            </summary>
        </member>
        <member name="T:Qhta.TypeUtils.EnumTypeConverter">
            <summary>
            A class that helps enum type conversion to/from string
            </summary>
        </member>
        <member name="T:Qhta.TypeUtils.ObjectCopier">
            <summary>
            Reference Article http://www.codeproject.com/KB/tips/SerializedObjectCloner.aspx
            Provides a method for performing a deep copy of an object.
            Binary Serialization is used to perform the copy.
            </summary>
        </member>
        <member name="M:Qhta.TypeUtils.ObjectCopier.Clone``1(``0)">
            <summary>
            Perform a deep Copy of the object.
            </summary>
            <typeparam name="T">The type of object being copied.</typeparam>
            <param name="source">The object instance to copy.</param>
            <returns>The copied object.</returns>
        </member>
        <member name="T:Qhta.TypeUtils.StaticToStringConverter">
            <summary>
            A static class that converts object to string
            </summary>
        </member>
        <member name="T:Qhta.TypeUtils.StaticTypeConverter">
            <summary>
            A static class that converts object type
            </summary>
        </member>
        <member name="T:Qhta.TypeUtils.TypeCategorization">
            <summary>
            A static class that evaluates category of a type
            </summary>
        </member>
        <member name="T:Qhta.TypeUtils.TypeNaming">
            <summary>
            More friendy type names
            </summary>
        </member>
        <member name="T:Qhta.TypeUtils.TypeUtils">
            <summary>
            Helpful functions that operate on types and supplement <c>System.Reflection</c> library
            </summary>
        </member>
        <member name="M:Qhta.TypeUtils.TypeUtils.TryGetEnumValue(System.Type,System.String,System.Object@)">
            <summary>
            Converts string to enum value for an enum type. Returns false if no enum value recognized
            </summary>
            <param name="valueType">enum value type</param>
            <param name="text">enum name to convert</param>
            <param name="value">enum value after conversion</param>
            <returns></returns>
        </member>
        <member name="M:Qhta.TypeUtils.TypeUtils.TrySetValue(System.Reflection.PropertyInfo,System.Object,System.Object)">
            <summary>
            Safely sets a property of the target object to some value. Invokes <c>TryGetConverter</c> method.
            </summary>
            <param name="property">property info as get from type reflection</param>
            <param name="targetObject">target object to set value</param>
            <param name="value">value to set</param>
            <returns></returns>
        </member>
        <member name="F:Qhta.TypeUtils.TypeUtils.KnownTypeConverters">
            <summary>
            A list of known type converters for <c>TryGetConverter</c> method. 
            Is filled after successful invoke of <c>TryGetConverter</c>.
            Can be preset by a developer.
            </summary>
        </member>
        <member name="M:Qhta.TypeUtils.TypeUtils.TryGetConverter(System.Type,System.ComponentModel.TypeConverter@)">
            <summary>
            Tries to get an instance of a value converter for a type using a <c>TypeConverterAttribute</c> of the given type.
            </summary>
            <param name="valueType"></param>
            <param name="typeConverter"></param>
            <returns></returns>
        </member>
        <member name="M:Qhta.TypeUtils.TypeUtils.TryConvertValue(System.Type,System.Object,System.Object@)">
            <summary>
            Tries to convert a value of the given type using its converter <c>ConvertFrom</c> method
            </summary>
            <param name="valueType">given type</param>
            <param name="value">value to convert from</param>
            <param name="result">conversion result</param>
            <returns></returns>
        </member>
        <member name="M:Qhta.TypeUtils.TypeUtils.TryParseEnum(System.Type,System.String,System.Object@)">
            <summary>
            Tries to convert enum string to enum value
            </summary>
            <param name="enumType">given enum type</param>
            <param name="str">string to convert from</param>
            <param name="value">conversion result</param>
            <returns></returns>
        </member>
        <member name="M:Qhta.TypeUtils.TypeUtils.GetElementType(System.Type)">
            <summary>
            Expanded <see cref="M:System.Type.GetElementType"/> method
            with <see cref="M:System.Type.GetInterfaces"/>
            </summary>
        </member>
        <member name="M:Qhta.TypeUtils.TypeUtils.Redefines(System.Reflection.MemberInfo,System.Reflection.MemberInfo)">
            <summary>
            Checking in a <paramref name="aInfo"/> member redefinines a <paramref name="bInfo"/> member.
            </summary>
            <param name="aInfo">info of a member that redefines</param>
            <param name="bInfo">info of a member that is redefined</param>
        </member>
        <member name="M:Qhta.TypeUtils.TypeUtils.Redefines(System.Reflection.FieldInfo,System.Reflection.FieldInfo)">
            <summary>
            Checking in a <paramref name="aInfo"/> field redefinines a <paramref name="bInfo"/> field.
            </summary>
            <param name="aInfo">info of a field that redefines</param>
            <param name="bInfo">info of a field that is redefined</param>
        </member>
        <member name="M:Qhta.TypeUtils.TypeUtils.Redefines(System.Reflection.PropertyInfo,System.Reflection.PropertyInfo)">
            <summary>
            Checking in a <paramref name="aInfo"/> property redefinines a <paramref name="bInfo"/> property.
            </summary>
            <param name="aInfo">info of a property that redefines</param>
            <param name="bInfo">info of a property that is redefined</param>
        </member>
        <member name="M:Qhta.TypeUtils.TypeUtils.Redefines(System.Reflection.MethodInfo,System.Reflection.MethodInfo)">
            <summary>
            Checking in a <paramref name="aInfo"/> method redefinines a <paramref name="bInfo"/> method.
            </summary>
            <param name="aInfo">info of a method that redefines</param>
            <param name="bInfo">info of a method that is redefined</param>
        </member>
        <member name="M:Qhta.TypeUtils.TypeUtils.GetMembersByInheritance(System.Type,System.Reflection.BindingFlags)">
            <summary>
              Replacement for a <c>Type.GetMembers</c> method in case
              when a <paramref name="Flags"/> parameter does not have option
              <c>BindingFlags.DeclaredOnly</c>. Then methods are taken also from superclasses,
              but are also ordered with inheritance order (from top superclass first).
             </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Qhta.TypeUtils.TypeUtils.GetCustomAttibutesByInheritance(System.Type,System.Boolean,System.Boolean)" -->
        <!-- Badly formed XML comment ignored for member "M:Qhta.TypeUtils.TypeUtils.GetCustomAttibutesByInheritance``1(System.Type,System.Boolean,System.Boolean)" -->
        <member name="M:Qhta.TypeUtils.TypeUtils.CopyProperties(System.Object,System.Object,System.Boolean)">
            <summary>
            Copying public properties from a <paramref name="source"/> object to a <paramref name="target"/> object.
            Object can be of different types. Properties are paired through names.
            Indexers and special properties are not copied.
            Returns names of copied properties.
            </summary>
            <param name="source">Source object</param>
            <param name="target">Target object</param>
            <param name="revertConversion">use GetDeclaredCopyDelegatesReverse</param>
            <returns>Names of copied properties</returns>
        </member>
        <member name="M:Qhta.TypeUtils.TypeUtils.GetDeclaredCopyDelegates(System.Type,System.Type)">
            <summary>
            Gets declared delegates for copy of properties. Result - one method for each property name.
            </summary>
            <param name="sourceType"></param>
            <param name="targetType"></param>
            <returns></returns>
        </member>
        <member name="M:Qhta.TypeUtils.TypeUtils.GetDeclaredCopyDelegatesReverse(System.Type,System.Type)">
            <summary>
            Gets declared delegates for reverse copy of properties. Result - one method for each property name.
            </summary>
            <param name="sourceType"></param>
            <param name="targetType"></param>
        </member>
        <member name="M:Qhta.TypeUtils.TypeUtils.CopyProperties(System.Object,System.Object,System.Collections.Generic.Dictionary{System.String,Qhta.TypeUtils.TypeUtils.CopyPropertyMethod})">
            <summary>
            Simple copy of properties from source object to target object using methods delegated by property names.
            </summary>
            <param name="source"></param>
            <param name="target"></param>
            <param name="delegates"></param>
            <returns></returns>
        </member>
        <member name="T:Qhta.TypeUtils.TypeUtils.PropertyComparer">
            <summary>
            Helper class for property comparison
            </summary>
        </member>
        <member name="M:Qhta.TypeUtils.TypeUtils.PropertyComparer.Equals(System.Reflection.PropertyInfo,System.Reflection.PropertyInfo)">
            <summary>
            Check if one property equals other property.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Qhta.TypeUtils.TypeUtils.PropertyComparer.GetHashCode(System.Reflection.PropertyInfo)">
            <summary>
            A method needed to supply <c>Equals</c> method.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="T:Qhta.TypeUtils.TypeUtils.CopyPropertyMethod">
            <summary>
            A delegate method for property copying
            </summary>
            <param name="source"></param>
            <param name="sourceValue"></param>
            <param name="target"></param>
            <param name="targetValue"></param>
            <returns></returns>
        </member>
        <member name="T:Qhta.TypeUtils.CopyPropertyDelegate">
            <summary>
            A delegate class to property copying.
            Holds a target type and a target method name
            </summary>
        </member>
        <member name="M:Qhta.TypeUtils.CopyPropertyDelegate.#ctor(System.Type,System.String)">
            <summary>
            Constructor to init delegate
            </summary>
            <param name="targetType"></param>
            <param name="targetMethod"></param>
        </member>
        <member name="M:Qhta.TypeUtils.CopyPropertyDelegate.CopyProperty(System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Copies a property using a target method
            </summary>
            <param name="source"></param>
            <param name="sourceValue"></param>
            <param name="target"></param>
            <param name="targetValue"></param>
            <returns></returns>
        </member>
        <member name="T:Qhta.TypeUtils.IEmpty">
            <summary>
            An interface to check if a type instance is empty.
            </summary>
        </member>
        <member name="P:Qhta.TypeUtils.IEmpty.IsEmpty">
            <summary>
            Simple property to check empty instance
            </summary>
        </member>
        <member name="T:Qhta.TypeUtils.CopyItemsDelegate">
            <summary>
            A delegate class to class items copying.
            </summary>
        </member>
        <member name="M:Qhta.TypeUtils.CopyItemsDelegate.#ctor(System.Type)">
            <summary>
            Initializing constructor
            </summary>
            <param name="targetPropertyType"></param>
        </member>
        <member name="M:Qhta.TypeUtils.CopyItemsDelegate.Add(System.Type,System.Type)">
            <summary>
            A method to add type pairs used to copy items
            </summary>
            <param name="sourceItemType"></param>
            <param name="targetItemType"></param>
        </member>
        <member name="M:Qhta.TypeUtils.CopyItemsDelegate.CopyItems(System.Object,System.Object,System.Object,System.Object)">
            <summary>
            A method to copy items from source to target
            </summary>
            <param name="source">source object</param>
            <param name="sourceValue">source value - must be <c>IEnumerable</c></param>
            <param name="target">target object</param>
            <param name="targetValue">target value - must be <c>IList</c></param>
            <returns></returns>
        </member>
        <member name="T:Qhta.TypeUtils.CopyPropertyConversionAttribute">
            <summary>
            An attribute to define conversion of properties for a type while copying
            </summary>
        </member>
        <member name="M:Qhta.TypeUtils.CopyPropertyConversionAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializing constructir
            </summary>
            <param name="propertyName"></param>
            <param name="methodName"></param>
        </member>
        <member name="P:Qhta.TypeUtils.CopyPropertyConversionAttribute.PropertyName">
            <summary>
            Name of a property to copy
            </summary>
        </member>
        <member name="P:Qhta.TypeUtils.CopyPropertyConversionAttribute.MethodName">
            <summary>
            Name of a method used to convert while property copying
            </summary>
        </member>
        <member name="T:Qhta.TypeUtils.CopyPropertyItemConversionAttribute">
            <summary>
            An attribute to define conversion of compound property items for a type while copying
            </summary>
        </member>
        <member name="M:Qhta.TypeUtils.CopyPropertyItemConversionAttribute.#ctor(System.String,System.Type,System.Type)">
            <summary>
            Initializing constructor
            </summary>
            <param name="propertyName"></param>
            <param name="sourceItemType"></param>
            <param name="targetItemType"></param>
        </member>
        <member name="P:Qhta.TypeUtils.CopyPropertyItemConversionAttribute.PropertyName">
            <summary>
            Name of a property to copy
            </summary>
        </member>
        <member name="P:Qhta.TypeUtils.CopyPropertyItemConversionAttribute.SourceItemType">
            <summary>
            A type of source items
            </summary>
        </member>
        <member name="P:Qhta.TypeUtils.CopyPropertyItemConversionAttribute.TargetItemType">
            <summary>
            A type of target items
            </summary>
        </member>
    </members>
</doc>
