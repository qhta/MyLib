<?xml version="1.0"?>
<doc>
    <assembly>
        <name>System.Linq.Async</name>
    </assembly>
    <members>
        <member name="T:System.Collections.Generic.IAsyncEnumerable`1">
            <summary>
            Asynchronous version of the <see cref="T:System.Collections.Generic.IEnumerable`1"/> interface, allowing elements of the enumerable sequence to be retrieved asynchronously.
            </summary>
            <typeparam name="T">Element type.</typeparam>
        </member>
        <member name="M:System.Collections.Generic.IAsyncEnumerable`1.GetAsyncEnumerator(System.Threading.CancellationToken)">
            <summary>
            Gets an asynchronous enumerator over the sequence.
            </summary>
            <param name="cancellationToken">Cancellation token used to cancel the enumeration.</param>
            <returns>Enumerator for asynchronous enumeration over the sequence.</returns>
        </member>
        <member name="T:System.Collections.Generic.IAsyncEnumerator`1">
            <summary>
            Asynchronous version of the <see cref="T:System.Collections.Generic.IEnumerator`1"/> interface, allowing elements to be retrieved asynchronously.
            </summary>
            <typeparam name="T">Element type.</typeparam>
        </member>
        <member name="P:System.Collections.Generic.IAsyncEnumerator`1.Current">
            <summary>
            Gets the current element in the iteration.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.IAsyncEnumerator`1.MoveNextAsync">
            <summary>
            Advances the enumerator to the next element in the sequence, returning the result asynchronously.
            </summary>
            <returns>
            Task containing the result of the operation: true if the enumerator was successfully advanced
            to the next element; false if the enumerator has passed the end of the sequence.
            </returns>
        </member>
        <member name="T:System.Collections.Generic.AsyncEnumerator">
            <summary>
            Provides a set of extension methods for <see cref="T:System.Collections.Generic.IAsyncEnumerator`1"/>.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.AsyncEnumerator.Create``1(System.Func{System.Threading.Tasks.ValueTask{System.Boolean}},System.Func{``0},System.Func{System.Threading.Tasks.ValueTask})">
            <summary>
            Creates a new enumerator using the specified delegates implementing the members of <see cref="T:System.Collections.Generic.IAsyncEnumerator`1"/>.
            </summary>
            <typeparam name="T">The type of the elements returned by the enumerator.</typeparam>
            <param name="moveNextAsync">The delegate implementing the <see cref="M:System.Collections.Generic.IAsyncEnumerator`1.MoveNextAsync"/> method.</param>
            <param name="getCurrent">The delegate implementing the <see cref="P:System.Collections.Generic.IAsyncEnumerator`1.Current"/> property getter.</param>
            <param name="disposeAsync">The delegate implementing the <see cref="M:System.IAsyncDisposable.DisposeAsync"/> method.</param>
            <returns>A new enumerator instance.</returns>
        </member>
        <member name="M:System.Collections.Generic.AsyncEnumerator.MoveNextAsync``1(System.Collections.Generic.IAsyncEnumerator{``0},System.Threading.CancellationToken)">
            <summary>
            Advances the enumerator to the next element in the sequence, returning the result asynchronously.
            </summary>
            <typeparam name="T">The type of the elements returned by the enumerator.</typeparam>
            <param name="source">The enumerator to advance.</param>
            <param name="cancellationToken">Cancellation token that can be used to cancel the operation.</param>
            <returns>
            Task containing the result of the operation: true if the enumerator was successfully advanced
            to the next element; false if the enumerator has passed the end of the sequence.
            </returns>
        </member>
        <member name="M:System.Collections.Generic.AsyncEnumerator.WithCancellation``1(System.Collections.Generic.IAsyncEnumerator{``0},System.Threading.CancellationToken)">
            <summary>
            Wraps the specified enumerator with an enumerator that checks for cancellation upon every invocation
            of the <see cref="M:System.Collections.Generic.IAsyncEnumerator`1.MoveNextAsync"/> method.
            </summary>
            <typeparam name="T">The type of the elements returned by the enumerator.</typeparam>
            <param name="source">The enumerator to augment with cancellation support.</param>
            <param name="cancellationToken">The cancellation token to observe.</param>
            <returns>An enumerator that honors cancellation requests.</returns>
        </member>
        <member name="T:System.Linq.AsyncEnumerable">
            <summary>
            Provides a set of extension methods for <see cref="T:System.Collections.Generic.IAsyncEnumerable`1"/>.
            </summary>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.Create``1(System.Func{System.Threading.CancellationToken,System.Collections.Generic.IAsyncEnumerator{``0}})">
            <summary>
            Creates a new enumerable using the specified delegates implementing the members of <see cref="T:System.Collections.Generic.IAsyncEnumerable`1"/>.
            </summary>
            <typeparam name="T">The type of the elements returned by the enumerable sequence.</typeparam>
            <param name="getAsyncEnumerator">The delegate implementing the <see cref="M:System.Collections.Generic.IAsyncEnumerable`1.GetAsyncEnumerator(System.Threading.CancellationToken)"/> method.</param>
            <returns>A new enumerable instance.</returns>
        </member>
        <member name="T:System.Linq.AsyncEnumerable.UnionAsyncIterator`1">
            <summary>
            An iterator that yields distinct values from two or more <see cref="T:System.Collections.Generic.IAsyncEnumerable`1"/>.
            </summary>
            <typeparam name="TSource">The type of the source enumerables.</typeparam>
        </member>
        <member name="T:System.Linq.AsyncEnumerable.UnionAsyncIterator2`1">
            <summary>
            An iterator that yields distinct values from two <see cref="T:System.Collections.Generic.IAsyncEnumerable`1"/>.
            </summary>
            <typeparam name="TSource">The type of the source enumerables.</typeparam>
        </member>
        <member name="T:System.Linq.AsyncEnumerable.UnionAsyncIteratorN`1">
            <summary>
            An iterator that yields distinct values from three or more <see cref="T:System.Collections.Generic.IAsyncEnumerable`1"/>.
            </summary>
            <typeparam name="TSource">The type of the source enumerables.</typeparam>
        </member>
        <member name="T:System.Linq.AsyncEnumerablePartition`1">
            <summary>
            An iterator that yields the items of part of an <see cref="T:System.Collections.Generic.IAsyncEnumerable`1"/>.
            </summary>
            <typeparam name="TSource">The type of the source enumerable.</typeparam>
        </member>
        <member name="T:System.Linq.AsyncListPartition`1">
            <summary>
            An iterator that yields the items of part of an <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
            <typeparam name="TSource">The type of the source list.</typeparam>
        </member>
        <member name="T:System.Linq.IAsyncIListProvider`1">
            <summary>
            An iterator that can produce an array or <see cref="T:System.Collections.Generic.List`1"/> through an optimized path.
            </summary>
        </member>
        <member name="M:System.Linq.IAsyncIListProvider`1.ToArrayAsync(System.Threading.CancellationToken)">
            <summary>
            Produce an array of the sequence through an optimized path.
            </summary>
            <param name="cancellationToken"></param>
            <returns>The array.</returns>
        </member>
        <member name="M:System.Linq.IAsyncIListProvider`1.ToListAsync(System.Threading.CancellationToken)">
            <summary>
            Produce a <see cref="T:System.Collections.Generic.List`1"/> of the sequence through an optimized path.
            </summary>
            <param name="cancellationToken"></param>
            <returns>The <see cref="T:System.Collections.Generic.List`1"/>.</returns>
        </member>
        <member name="M:System.Linq.IAsyncIListProvider`1.GetCountAsync(System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Returns the count of elements in the sequence.
            </summary>
            <param name="onlyIfCheap">If true then the count should only be calculated if doing
            so is quick (sure or likely to be constant time), otherwise -1 should be returned.</param>
            <param name="cancellationToken"></param>
            <returns>The number of elements.</returns>
        </member>
        <member name="T:System.Linq.IAsyncPartition`1">
            <summary>
            An iterator that supports random access and can produce a partial sequence of its items through an optimized path.
            </summary>
        </member>
        <member name="M:System.Linq.IAsyncPartition`1.Skip(System.Int32)">
            <summary>
            Creates a new partition that skips the specified number of elements from this sequence.
            </summary>
            <param name="count">The number of elements to skip.</param>
            <returns>An <see cref="T:System.Linq.IAsyncPartition`1"/> with the first <paramref name="count"/> items removed.</returns>
        </member>
        <member name="M:System.Linq.IAsyncPartition`1.Take(System.Int32)">
            <summary>
            Creates a new partition that takes the specified number of elements from this sequence.
            </summary>
            <param name="count">The number of elements to take.</param>
            <returns>An <see cref="T:System.Linq.IAsyncPartition`1"/> with only the first <paramref name="count"/> items.</returns>
        </member>
        <member name="M:System.Linq.IAsyncPartition`1.TryGetElementAtAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Gets the item associated with a 0-based index in this sequence.
            </summary>
            <param name="index">The 0-based index to access.</param>
            <param name="cancellationToken">Token to observe for cancellation requests.</param>
            <returns>The element if found, otherwise, the default value of <see cref="T:System.Linq.Maybe`1"/>.</returns>
        </member>
        <member name="M:System.Linq.IAsyncPartition`1.TryGetFirstAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the first item in this sequence.
            </summary>
            <param name="cancellationToken">Token to observe for cancellation requests.</param>
            <returns>The element if found, otherwise, the default value of <see cref="T:System.Linq.Maybe`1"/>.</returns>
        </member>
        <member name="M:System.Linq.IAsyncPartition`1.TryGetLastAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the last item in this sequence.
            </summary>
            <param name="cancellationToken">Token to observe for cancellation requests.</param>
            <returns>The element if found, otherwise, the default value of <see cref="T:System.Linq.Maybe`1"/>.</returns>
        </member>
        <member name="T:System.Linq.Internal.Grouping`2">
            Adapted from System.Linq.Grouping from .NET Framework
            Source: https://github.com/dotnet/corefx/blob/b90532bc97b07234a7d18073819d019645285f1c/src/System.Linq/src/System/Linq/Grouping.cs#L64
        </member>
        <member name="T:System.Linq.SingleLinkedNode`1">
            <summary>
            An immutable node in a singly-linked list of items.
            </summary>
            <typeparam name="TSource">The type of the node's item.</typeparam>
        </member>
        <member name="M:System.Linq.SingleLinkedNode`1.#ctor(`0)">
            <summary>
            Constructs a tail node.
            </summary>
            <param name="item">The item to place in the tail node.</param>
        </member>
        <member name="M:System.Linq.SingleLinkedNode`1.#ctor(System.Linq.SingleLinkedNode{`0},`0)">
            <summary>
            Constructs a node linked to the specified node.
            </summary>
            <param name="linked">The linked node.</param>
            <param name="item">The item to place in this node.</param>
        </member>
        <member name="P:System.Linq.SingleLinkedNode`1.Item">
            <summary>
            The item held by this node.
            </summary>
        </member>
        <member name="P:System.Linq.SingleLinkedNode`1.Linked">
            <summary>
            The next node in the singly-linked list.
            </summary>
        </member>
        <member name="M:System.Linq.SingleLinkedNode`1.Add(`0)">
            <summary>
            Creates a new node that holds the specified item and is linked to this node.
            </summary>
            <param name="item">The item to place in the new node.</param>
        </member>
        <member name="M:System.Linq.SingleLinkedNode`1.GetCount">
            <summary>
            Gets the number of items in this and subsequent nodes by walking the linked list.
            </summary>
        </member>
        <member name="M:System.Linq.SingleLinkedNode`1.GetEnumerator(System.Int32)">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.IEnumerator`1"/> that enumerates the items of this node's singly-linked list in reverse.
            </summary>
            <param name="count">The number of items in this node.</param>
        </member>
        <member name="M:System.Linq.SingleLinkedNode`1.GetNode(System.Int32)">
            <summary>
            Gets the node at a logical index by walking the linked list.
            </summary>
            <param name="index">The logical index.</param>
            <remarks>
            The caller should make sure <paramref name="index"/> is less than this node's count.
            </remarks>
        </member>
        <member name="M:System.Linq.SingleLinkedNode`1.ToArray(System.Int32)">
            <summary>
            Returns an <see cref="T:TSource[]"/> that contains the items of this node's singly-linked list in reverse.
            </summary>
            <param name="count">The number of items in this node.</param>
        </member>
        <member name="T:System.Runtime.CompilerServices.AsyncIteratorMethodBuilder">
            <summary>Represents a builder for asynchronous iterators.</summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.AsyncIteratorMethodBuilder.Create">
            <summary>Creates an instance of the <see cref="T:System.Runtime.CompilerServices.AsyncIteratorMethodBuilder"/> struct.</summary>
            <returns>The initialized instance.</returns>
        </member>
        <member name="M:System.Runtime.CompilerServices.AsyncIteratorMethodBuilder.MoveNext``1(``0@)">
            <summary>Invokes <see cref="M:System.Runtime.CompilerServices.IAsyncStateMachine.MoveNext"/> on the state machine while guarding the <see cref="T:System.Threading.ExecutionContext"/>.</summary>
            <typeparam name="TStateMachine">The type of the state machine.</typeparam>
            <param name="stateMachine">The state machine instance, passed by reference.</param>
        </member>
        <member name="M:System.Runtime.CompilerServices.AsyncIteratorMethodBuilder.AwaitOnCompleted``2(``0@,``1@)">
            <summary>Schedules the state machine to proceed to the next action when the specified awaiter completes.</summary>
            <typeparam name="TAwaiter">The type of the awaiter.</typeparam>
            <typeparam name="TStateMachine">The type of the state machine.</typeparam>
            <param name="awaiter">The awaiter.</param>
            <param name="stateMachine">The state machine.</param>
        </member>
        <member name="M:System.Runtime.CompilerServices.AsyncIteratorMethodBuilder.AwaitUnsafeOnCompleted``2(``0@,``1@)">
            <summary>Schedules the state machine to proceed to the next action when the specified awaiter completes.</summary>
            <typeparam name="TAwaiter">The type of the awaiter.</typeparam>
            <typeparam name="TStateMachine">The type of the state machine.</typeparam>
            <param name="awaiter">The awaiter.</param>
            <param name="stateMachine">The state machine.</param>
        </member>
        <member name="M:System.Runtime.CompilerServices.AsyncIteratorMethodBuilder.Complete">
            <summary>Marks iteration as being completed, whether successfully or otherwise.</summary>
        </member>
        <member name="P:System.Runtime.CompilerServices.AsyncIteratorMethodBuilder.ObjectIdForDebugger">
            <summary>Gets an object that may be used to uniquely identify this builder to the debugger.</summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.ConfiguredAsyncDisposable">
            <summary>Provides a type that can be used to configure how awaits on an <see cref="T:System.IAsyncDisposable"/> are performed.</summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.ConfiguredCancelableAsyncEnumerable`1">
            <summary>Provides an awaitable async enumerable that enables cancelable iteration and configured awaits.</summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.ConfiguredCancelableAsyncEnumerable`1.ConfigureAwait(System.Boolean)">
            <summary>Configures how awaits on the tasks returned from an async iteration will be performed.</summary>
            <param name="continueOnCapturedContext">Whether to capture and marshal back to the current context.</param>
            <returns>The configured enumerable.</returns>
            <remarks>This will replace any previous value set by <see cref="M:System.Runtime.CompilerServices.ConfiguredCancelableAsyncEnumerable`1.ConfigureAwait(System.Boolean)"/> for this iteration.</remarks>
        </member>
        <member name="M:System.Runtime.CompilerServices.ConfiguredCancelableAsyncEnumerable`1.WithCancellation(System.Threading.CancellationToken)">
            <summary>Sets the <see cref="T:System.Threading.CancellationToken"/> to be passed to <see cref="M:System.Collections.Generic.IAsyncEnumerable`1.GetAsyncEnumerator(System.Threading.CancellationToken)"/> when iterating.</summary>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to use.</param>
            <returns>The configured enumerable.</returns>
            <remarks>This will replace any previous <see cref="T:System.Threading.CancellationToken"/> set by <see cref="M:System.Runtime.CompilerServices.ConfiguredCancelableAsyncEnumerable`1.WithCancellation(System.Threading.CancellationToken)"/> for this iteration.</remarks>
        </member>
        <member name="T:System.Runtime.CompilerServices.ConfiguredCancelableAsyncEnumerable`1.Enumerator">
            <summary>Provides an awaitable async enumerator that enables cancelable iteration and configured awaits.</summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.ConfiguredCancelableAsyncEnumerable`1.Enumerator.MoveNextAsync">
            <summary>Advances the enumerator asynchronously to the next element of the collection.</summary>
            <returns>
            A <see cref="T:System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable`1"/> that will complete with a result of <c>true</c>
            if the enumerator was successfully advanced to the next element, or <c>false</c> if the enumerator has
            passed the end of the collection.
            </returns>
        </member>
        <member name="P:System.Runtime.CompilerServices.ConfiguredCancelableAsyncEnumerable`1.Enumerator.Current">
            <summary>Gets the element in the collection at the current position of the enumerator.</summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.ConfiguredCancelableAsyncEnumerable`1.Enumerator.DisposeAsync">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or
            resetting unmanaged resources asynchronously.
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.AsyncEnumerableExtensions.ConfigureAwait(System.IAsyncDisposable,System.Boolean)">
            <summary>Configures how awaits on the tasks returned from an async disposable will be performed.</summary>
            <param name="source">The source async disposable.</param>
            <param name="continueOnCapturedContext">Whether to capture and marshal back to the current context.</param>
            <returns>The configured async disposable.</returns>
        </member>
        <member name="M:System.Threading.Tasks.AsyncEnumerableExtensions.ConfigureAwait``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Boolean)">
            <summary>Configures how awaits on the tasks returned from an async iteration will be performed.</summary>
            <typeparam name="T">The type of the objects being iterated.</typeparam>
            <param name="source">The source enumerable being iterated.</param>
            <param name="continueOnCapturedContext">Whether to capture and marshal back to the current context.</param>
            <returns>The configured enumerable.</returns>
        </member>
        <member name="M:System.Threading.Tasks.AsyncEnumerableExtensions.WithCancellation``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Threading.CancellationToken)">
            <summary>Sets the <see cref="T:System.Threading.CancellationToken"/> to be passed to <see cref="M:System.Collections.Generic.IAsyncEnumerable`1.GetAsyncEnumerator(System.Threading.CancellationToken)"/> when iterating.</summary>
            <typeparam name="T">The type of the objects being iterated.</typeparam>
            <param name="source">The source enumerable being iterated.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to use.</param>
            <returns>The configured enumerable.</returns>
        </member>
        <member name="T:System.Threading.Tasks.Sources.ManualResetValueTaskSourceCore`1">
            <summary>Provides the core logic for implementing a manual-reset <see cref="T:System.Threading.Tasks.Sources.IValueTaskSource"/> or <see cref="T:System.Threading.Tasks.Sources.IValueTaskSource`1"/>.</summary>
            <typeparam name="TResult"></typeparam>
        </member>
        <member name="F:System.Threading.Tasks.Sources.ManualResetValueTaskSourceCore`1._continuation">
            <summary>
            The callback to invoke when the operation completes if <see cref="M:System.Threading.Tasks.Sources.ManualResetValueTaskSourceCore`1.OnCompleted(System.Action{System.Object},System.Object,System.Int16,System.Threading.Tasks.Sources.ValueTaskSourceOnCompletedFlags)"/> was called before the operation completed,
            or <see cref="F:System.Threading.Tasks.Sources.ManualResetValueTaskSourceCoreShared.s_sentinel"/> if the operation completed before a callback was supplied,
            or null if a callback hasn't yet been provided and the operation hasn't yet completed.
            </summary>
        </member>
        <member name="F:System.Threading.Tasks.Sources.ManualResetValueTaskSourceCore`1._continuationState">
            <summary>State to pass to <see cref="F:System.Threading.Tasks.Sources.ManualResetValueTaskSourceCore`1._continuation"/>.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Sources.ManualResetValueTaskSourceCore`1._executionContext">
            <summary><see cref="T:System.Threading.ExecutionContext"/> to flow to the callback, or null if no flowing is required.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Sources.ManualResetValueTaskSourceCore`1._capturedContext">
            <summary>
            A "captured" <see cref="T:System.Threading.SynchronizationContext"/> or <see cref="T:System.Threading.Tasks.TaskScheduler"/> with which to invoke the callback,
            or null if no special context is required.
            </summary>
        </member>
        <member name="F:System.Threading.Tasks.Sources.ManualResetValueTaskSourceCore`1._completed">
            <summary>Whether the current operation has completed.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Sources.ManualResetValueTaskSourceCore`1._result">
            <summary>The result with which the operation succeeded, or the default value if it hasn't yet completed or failed.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Sources.ManualResetValueTaskSourceCore`1._error">
            <summary>The exception with which the operation failed, or null if it hasn't yet completed or completed successfully.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Sources.ManualResetValueTaskSourceCore`1._version">
            <summary>The current version of this value, used to help prevent misuse.</summary>
        </member>
        <member name="P:System.Threading.Tasks.Sources.ManualResetValueTaskSourceCore`1.RunContinuationsAsynchronously">
            <summary>Gets or sets whether to force continuations to run asynchronously.</summary>
            <remarks>Continuations may run asynchronously if this is false, but they'll never run synchronously if this is true.</remarks>
        </member>
        <member name="M:System.Threading.Tasks.Sources.ManualResetValueTaskSourceCore`1.Reset">
            <summary>Resets to prepare for the next operation.</summary>
        </member>
        <member name="M:System.Threading.Tasks.Sources.ManualResetValueTaskSourceCore`1.SetResult(`0)">
            <summary>Completes with a successful result.</summary>
            <param name="result">The result.</param>
        </member>
        <member name="M:System.Threading.Tasks.Sources.ManualResetValueTaskSourceCore`1.SetException(System.Exception)">
            <summary>Complets with an error.</summary>
            <param name="error"></param>
        </member>
        <member name="P:System.Threading.Tasks.Sources.ManualResetValueTaskSourceCore`1.Version">
            <summary>Gets the operation version.</summary>
        </member>
        <member name="M:System.Threading.Tasks.Sources.ManualResetValueTaskSourceCore`1.GetStatus(System.Int16)">
            <summary>Gets the status of the operation.</summary>
            <param name="token">Opaque value that was provided to the <see cref="T:System.Threading.Tasks.ValueTask"/>'s constructor.</param>
        </member>
        <member name="M:System.Threading.Tasks.Sources.ManualResetValueTaskSourceCore`1.GetResult(System.Int16)">
            <summary>Gets the result of the operation.</summary>
            <param name="token">Opaque value that was provided to the <see cref="T:System.Threading.Tasks.ValueTask"/>'s constructor.</param>
        </member>
        <member name="M:System.Threading.Tasks.Sources.ManualResetValueTaskSourceCore`1.OnCompleted(System.Action{System.Object},System.Object,System.Int16,System.Threading.Tasks.Sources.ValueTaskSourceOnCompletedFlags)">
            <summary>Schedules the continuation action for this operation.</summary>
            <param name="continuation">The continuation to invoke when the operation has completed.</param>
            <param name="state">The state object to pass to <paramref name="continuation"/> when it's invoked.</param>
            <param name="token">Opaque value that was provided to the <see cref="T:System.Threading.Tasks.ValueTask"/>'s constructor.</param>
            <param name="flags">The flags describing the behavior of the continuation.</param>
        </member>
        <member name="M:System.Threading.Tasks.Sources.ManualResetValueTaskSourceCore`1.ValidateToken(System.Int16)">
            <summary>Ensures that the specified token matches the current version.</summary>
            <param name="token">The token supplied by <see cref="T:System.Threading.Tasks.ValueTask"/>.</param>
        </member>
        <member name="M:System.Threading.Tasks.Sources.ManualResetValueTaskSourceCore`1.SignalCompletion">
            <summary>Signals that that the operation has completed.  Invoked after the result or error has been set.</summary>
        </member>
        <member name="M:System.Threading.Tasks.Sources.ManualResetValueTaskSourceCore`1.InvokeContinuation">
            <summary>
            Invokes the continuation with the appropriate captured context / scheduler.
            This assumes that if <see cref="F:System.Threading.Tasks.Sources.ManualResetValueTaskSourceCore`1._executionContext"/> is not null we're already
            running within that <see cref="T:System.Threading.ExecutionContext"/>.
            </summary>
        </member>
    </members>
</doc>
