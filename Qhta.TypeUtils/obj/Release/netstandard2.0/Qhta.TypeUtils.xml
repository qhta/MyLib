<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Qhta.TypeUtils</name>
    </assembly>
    <members>
        <member name="T:Qhta.TypeUtils.DynamicTypeConverter">
            <summary>
            A class that helps using <c>TypeConverter</c> to change an object type in the runtime.
            </summary>
        </member>
        <member name="T:Qhta.TypeUtils.EnumTypeConverter">
            <summary>
            A class that helps enum type conversion to/from string
            </summary>
        </member>
        <member name="T:Qhta.TypeUtils.ObjectCopier">
            <summary>
            Reference Article http://www.codeproject.com/KB/tips/SerializedObjectCloner.aspx
            Provides a method for performing a deep copy of an object.
            Binary Serialization is used to perform the copy.
            </summary>
        </member>
        <member name="M:Qhta.TypeUtils.ObjectCopier.Clone``1(``0)">
            <summary>
            Perform a deep Copy of the object.
            </summary>
            <typeparam name="T">The type of object being copied.</typeparam>
            <param name="source">The object instance to copy.</param>
            <returns>The copied object.</returns>
        </member>
        <member name="T:Qhta.TypeUtils.StaticToStringConverter">
            <summary>
            A static class that converts object to string
            </summary>
        </member>
        <member name="T:Qhta.TypeUtils.StaticTypeConverter">
            <summary>
            A static class that converts object type
            </summary>
        </member>
        <member name="T:Qhta.TypeUtils.TypeCategorization">
            <summary>
            A static class that evaluates category of a type
            </summary>
        </member>
        <member name="T:Qhta.TypeUtils.TypeNaming">
            <summary>
            More friendy type names
            </summary>
        </member>
        <member name="T:Qhta.TypeUtils.TypeUtils">
            <summary>
            Helpful functions that operate on types and supplement <c>System.Reflection</c> library
            </summary>
        </member>
        <member name="M:Qhta.TypeUtils.TypeUtils.GetElementType(System.Type)">
            <summary>
            Expanded <see cref="M:System.Type.GetElementType"/> method
            with <see cref="M:System.Type.GetInterfaces"/>
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Qhta.TypeUtils.TypeUtils.Redefines(System.Reflection.MemberInfo,System.Reflection.MemberInfo)" -->
        <!-- Badly formed XML comment ignored for member "M:Qhta.TypeUtils.TypeUtils.Redefines(System.Reflection.FieldInfo,System.Reflection.FieldInfo)" -->
        <!-- Badly formed XML comment ignored for member "M:Qhta.TypeUtils.TypeUtils.Redefines(System.Reflection.PropertyInfo,System.Reflection.PropertyInfo)" -->
        <!-- Badly formed XML comment ignored for member "M:Qhta.TypeUtils.TypeUtils.Redefines(System.Reflection.MethodInfo,System.Reflection.MethodInfo)" -->
        <member name="M:Qhta.TypeUtils.TypeUtils.GetMembersByInheritance(System.Type,System.Reflection.BindingFlags)">
            <summary>
              Replacement for a <see cref="M:System.Type.GetMembers"/> method in case
              when a <param name="Flags"/> parameter does not have option
              <see cref="F:System.Reflection.BindingFlags.DeclaredOnly"/>. Then methods are taken also from superclasses,
              but are also ordered with inheritance order (from top superclass first).
             </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Qhta.TypeUtils.TypeUtils.GetCustomAttibutesByInheritance(System.Type,System.Boolean,System.Boolean)" -->
        <!-- Badly formed XML comment ignored for member "M:Qhta.TypeUtils.TypeUtils.GetCustomAttibutesByInheritance``1(System.Type,System.Boolean,System.Boolean)" -->
        <member name="M:Qhta.TypeUtils.TypeUtils.CopyProperties(System.Object,System.Object,System.Boolean)">
            <summary>
            Copying public properties from a <paramref name="source"/> object to a <paramref name="target"/> object.
            Object can be of different types. Properties are paired through names.
            Indexers and special properties are not copied.
            Returns names of copied properties.
            </summary>
            <param name="source">Source object</param>
            <param name="target">Target object</param>
            <returns>Names of copied properties</returns>
        </member>
    </members>
</doc>
