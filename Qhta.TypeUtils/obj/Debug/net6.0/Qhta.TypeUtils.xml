<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Qhta.TypeUtils</name>
    </assembly>
    <members>
        <member name="T:Qhta.TypeUtils.DynamicTypeConverter">
            <summary>
              A class that helps using <c>TypeConverter</c> to change an object type in the runtime.
            </summary>
        </member>
        <member name="M:Qhta.TypeUtils.DynamicTypeConverter.#ctor(System.ComponentModel.TypeConverter,System.Type)">
            <summary>
              Initializing constructor
            </summary>
            <param name="typeConverter"></param>
            <param name="targetType"></param>
        </member>
        <member name="M:Qhta.TypeUtils.DynamicTypeConverter.Convert(System.Object)">
            <summary>
              Wraps TypeConverter.ConvertFrom
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:Qhta.TypeUtils.EnumTypeConverter">
            <summary>
              A class that helps enum type conversion to/from string
            </summary>
        </member>
        <member name="M:Qhta.TypeUtils.EnumTypeConverter.RemoveAll(System.String,System.Int32,System.Char[])">
            <summary>
              Remove specific chars from string
            </summary>
            <param name="str"></param>
            <param name="from"></param>
            <param name="charsToRemove"></param>
            <returns></returns>
        </member>
        <member name="M:Qhta.TypeUtils.EnumTypeConverter.Encode``1(``0)">
            <summary>
              Translating enum value to string
            </summary>
            <typeparam name="EType"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Qhta.TypeUtils.EnumTypeConverter.Decode``1(System.String)">
            <summary>
              Translating string value to enum value
            </summary>
            <typeparam name="EType"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Qhta.TypeUtils.EnumTypeConverter.TryDecode``1(System.String,System.Nullable{``0}@)">
            <summary>
              Trying translating string value to enum value
            </summary>
            <typeparam name="EType"></typeparam>
            <param name="value"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:Qhta.TypeUtils.EnumTypeConverter.TryDecode``1(System.String,System.Nullable{``0}@,System.String@)">
            <summary>
              Trying translating string value to enum value
            </summary>
            <typeparam name="EType"></typeparam>
            <param name="value"></param>
            <param name="result"></param>
            <param name="invalidKey"></param>
            <returns></returns>
        </member>
        <member name="T:Qhta.TypeUtils.JointProperties">
            <summary>
              A class to copy properties marked with [DataMember] attribute
            </summary>
        </member>
        <member name="F:Qhta.TypeUtils.JointProperties.SourceProp">
            <summary>
              Source property info (copy from)
            </summary>
        </member>
        <member name="F:Qhta.TypeUtils.JointProperties.TargetProp">
            <summary>
              Target property info (copy to)
            </summary>
        </member>
        <member name="M:Qhta.TypeUtils.JointProperties.GetJointProperties(System.Type,System.Type)">
            <summary>
              First - get list of common data members
            </summary>
            <param name="sourceDataType"></param>
            <param name="targetDataType"></param>
            <returns></returns>
        </member>
        <member name="M:Qhta.TypeUtils.JointProperties.CopyJointProperties(System.Object,System.Object,System.Collections.Generic.IEnumerable{Qhta.TypeUtils.JointProperties})">
            <summary>
              Secont - copy common data members using prepared list
            </summary>
            <param name="sourceDataObject"></param>
            <param name="targetDataObject"></param>
            <param name="jointProperties"></param>
        </member>
        <member name="M:Qhta.TypeUtils.JointProperties.GetDataProperties(System.Type)">
            <summary>
              Helper - enumerate data members of a single data type
            </summary>
            <param name="dataType"></param>
            <returns></returns>
        </member>
        <member name="M:Qhta.TypeUtils.JointProperties.TryGetTypeConverter(System.Reflection.PropertyInfo,System.ComponentModel.TypeConverter@)">
            <summary>
              Get TypeConverter instance for a specific property
            </summary>
            <param name="property"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="T:Qhta.TypeUtils.NonComparableAttribute">
            <summary>
              Attribute to set at non-comparable property.
            </summary>
        </member>
        <member name="T:Qhta.TypeUtils.CompareResult">
            <summary>
              The result of object comparison
            </summary>
        </member>
        <member name="P:Qhta.TypeUtils.CompareResult.AreEqual">
            <summary>
              Indicates if objects are equal
            </summary>
        </member>
        <member name="P:Qhta.TypeUtils.CompareResult.DiffPath">
            <summary>
              If objects are not equal then this value holds the property path to first different properties
            </summary>
        </member>
        <member name="T:Qhta.TypeUtils.ObjectComparer">
            <summary>
              Utility class to object deep comparison
            </summary>
        </member>
        <member name="M:Qhta.TypeUtils.ObjectComparer.AreEqual(System.Object,System.Object)">
            <summary>
              Compares two objects in deep. All public read/write properties are compared
              except those marked with NonComparable attribute.
              If objects are different then diffPath is returned with a property path to first different properties.
              If objects are of different type then diffPath is "@Type".
            </summary>
            <param name="this"></param>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Qhta.TypeUtils.ObjectComparer.AreEqualAsync(System.Object,System.Object)">
            <summary>
              Asynchronous object comparison
            </summary>
            <param name="this"></param>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="T:Qhta.TypeUtils.ObjectCopier">
            <summary>
              Reference Article http://www.codeproject.com/KB/tips/SerializedObjectCloner.aspx
              Provides a method for performing a deep copy of an object.
              Binary Serialization is used to perform the copy.
            </summary>
        </member>
        <member name="M:Qhta.TypeUtils.ObjectCopier.Clone``1(``0)">
            <summary>
              Perform a deep Copy of the object.
            </summary>
            <typeparam name="T">The type of object being copied.</typeparam>
            <param name="source">The object instance to copy.</param>
            <returns>The copied object.</returns>
        </member>
        <member name="T:Qhta.TypeUtils.StaticToStringConverter">
            <summary>
              A static class that converts object to string
            </summary>
        </member>
        <member name="M:Qhta.TypeUtils.StaticToStringConverter.CharToString(System.Char)">
            <summary>
              Converting character value to string
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Qhta.TypeUtils.StaticToStringConverter.BoolToString(System.Boolean)">
            <summary>
              Converting boolean value to string
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Qhta.TypeUtils.StaticToStringConverter.SByteToString(System.SByte)">
            <summary>
              Converting signed byte value to string
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Qhta.TypeUtils.StaticToStringConverter.Int16ToString(System.Int16)">
            <summary>
              Converting int16 value to string
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Qhta.TypeUtils.StaticToStringConverter.Int32ToString(System.Int32)">
            <summary>
              Converting int32 value to string
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Qhta.TypeUtils.StaticToStringConverter.Int64ToString(System.Int64)">
            <summary>
              Converting int64 value to string
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Qhta.TypeUtils.StaticToStringConverter.ByteToString(System.Byte)">
            <summary>
              Converting byte value to string
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Qhta.TypeUtils.StaticToStringConverter.UInt16ToString(System.UInt16)">
            <summary>
              Converting unsigned int16 value to string
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Qhta.TypeUtils.StaticToStringConverter.UInt32ToString(System.UInt32)">
            <summary>
              Converting unsigned int32 value to string
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Qhta.TypeUtils.StaticToStringConverter.UInt64ToString(System.UInt64)">
            <summary>
              Converting unsigned int64 value to string
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Qhta.TypeUtils.StaticToStringConverter.FloatToString(System.Single)">
            <summary>
              Converting float value to string
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Qhta.TypeUtils.StaticToStringConverter.DoubleToString(System.Double)">
            <summary>
              Converting double value to string
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Qhta.TypeUtils.StaticToStringConverter.DateTimeToString(System.DateTime)">
            <summary>
              Converting DateTime value to string
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Qhta.TypeUtils.StaticToStringConverter.TimeSpanToString(System.TimeSpan)">
            <summary>
              Converting TimeSpan value to string
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Qhta.TypeUtils.StaticToStringConverter.EnumToString(System.Object)">
            <summary>
              Converting enum value to string
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Qhta.TypeUtils.StaticToStringConverter.NullableCharToString(System.Nullable{System.Char})">
            <summary>
              Converting nullable char value to string
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Qhta.TypeUtils.StaticToStringConverter.NullableBoolToString(System.Nullable{System.Boolean})">
            <summary>
              Converting nullable bool value to string
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Qhta.TypeUtils.StaticToStringConverter.NullableSByteToString(System.Nullable{System.SByte})">
            <summary>
              Converting nullable signed byte value to string
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Qhta.TypeUtils.StaticToStringConverter.NullableInt16ToString(System.Nullable{System.Int16})">
            <summary>
              Converting nullable int16 value to string
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Qhta.TypeUtils.StaticToStringConverter.NullableInt32ToString(System.Nullable{System.Int32})">
            <summary>
              Converting nullable int32 value to string
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Qhta.TypeUtils.StaticToStringConverter.NullableInt64ToString(System.Nullable{System.Int64})">
            <summary>
              Converting nullable int64 value to string
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Qhta.TypeUtils.StaticToStringConverter.NullableByteToString(System.Nullable{System.Byte})">
            <summary>
              Converting nullable byte value to string
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Qhta.TypeUtils.StaticToStringConverter.NullableUInt16ToString(System.Nullable{System.UInt16})">
            <summary>
              Converting nullable unsigned int16 value to string
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Qhta.TypeUtils.StaticToStringConverter.NullableUInt32ToString(System.Nullable{System.UInt32})">
            <summary>
              Converting nullable unsigned int32 value to string
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Qhta.TypeUtils.StaticToStringConverter.NullableUInt64ToString(System.Nullable{System.UInt64})">
            <summary>
              Converting nullable unsigned int64 value to string
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Qhta.TypeUtils.StaticToStringConverter.NullableFloatToString(System.Nullable{System.Single})">
            <summary>
              Converting nullable float value to string
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Qhta.TypeUtils.StaticToStringConverter.NullableDoubleToString(System.Nullable{System.Double})">
            <summary>
              Converting nullable double value to string
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Qhta.TypeUtils.StaticToStringConverter.NullableDateTimeToString(System.Nullable{System.DateTime})">
            <summary>
              Converting nullable DateTime value to string
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Qhta.TypeUtils.StaticToStringConverter.NullableTimeSpanToString(System.Nullable{System.TimeSpan})">
            <summary>
              Converting nullable TimeSpan value to string
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Qhta.TypeUtils.StaticToStringConverter.NullableEnumToString(System.Object)">
            <summary>
              Converting nullable enum value to string
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Qhta.TypeUtils.StaticToStringConverter.ClassToString(System.Object)">
            <summary>
              Converting class value to string
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:Qhta.TypeUtils.StaticTypeConverter">
            <summary>
              A static class that converts object type
            </summary>
        </member>
        <member name="M:Qhta.TypeUtils.StaticTypeConverter.ConvertToString(System.Object,System.ComponentModel.TypeConverter,System.Type)">
            <summary>
              Convert type to string
            </summary>
            <param name="value"></param>
            <param name="typeConverter"></param>
            <param name="targetType"></param>
            <returns></returns>
        </member>
        <member name="T:Qhta.TypeUtils.TypeCategory">
            <summary>
              Specific categories of types
            </summary>
        </member>
        <member name="F:Qhta.TypeUtils.TypeCategory.Simple">
            <summary>
              A simple type (type has no members)
            </summary>
        </member>
        <member name="F:Qhta.TypeUtils.TypeCategory.Textual">
            <summary>
              String or character type
            </summary>
        </member>
        <member name="F:Qhta.TypeUtils.TypeCategory.Logical">
            <summary>
              logical operations enabled (e.g. boolean)
            </summary>
        </member>
        <member name="F:Qhta.TypeUtils.TypeCategory.Numeral">
            <summary>
              Arithmetic operations enabled
            </summary>
        </member>
        <member name="F:Qhta.TypeUtils.TypeCategory.Signed">
            <summary>
              Signed numeral
            </summary>
        </member>
        <member name="F:Qhta.TypeUtils.TypeCategory.Unsigned">
            <summary>
              Unsigned numeral
            </summary>
        </member>
        <member name="F:Qhta.TypeUtils.TypeCategory.Integer">
            <summary>
              Integer numeral
            </summary>
        </member>
        <member name="F:Qhta.TypeUtils.TypeCategory.Fixed">
            <summary>
              Fixed decimal position numeral
            </summary>
        </member>
        <member name="F:Qhta.TypeUtils.TypeCategory.Float">
            <summary>
              Float decimal position numeral
            </summary>
        </member>
        <member name="F:Qhta.TypeUtils.TypeCategory.Temporal">
            <summary>
              DateTime or TimeSpan
            </summary>
        </member>
        <member name="F:Qhta.TypeUtils.TypeCategory.Enumerable">
            <summary>
              Enumerable type
            </summary>
        </member>
        <member name="F:Qhta.TypeUtils.TypeCategory.Nullable">
            <summary>
              Nullable type
            </summary>
        </member>
        <member name="T:Qhta.TypeUtils.TypeCategorization">
            <summary>
              A static class that evaluates category of a type
            </summary>
        </member>
        <member name="M:Qhta.TypeUtils.TypeCategorization.GetCategory(System.Type)">
            <summary>
              Categorization of a type
            </summary>
            <param name="aType">checked type</param>
            <returns>a <see cref="T:Qhta.TypeUtils.TypeCategory" /> of a type or 0 if not known</returns>
        </member>
        <member name="M:Qhta.TypeUtils.TypeCategorization.IsSimple(System.Type)">
            <summary>
              Is a type a simple type? A simple type is string, char, boolean, all numeral types, date/time, time span and guid
              type.
              Also an enum type is a simple type.
            </summary>
            <param name="aType">checked type</param>
            <returns>true if a type is a simple type</returns>
        </member>
        <member name="M:Qhta.TypeUtils.TypeCategorization.IsTextual(System.Type)">
            <summary>
              Is a type a textual type, i.e. string or char type
            </summary>
            <param name="aType">checked type</param>
            <returns>true if a type is a textual type</returns>
        </member>
        <member name="M:Qhta.TypeUtils.TypeCategorization.IsNumeral(System.Type)">
            <summary>
              Is a type a numeral type, i.e. integer or float or decimal type
            </summary>
            <param name="aType">checked type</param>
            <returns>true if a type is a numeral type</returns>
        </member>
        <member name="M:Qhta.TypeUtils.TypeCategorization.IsEqualOrSubclassOf(System.Type,System.Type)">
            <summary>
              Shortcut of type equality comparison or IsSubclassOf function
            </summary>
            <param name="thisType"></param>
            <param name="otherType"></param>
            <returns></returns>
        </member>
        <member name="M:Qhta.TypeUtils.TypeCategorization.IsNullable(System.Type)">
            <summary>
              Is a type a nullable type, i.e. it's name starts with "Nullable`1".
            </summary>
            <returns>true if a type is a nullable type</returns>
        </member>
        <member name="M:Qhta.TypeUtils.TypeCategorization.IsNullable(System.Type,System.Type@)">
            <summary>
              Checks if a type is a nullable type, i.e. it's name starts with "Nullable`1"
              and returns it's base type
            </summary>
            <param name="aType">checked type</param>
            <param name="baseType">based type of the nullable type</param>
            <returns>true if a type is a nullable type</returns>
        </member>
        <member name="M:Qhta.TypeUtils.TypeCategorization.IsArray(System.Type)">
            <summary>
              Is a type an array type.
            </summary>
            <param name="aType">checked type</param>
            <returns>true if a type is an array type</returns>
        </member>
        <member name="M:Qhta.TypeUtils.TypeCategorization.IsArray(System.Type,System.Type@)">
            <summary>
              Is a type an array type.
              If so it returns the item type of the array.
            </summary>
            <param name="aType">checked type</param>
            <param name="itemType">returned item type if a type is an array</param>
            <returns>true if a type is an array type</returns>
        </member>
        <member name="M:Qhta.TypeUtils.TypeCategorization.IsArray(System.Type,System.Type)">
            <summary>
              Is a type an array type.
              If so it check the item type of the array.
            </summary>
            <param name="aType">checked type</param>
            <param name="itemType">checked item type if a type is an array</param>
            <returns>true if a type is an array type of item Type</returns>
        </member>
        <member name="M:Qhta.TypeUtils.TypeCategorization.IsList(System.Type)">
            <summary>
              Is a type a list type, i.e. it's name starts with "List`1"
              or if it is a defined type which implements a IList`1 interface.
            </summary>
            <param name="aType">checked type</param>
            <returns>true if a type is a list type</returns>
        </member>
        <member name="M:Qhta.TypeUtils.TypeCategorization.IsList(System.Type,System.Type@)">
            <summary>
              Checks if a type a list type, i.e. it's name starts with "List`1"
              or if it is a defined type which implements a IList`1 interface.
              If so it returns the item type of the list.
            </summary>
            <param name="aType">checked type</param>
            <param name="itemType">returned item type if a type is a list</param>
            <returns>true if a type is a list type</returns>
        </member>
        <member name="M:Qhta.TypeUtils.TypeCategorization.IsList(System.Type,System.Type)">
            <summary>
              Is a type an list type, i.e. it's name starts with "List`1"
              or if it is a defined type which implements a IList`1 interface.
              If so it check the item type of the collection.
            </summary>
            <param name="aType">checked type</param>
            <param name="itemType">checked item type if a type is a list</param>
            <returns>true if a type is an enumerable type of item Type</returns>
        </member>
        <member name="M:Qhta.TypeUtils.TypeCategorization.IsCollection(System.Type)">
            <summary>
              Is a type a collection type, i.e. it's name starts with "Collection`1"
              or if it is a defined type which implements a ICollection`1 interface.
            </summary>
            <param name="aType">checked type</param>
            <returns>true if a type is a collection type</returns>
        </member>
        <member name="M:Qhta.TypeUtils.TypeCategorization.IsCollection(System.Type,System.Type@)">
            <summary>
              Is a type a collection type, i.e. it's name starts with "Collection`1"
              or if it is a defined type which implements a ICollection`1 interface.
              If so it returns the item type of the collection.
            </summary>
            <param name="aType">checked type</param>
            <param name="itemType">returned item type if a type is a collection</param>
            <returns>true if a type is a collection type</returns>
        </member>
        <member name="M:Qhta.TypeUtils.TypeCategorization.IsCollection(System.Type,System.Type)">
            <summary>
              Is a type a collection type, i.e. it's name starts with "Collection`1"
              or if it is a defined type which implements a ICollection`1 interface.
              If so it checks the item type of the collection.
            </summary>
            <param name="aType">checked type</param>
            <param name="itemType">checked item type if a type is a collection</param>
            <returns>true if a type is a collection type of item type</returns>
        </member>
        <member name="M:Qhta.TypeUtils.TypeCategorization.IsEnumerable(System.Type)">
            <summary>
              Is a type an enumerable type, i.e. it's name starts with "Enumerable`1"
              or if it is a defined type which implements a IEnumerable`1 interface.
            </summary>
            <param name="aType">checked type</param>
            <returns>true if a type is an enumerable type</returns>
        </member>
        <member name="M:Qhta.TypeUtils.TypeCategorization.IsEnumerable(System.Type,System.Type@)">
            <summary>
              Is a type an enumerable type, i.e. it's name starts with "Enumerable`1"
              or if it is a defined type which implements a IEnumerable`1 interface.
              If so it returns the item type of the collection.
            </summary>
            <param name="aType">checked type</param>
            <param name="itemType">returned item type if a type is an enumerable</param>
            <returns>true if a type is an enumerable type</returns>
        </member>
        <member name="M:Qhta.TypeUtils.TypeCategorization.IsEnumerable(System.Type,System.Type)">
            <summary>
              Is a type an enumerable type, i.e. it's name starts with "Enumerable`1"
              or if it is a defined type which implements a IEnumerable`1 interface.
              If so it check the item type of the collection.
            </summary>
            <param name="aType">checked type</param>
            <param name="itemType">checked item type if a type is an enumerable</param>
            <returns>true if a type is an enumerable type of item Type</returns>
        </member>
        <member name="M:Qhta.TypeUtils.TypeCategorization.IsDictionary(System.Type)">
            <summary>
              Is a type a dictionary type, i.e. it's name starts with "Dictionary`2"
              or if it is a defined type which implements a IDictionary`2 interface.
            </summary>
            <param name="aType">checked type</param>
            <returns>true if a type is a dictionary type</returns>
        </member>
        <member name="M:Qhta.TypeUtils.TypeCategorization.IsDictionary(System.Type,System.Type@,System.Type@)">
            <summary>
              Is a type a dictionary type, i.e. it's name starts with "Dictionary`2"
              or if it is a defined type which implements a IDictionary`2 interface.
              If so it returns the key type and the value type of the dictionary.
            </summary>
            <param name="aType">checked type</param>
            <param name="keyType">returned key type if a type is a dictionary</param>
            <param name="valueType">returned value type if a type is a dictionary</param>
            <returns>true if a type is a dictionary type</returns>
        </member>
        <member name="M:Qhta.TypeUtils.TypeCategorization.IsDictionary(System.Type,System.Type,System.Type)">
            <summary>
              Is a type a dictionary type, i.e. it's name starts with "Dictionary`2"
              or if it is a defined type which implements a IDictionary`2 interface.
              If so it checks the key type and the value type of the dictionary.
            </summary>
            <param name="aType">checked type</param>
            <param name="keyType">checked key type if a type is a dictionary</param>
            <param name="valueType">checked value type if a type is a dictionary</param>
            <returns>true if a type is a dictionary type of key and value type</returns>
        </member>
        <member name="M:Qhta.TypeUtils.TypeCategorization.IsKeyValuePair(System.Type)">
            <summary>
              Is a type a key value pair type, i.e. it's name starts with "KeyValuePair`2"
            </summary>
            <param name="aType">checked type</param>
            <returns>true if a type is a key value pair type</returns>
        </member>
        <member name="M:Qhta.TypeUtils.TypeCategorization.IsKeyValuePair(System.Type,System.Type@,System.Type@)">
            <summary>
              Is a type a key value pair  type, i.e. it's name starts with  "KeyValuePair`2"
              If so it returns the key type and the value type of the pair.
            </summary>
            <param name="aType">checked type</param>
            <param name="keyType">returned key type if a type is a key value pair</param>
            <param name="valueType">returned value type if a type is a key value pair</param>
            <returns>true if a type is a key value pair type</returns>
        </member>
        <member name="M:Qhta.TypeUtils.TypeCategorization.IsKeyValuePair(System.Type,System.Type,System.Type)">
            <summary>
              Is a type a key value pair  type, i.e. it's name starts with "KeyValuePair`2"
              If so it checks the key type and the value type of the pair.
            </summary>
            <param name="aType">checked type</param>
            <param name="keyType">checked item type if a type is a key value pair </param>
            <param name="valueType">checked item type if a type is a key value pair </param>
            <returns>true if a type is a key value pair type  of key and value type</returns>
        </member>
        <member name="F:Qhta.TypeUtils.TypeCategorization.NumericSupertypes">
            <summary>
              Mapping from a numeric type to possible numeric supertype
            </summary>
        </member>
        <member name="M:Qhta.TypeUtils.TypeCategorization.IsNumericSupertypeOf(System.Type,System.Type)">
            <summary>
              Check if this type can be a supertype of other type
            </summary>
            <param name="thisType"></param>
            <param name="otherType"></param>
            <returns></returns>
        </member>
        <member name="T:Qhta.TypeUtils.TypeNaming">
            <summary>
              More friendy type names
            </summary>
        </member>
        <member name="M:Qhta.TypeUtils.TypeNaming.GetTypeName(System.Type)">
            <summary>
              Getting specific name of the type
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:Qhta.TypeUtils.TypeReflectionByInheritance">
            <summary>
              Extension methods for getting members in order of inheritance
            </summary>
        </member>
        <member name="M:Qhta.TypeUtils.TypeReflectionByInheritance.GetMembersByInheritance(System.Type)">
            <summary>
              Replacement for a <c>Type.GetMembers</c> method.
              The members are taken also from superclasses,
              but are also ordered with inheritance order (from top superclass first).
            </summary>
        </member>
        <member name="M:Qhta.TypeUtils.TypeReflectionByInheritance.GetMembersByInheritance(System.Type,System.Reflection.BindingFlags)">
            <summary>
              Replacement for a <c>Type.GetMembers</c> method in case
              when a <paramref name="flags" /> parameter does not have option
              <c>BindingFlags.DeclaredOnly</c>. Then members are taken also from superclasses,
              but are also ordered with inheritance order (from top superclass first).
            </summary>
        </member>
        <member name="M:Qhta.TypeUtils.TypeReflectionByInheritance.GetMethodsByInheritance(System.Type)">
            <summary>
              Replacement for a <c>Type.GetMethods</c> method.
              The methods are taken also from superclasses,
              but are also ordered with inheritance order (from top superclass first).
            </summary>
        </member>
        <member name="M:Qhta.TypeUtils.TypeReflectionByInheritance.GetMethodsByInheritance(System.Type,System.Reflection.BindingFlags)">
            <summary>
              Replacement for a <c>Type.GetMethods(BindingFlags)</c> method in case
              when a <paramref name="flags" /> parameter does not have option
              <c>BindingFlags.DeclaredOnly</c>. Then methods are taken also from superclasses,
              but are also ordered with inheritance order (from top superclass first).
            </summary>
        </member>
        <member name="M:Qhta.TypeUtils.TypeReflectionByInheritance.GetMethodByInheritance(System.Type,System.String)">
            <summary>
              Replacement for a <c>Type.GetMethod(string)</c> method.
              The methods are taken also from superclasses,
              but are also ordered with inheritance order (from top superclass first).
            </summary>
        </member>
        <member name="M:Qhta.TypeUtils.TypeReflectionByInheritance.GetMethodByInheritance(System.Type,System.String,System.Reflection.BindingFlags)">
            <summary>
              Replacement for a <c>Type.GetMethod(string, BindingFlags)</c> method in case
              when a <paramref name="flags" /> parameter does not have option
              <c>BindingFlags.DeclaredOnly</c>. Then methods are taken also from superclasses,
              but are also ordered with inheritance order (from top superclass first).
            </summary>
        </member>
        <member name="M:Qhta.TypeUtils.TypeReflectionByInheritance.GetMethodByInheritance(System.Type,System.String,System.Type[])">
            <summary>
              Replacement for a <c>Type.GetMethod(string, Type[])</c> method.
              The methods are taken also from superclasses,
              but are also ordered with inheritance order (from top superclass first).
            </summary>
        </member>
        <member name="M:Qhta.TypeUtils.TypeReflectionByInheritance.GetMethodByInheritance(System.Type,System.String,System.Reflection.BindingFlags,System.Type[])">
            <summary>
              Replacement for a <c>Type.GetMethod(string, BindingFlags, Type[])</c> method in case
              when a <paramref name="flags" /> parameter does not have option
              <c>BindingFlags.DeclaredOnly</c>. Then methods are taken also from superclasses,
              but are also ordered with inheritance order (from top superclass first).
            </summary>
        </member>
        <member name="M:Qhta.TypeUtils.TypeReflectionByInheritance.GetPropertiesByInheritance(System.Type)">
            <summary>
              Replacement for a <c>Type.GetProperties</c> method.
              The properties are taken also from superclasses,
              but are also ordered with inheritance order (from top superclass first).
            </summary>
        </member>
        <member name="M:Qhta.TypeUtils.TypeReflectionByInheritance.GetPropertiesByInheritance(System.Type,System.Reflection.BindingFlags)">
            <summary>
              Replacement for a <c>Type.GetProperties(BindingFlags)</c> method in case
              when a <paramref name="flags" /> parameter does not have option
              <c>BindingFlags.DeclaredOnly</c>. Then properties are taken also from superclasses,
              but are also ordered with inheritance order (from top superclass first).
            </summary>
        </member>
        <member name="M:Qhta.TypeUtils.TypeReflectionByInheritance.GetPropertyByInheritance(System.Type,System.String)">
            <summary>
              Replacement for a <c>Type.GetProperty(string)</c> method.
              The properties are taken also from superclasses,
              but are also ordered with inheritance order (from top superclass first).
            </summary>
        </member>
        <member name="M:Qhta.TypeUtils.TypeReflectionByInheritance.GetPropertyByInheritance(System.Type,System.String,System.Reflection.BindingFlags)">
            <summary>
              Replacement for a <c>Type.GetProperty(string, BindingFlags)</c> method in case
              when a <paramref name="flags" /> parameter does not have option
              <c>BindingFlags.DeclaredOnly</c>. Then properties are taken also from superclasses,
              but are also ordered with inheritance order (from top superclass first).
            </summary>
        </member>
        <member name="M:Qhta.TypeUtils.TypeReflectionByInheritance.GetFieldsByInheritance(System.Type)">
            <summary>
              Replacement for a <c>Type.GetFields</c> method.
              The properties are taken also from superclasses,
              but are also ordered with inheritance order (from top superclass first).
            </summary>
        </member>
        <member name="M:Qhta.TypeUtils.TypeReflectionByInheritance.GetFieldsByInheritance(System.Type,System.Reflection.BindingFlags)">
            <summary>
              Replacement for a <c>Type.GetFields(BindingFlags)</c> method in case
              when a <paramref name="flags" /> parameter does not have option
              <c>BindingFlags.DeclaredOnly</c>. Then properties are taken also from superclasses,
              but are also ordered with inheritance order (from top superclass first).
            </summary>
        </member>
        <member name="M:Qhta.TypeUtils.TypeReflectionByInheritance.GetFieldByInheritance(System.Type,System.String)">
            <summary>
              Replacement for a <c>Type.GetField(string)</c> method.
              The properties are taken also from superclasses,
              but are also ordered with inheritance order (from top superclass first).
            </summary>
        </member>
        <member name="M:Qhta.TypeUtils.TypeReflectionByInheritance.GetFieldByInheritance(System.Type,System.String,System.Reflection.BindingFlags)">
            <summary>
              Replacement for a <c>Type.GetField(string, BindingFlags)</c> method in case
              when a <paramref name="flags" /> parameter does not have option
              <c>BindingFlags.DeclaredOnly</c>. Then properties are taken also from superclasses,
              but are also ordered with inheritance order (from top superclass first).
            </summary>
        </member>
        <member name="M:Qhta.TypeUtils.TypeReflectionByInheritance.GetCustomAttibutesByInheritance(System.Type,System.Boolean,System.Boolean)">
            <summary>
              Replacement for a <c>Type.GetCustomAttributes</c> method in case
              when an <paramref name="inherit" /> parameter is set for <c>true</c>
              Then attributes are taken also from superclasses,
              but are also ordered with inheritance order.
            </summary>
            <param name="aType">A type which attributes are searched</param>
            <param name="inherit">Search in superclasses?</param>
            <param name="inheritedFirst">Should inherited attributes be ordered first?</param>
            <returns>A table of attributes</returns>
        </member>
        <member name="M:Qhta.TypeUtils.TypeReflectionByInheritance.GetCustomAttibutesByInheritance``1(System.Type,System.Boolean,System.Boolean)">
            <summary>
              Replacement for a <c>Type.GetCustomAttributes</c> method in case
              when an <paramref name="inherit" /> parameter is set for <c>true</c>
              Then attributes are taken also from superclasses,
              but are also ordered with inheritance order.
              Only attributes of a specified type are returned.
            </summary>
            <typeparam name="TAttribute">A type of searched attributes</typeparam>
            <param name="aType">A type which attributes are searched</param>
            <param name="inherit">Search in superclasses?</param>
            <param name="inheritedFirst">Should inherited attributes be ordered first?</param>
            <returns>A table of attributes</returns>
        </member>
        <member name="T:Qhta.TypeUtils.TypeUtils">
            <summary>
              Helper functions that operate on types and supplement <c>System.Reflection</c> library
            </summary>
        </member>
        <member name="T:Qhta.TypeUtils.TypeUtils.CopyPropertyMethod">
            <summary>
              A delegate method for property copying
            </summary>
            <param name="source"></param>
            <param name="sourceValue"></param>
            <param name="target"></param>
            <param name="targetValue"></param>
            <returns></returns>
        </member>
        <member name="F:Qhta.TypeUtils.TypeUtils.KnownTypeConverters">
            <summary>
              A list of known type converters for <c>TryGetConverter</c> method.
              Is filled after successful invoke of <c>TryGetConverter</c>.
              Can be preset by a developer.
            </summary>
        </member>
        <member name="M:Qhta.TypeUtils.TypeUtils.GetTopmostMethod(System.Type,System.String)">
            <summary>
              When a class defines a new method with the same name as an inherited method,
              a "GetMethod" function return an error.
              This "GetTopmostMethod" method searches the original class first
              and if it will not find a method, then searches the base class recursively.
            </summary>
            <param name="aType"></param>
            <param name="methodName"></param>
            <returns></returns>
        </member>
        <member name="M:Qhta.TypeUtils.TypeUtils.IsDefaultValue(System.Type,System.Object)">
            <summary>
              Checks if the given value is the default value of the given type
            </summary>
            <param name="valueType"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Qhta.TypeUtils.TypeUtils.TryGetEnumValue(System.Type,System.String,System.Object@)">
            <summary>
              Converts string to enum value for an enum type. Returns false if no enum value recognized
            </summary>
            <param name="valueType">enum value type</param>
            <param name="text">enum name to convert</param>
            <param name="value">enum value after conversion</param>
            <returns></returns>
        </member>
        <member name="M:Qhta.TypeUtils.TypeUtils.TrySetValue(System.Reflection.PropertyInfo,System.Object,System.Object)">
            <summary>
              Safely sets a property of the target object to some value. Invokes <c>TryGetConverter</c> method.
            </summary>
            <param name="property">property info as get from type reflection</param>
            <param name="targetObject">target object to set value</param>
            <param name="value">value to set</param>
            <returns></returns>
        </member>
        <member name="M:Qhta.TypeUtils.TypeUtils.TryGetConverter(System.Type,System.ComponentModel.TypeConverter@)">
            <summary>
              Tries to get an instance of a value converter for a type using a <c>TypeConverterAttribute</c> of the given type.
            </summary>
            <param name="valueType"></param>
            <param name="typeConverter"></param>
            <returns></returns>
        </member>
        <member name="M:Qhta.TypeUtils.TypeUtils.TryConvertValue(System.Type,System.Object,System.Object@)">
            <summary>
              Tries to convert a value of the given type using its converter <c>ConvertFrom</c> method
            </summary>
            <param name="valueType">given type</param>
            <param name="value">value to convert from</param>
            <param name="result">conversion result</param>
            <returns></returns>
        </member>
        <member name="M:Qhta.TypeUtils.TypeUtils.TryParseEnum(System.Type,System.String,System.Object@)">
            <summary>
              Tries to convert enum string to enum value
            </summary>
            <param name="enumType">given enum type</param>
            <param name="str">string to convert from</param>
            <param name="value">conversion result</param>
            <returns></returns>
        </member>
        <member name="M:Qhta.TypeUtils.TypeUtils.GetElementType(System.Type)">
            <summary>
              Expanded <see cref="M:System.Type.GetElementType" /> method
              with <see cref="M:System.Type.GetInterfaces" />
            </summary>
        </member>
        <member name="M:Qhta.TypeUtils.TypeUtils.HasProperty(System.Type,System.String)">
            <summary>
              Determine if a type has property with a specified name.
              Equivalent to <c>type.GetProperty(name) != null</c>.
            </summary>
            <param name="type"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Qhta.TypeUtils.TypeUtils.HasProperty(System.Type,System.String,System.Reflection.BindingFlags)">
            <summary>
              Determine if a type has property with a specified name using BindingFlags.
              Equivalent to <c>type.GetProperty(name, flags) != null</c>.
            </summary>
            <param name="type"></param>
            <param name="name"></param>
            <param name="flags"></param>
            <returns></returns>
        </member>
        <member name="M:Qhta.TypeUtils.TypeUtils.GetValueType(System.Reflection.MemberInfo)">
            <summary>
              If memberInfo is PropertyInfo it returns PropertyType.
              Either if memberInfo is FieldInfo it returns FieldType.
              Otherwise it returns null.
            </summary>
            <param name="memberInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Qhta.TypeUtils.TypeUtils.CanWrite(System.Reflection.MemberInfo)">
            <summary>
              If memberInfo is PropertyInfo it returns PropertyInfo.CanWrite.
              Either if memberInfo is FieldInfo it returns negated FieldInfo.IsInitOnly.
              Otherwise it returns null.
            </summary>
            <param name="memberInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Qhta.TypeUtils.TypeUtils.IsIndexer(System.Reflection.MemberInfo)">
            <summary>
              If memberInfo is PropertyInfo it checks if it is indeksed property
              Otherwise it returns false.
            </summary>
            <param name="memberInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Qhta.TypeUtils.TypeUtils.Redefines(System.Reflection.MemberInfo,System.Reflection.MemberInfo)">
            <summary>
              Checking in a <paramref name="aInfo" /> member redefinines a <paramref name="bInfo" /> member.
            </summary>
            <param name="aInfo">info of a member that redefines</param>
            <param name="bInfo">info of a member that is redefined</param>
        </member>
        <member name="M:Qhta.TypeUtils.TypeUtils.Redefines(System.Reflection.FieldInfo,System.Reflection.FieldInfo)">
            <summary>
              Checking in a <paramref name="aInfo" /> field redefinines a <paramref name="bInfo" /> field.
            </summary>
            <param name="aInfo">info of a field that redefines</param>
            <param name="bInfo">info of a field that is redefined</param>
        </member>
        <member name="M:Qhta.TypeUtils.TypeUtils.Redefines(System.Reflection.PropertyInfo,System.Reflection.PropertyInfo)">
            <summary>
              Checking in a <paramref name="aInfo" /> property redefinines a <paramref name="bInfo" /> property.
            </summary>
            <param name="aInfo">info of a property that redefines</param>
            <param name="bInfo">info of a property that is redefined</param>
        </member>
        <member name="M:Qhta.TypeUtils.TypeUtils.Redefines(System.Reflection.MethodInfo,System.Reflection.MethodInfo)">
            <summary>
              Checking in a <paramref name="aInfo" /> method redefinines a <paramref name="bInfo" /> method.
            </summary>
            <param name="aInfo">info of a method that redefines</param>
            <param name="bInfo">info of a method that is redefined</param>
        </member>
        <member name="M:Qhta.TypeUtils.TypeUtils.CopyProperties(System.Object,System.Object,System.Boolean)">
            <summary>
              Copying public properties from a <paramref name="source" /> object to a <paramref name="target" /> object.
              Object can be of different types. Properties are paired through names.
              Indexers and special properties are not copied.
              Returns names of copied properties.
            </summary>
            <param name="source">Source object</param>
            <param name="target">Target object</param>
            <param name="revertConversion">use GetDeclaredCopyDelegatesReverse</param>
            <returns>Names of copied properties</returns>
        </member>
        <member name="M:Qhta.TypeUtils.TypeUtils.GetDeclaredCopyDelegates(System.Type,System.Type)">
            <summary>
              Gets declared delegates for copy of properties. Result - one method for each property name.
            </summary>
            <param name="sourceType"></param>
            <param name="targetType"></param>
            <returns></returns>
        </member>
        <member name="M:Qhta.TypeUtils.TypeUtils.GetDeclaredCopyDelegatesReverse(System.Type,System.Type)">
            <summary>
              Gets declared delegates for reverse copy of properties. Result - one method for each property name.
            </summary>
            <param name="sourceType"></param>
            <param name="targetType"></param>
        </member>
        <member name="M:Qhta.TypeUtils.TypeUtils.CopyProperties(System.Object,System.Object,System.Collections.Generic.Dictionary{System.String,Qhta.TypeUtils.TypeUtils.CopyPropertyMethod})">
            <summary>
              Simple copy of properties from source object to target object using methods delegated by property names.
            </summary>
            <param name="source"></param>
            <param name="target"></param>
            <param name="delegates"></param>
            <returns></returns>
        </member>
        <member name="T:Qhta.TypeUtils.TypeUtils.PropertyComparer">
            <summary>
              Helper class for property comparison
            </summary>
        </member>
        <member name="M:Qhta.TypeUtils.TypeUtils.PropertyComparer.Equals(System.Reflection.PropertyInfo,System.Reflection.PropertyInfo)">
            <summary>
              Check if one property equals other property.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Qhta.TypeUtils.TypeUtils.PropertyComparer.GetHashCode(System.Reflection.PropertyInfo)">
            <summary>
              A method needed to supply <c>Equals</c> method.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="T:Qhta.TypeUtils.CopyPropertyDelegate">
            <summary>
              A delegate class to property copying.
              Holds a target type and a target method name
            </summary>
        </member>
        <member name="M:Qhta.TypeUtils.CopyPropertyDelegate.#ctor(System.Type,System.String)">
            <summary>
              Constructor to init delegate
            </summary>
            <param name="targetType"></param>
            <param name="targetMethod"></param>
        </member>
        <member name="M:Qhta.TypeUtils.CopyPropertyDelegate.CopyProperty(System.Object,System.Object,System.Object,System.Object)">
            <summary>
              Copies a property using a target method
            </summary>
            <param name="source"></param>
            <param name="sourceValue"></param>
            <param name="target"></param>
            <param name="targetValue"></param>
            <returns></returns>
        </member>
        <member name="T:Qhta.TypeUtils.IEmpty">
            <summary>
              An interface to check if a type instance is empty.
            </summary>
        </member>
        <member name="P:Qhta.TypeUtils.IEmpty.IsEmpty">
            <summary>
              Simple property to check empty instance
            </summary>
        </member>
        <member name="T:Qhta.TypeUtils.CopyItemsDelegate">
            <summary>
              A delegate class to class items copying.
            </summary>
        </member>
        <member name="M:Qhta.TypeUtils.CopyItemsDelegate.#ctor(System.Type)">
            <summary>
              Initializing constructor
            </summary>
            <param name="targetPropertyType"></param>
        </member>
        <member name="M:Qhta.TypeUtils.CopyItemsDelegate.Add(System.Type,System.Type)">
            <summary>
              A method to add type pairs used to copy items
            </summary>
            <param name="sourceItemType"></param>
            <param name="targetItemType"></param>
        </member>
        <member name="M:Qhta.TypeUtils.CopyItemsDelegate.CopyItems(System.Object,System.Object,System.Object,System.Object)">
            <summary>
              A method to copy items from source to target
            </summary>
            <param name="source">source object</param>
            <param name="sourceValue">source value - must be <c>IEnumerable</c></param>
            <param name="target">target object</param>
            <param name="targetValue">target value - must be <c>IList</c></param>
            <returns></returns>
        </member>
        <member name="T:Qhta.TypeUtils.CopyPropertyConversionAttribute">
            <summary>
              An attribute to define conversion of properties for a type while copying
            </summary>
        </member>
        <member name="M:Qhta.TypeUtils.CopyPropertyConversionAttribute.#ctor(System.String,System.String)">
            <summary>
              Initializing constructir
            </summary>
            <param name="propertyName"></param>
            <param name="methodName"></param>
        </member>
        <member name="P:Qhta.TypeUtils.CopyPropertyConversionAttribute.PropertyName">
            <summary>
              Name of a property to copy
            </summary>
        </member>
        <member name="P:Qhta.TypeUtils.CopyPropertyConversionAttribute.MethodName">
            <summary>
              Name of a method used to convert while property copying
            </summary>
        </member>
        <member name="T:Qhta.TypeUtils.CopyPropertyItemConversionAttribute">
            <summary>
              An attribute to define conversion of compound property items for a type while copying
            </summary>
        </member>
        <member name="M:Qhta.TypeUtils.CopyPropertyItemConversionAttribute.#ctor(System.String,System.Type,System.Type)">
            <summary>
              Initializing constructor
            </summary>
            <param name="propertyName"></param>
            <param name="sourceItemType"></param>
            <param name="targetItemType"></param>
        </member>
        <member name="P:Qhta.TypeUtils.CopyPropertyItemConversionAttribute.PropertyName">
            <summary>
              Name of a property to copy
            </summary>
        </member>
        <member name="P:Qhta.TypeUtils.CopyPropertyItemConversionAttribute.SourceItemType">
            <summary>
              A type of source items
            </summary>
        </member>
        <member name="P:Qhta.TypeUtils.CopyPropertyItemConversionAttribute.TargetItemType">
            <summary>
              A type of target items
            </summary>
        </member>
    </members>
</doc>
