<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:theme="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Aero"
                    xmlns:utl="clr-namespace:Qhta.WPF.Utils;assembly=Qhta.WPF.Utils"
                    xmlns:cvt="clr-namespace:Qhta.WPF.Converters;assembly=Qhta.WPF.Converters"
                    x:Class="Qhta.WPF.Utils.CollectionViewBehavior">
  <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter" />
  <cvt:NotNullToVisibilityConverter x:Key="NotNullToVisibilityConverter" />
  
  <Style x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type DataGrid},ResourceId=DataGridSelectAllButtonStyle}"
         Style.TargetType="{x:Type Button}">
    <Setter Setter.Property="Control.Template">
      <Setter.Value>
        <ControlTemplate ControlTemplate.TargetType="{x:Type Button}">
          <Grid>
            <Rectangle Rectangle.Name="Border"
                       Shape.Fill="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"
                       UIElement.SnapsToDevicePixels="True" />
            <Polygon Polygon.Name="Arrow"
                     FrameworkElement.HorizontalAlignment="Right"
                     FrameworkElement.VerticalAlignment="Bottom"
                     FrameworkElement.Margin="8,8,3,3"
                     UIElement.Opacity="0.15"
                     Shape.Fill="#FF000000"
                     Shape.Stretch="Uniform"
                     Polygon.Points="0,10 10,10 10,0" />
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Trigger.Property="UIElement.IsMouseOver"
                     Trigger.Value="True">
              <Setter Setter.TargetName="Border"
                      Setter.Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}"
                      Setter.Property="Shape.Stroke" />
            </Trigger>
            <Trigger Trigger.Property="ButtonBase.IsPressed"
                     Trigger.Value="True">
              <Setter Setter.TargetName="Border"
                      Setter.Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}"
                      Setter.Property="Shape.Fill" />
            </Trigger>
            <Trigger Trigger.Property="UIElement.IsEnabled"
                     Trigger.Value="False">
              <Setter Setter.TargetName="Arrow"
                      Setter.Property="UIElement.Visibility"
                      Setter.Value="Collapsed" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="{x:Type DataGrid}"
         Style.TargetType="{x:Type DataGrid}">
    <Setter Setter.Property="Control.Background"
            Setter.Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
    <Setter Setter.Property="Control.Foreground"
            Setter.Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
    <Setter Setter.Property="Control.BorderBrush"
            Setter.Value="#FF688CAF" />
    <Setter Setter.Property="Control.BorderThickness"
            Setter.Value="1" />
    <Setter Setter.Property="DataGrid.RowDetailsVisibilityMode"
            Setter.Value="VisibleWhenSelected" />
    <Setter Setter.Property="ScrollViewer.CanContentScroll"
            Setter.Value="True" />
    <Setter Setter.Property="ScrollViewer.PanningMode"
            Setter.Value="Both" />
    <Setter Setter.Property="Stylus.IsFlicksEnabled"
            Setter.Value="False" />
    <Setter Setter.Property="Control.Template">
      <Setter.Value>
        <ControlTemplate ControlTemplate.TargetType="{x:Type DataGrid}">
          <Border Border.Background="{TemplateBinding Control.Background}"
                  Border.BorderBrush="{TemplateBinding Control.BorderBrush}"
                  Border.BorderThickness="{TemplateBinding Control.BorderThickness}"
                  UIElement.SnapsToDevicePixels="True"
                  Border.Padding="{TemplateBinding Control.Padding}">
            <Grid>
              <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="*" />
              </Grid.RowDefinitions>
              <ProgressBar Height="8"
                           Orientation="Horizontal"
                           Visibility="{Binding Path=(utl:CollectionViewBehavior.ShowProgressBar), 
                              RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=DataGrid},
                              Converter={StaticResource BooleanToVisibilityConverter}}"
                           Maximum="{Binding Path=(utl:CollectionViewBehavior.ProgressBarMaximum), 
                              RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=DataGrid}}"
                           Value="{Binding Path=(utl:CollectionViewBehavior.ProgressBarValue), 
                              RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=DataGrid}}"
                           />
              <ScrollViewer x:Name="DG_ScrollViewer"
                            Grid.Row="1"
                            UIElement.Focusable="False">
                <Control.Template>
                  <ControlTemplate ControlTemplate.TargetType="{x:Type ScrollViewer}">
                    <Grid>
                      <Grid.RowDefinitions>
                        <RowDefinition RowDefinition.Height="Auto" />
                        <RowDefinition RowDefinition.Height="*" />
                        <RowDefinition RowDefinition.Height="Auto" />
                      </Grid.RowDefinitions>
                      <Grid.ColumnDefinitions>
                        <ColumnDefinition ColumnDefinition.Width="Auto" />
                        <ColumnDefinition ColumnDefinition.Width="*" />
                        <ColumnDefinition ColumnDefinition.Width="Auto" />
                      </Grid.ColumnDefinitions>
                      <Button ButtonBase.Command="{x:Static DataGrid.SelectAllCommand}"
                              UIElement.Focusable="False"
                              FrameworkElement.Width="{Binding RelativeSource={RelativeSource AncestorType={x:Type DataGrid}},Path=CellsPanelHorizontalOffset}"
                              FrameworkElement.Style="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type DataGrid},ResourceId=DataGridSelectAllButtonStyle}}"
                              UIElement.Visibility="{Binding RelativeSource={RelativeSource AncestorType={x:Type DataGrid}},Path=HeadersVisibility,Converter={x:Static DataGrid.HeadersVisibilityConverter},ConverterParameter={x:Static DataGridHeadersVisibility.All}}" />
                      <DataGridColumnHeadersPresenter FrameworkElement.Name="PART_ColumnHeadersPresenter"
                                                      Grid.Column="1"
                                                      UIElement.Visibility="{Binding RelativeSource={RelativeSource AncestorType={x:Type DataGrid}},Path=HeadersVisibility,Converter={x:Static DataGrid.HeadersVisibilityConverter},ConverterParameter={x:Static DataGridHeadersVisibility.Column}}" />
                      <ScrollContentPresenter ScrollContentPresenter.Name="PART_ScrollContentPresenter"
                                              Grid.Row="1"
                                              Grid.ColumnSpan="2"
                                              ScrollContentPresenter.CanContentScroll="{TemplateBinding ScrollViewer.CanContentScroll}" />
                      <ScrollBar FrameworkElement.Name="PART_VerticalScrollBar"
                                 Grid.Row="1"
                                 Grid.Column="2"
                                 ScrollBar.Orientation="Vertical"
                                 RangeBase.Maximum="{TemplateBinding ScrollViewer.ScrollableHeight}"
                                 ScrollBar.ViewportSize="{TemplateBinding ScrollViewer.ViewportHeight}"
                                 UIElement.Visibility="{TemplateBinding ScrollViewer.ComputedVerticalScrollBarVisibility}"
                                 RangeBase.Value="{Binding Path=VerticalOffset,RelativeSource={RelativeSource TemplatedParent},Mode=OneWay}" />
                      <Grid Grid.Row="2"
                            Grid.Column="1">
                        <Grid.ColumnDefinitions>
                          <ColumnDefinition ColumnDefinition.Width="{Binding RelativeSource={RelativeSource AncestorType={x:Type DataGrid}},Path=NonFrozenColumnsViewportHorizontalOffset}" />
                          <ColumnDefinition ColumnDefinition.Width="*" />
                        </Grid.ColumnDefinitions>
                        <ScrollBar FrameworkElement.Name="PART_HorizontalScrollBar"
                                   Grid.Column="1"
                                   ScrollBar.Orientation="Horizontal"
                                   RangeBase.Maximum="{TemplateBinding ScrollViewer.ScrollableWidth}"
                                   ScrollBar.ViewportSize="{TemplateBinding ScrollViewer.ViewportWidth}"
                                   UIElement.Visibility="{TemplateBinding ScrollViewer.ComputedHorizontalScrollBarVisibility}"
                                   RangeBase.Value="{Binding Path=HorizontalOffset,RelativeSource={RelativeSource TemplatedParent},Mode=OneWay}" />
                      </Grid>
                    </Grid>
                  </ControlTemplate>
                </Control.Template>
                <ItemsPresenter UIElement.SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" />
              </ScrollViewer>
            </Grid>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Condition.Property="ItemsControl.IsGrouping"
                     Condition.Value="True" />
          <Condition Condition.Property="VirtualizingPanel.IsVirtualizingWhenGrouping"
                     Condition.Value="False" />
        </MultiTrigger.Conditions>
        <Setter Setter.Property="ScrollViewer.CanContentScroll"
                Setter.Value="False" />
      </MultiTrigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="{x:Type DataGridColumnHeadersPresenter}"
         Style.TargetType="{x:Type DataGridColumnHeadersPresenter}">
    <Setter Setter.Property="Control.Template">
      <Setter.Value>
        <ControlTemplate ControlTemplate.TargetType="{x:Type DataGridColumnHeadersPresenter}">
          <Grid>
            <DataGridColumnHeader FrameworkElement.Name="PART_FillerColumnHeader"
                                  UIElement.IsHitTestVisible="False" />
            <ItemsPresenter />
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="ThumbStyleWE"
         Style.TargetType="{x:Type Thumb}">
    <Setter Setter.Property="FrameworkElement.Width"
            Setter.Value="8" />
    <Setter Setter.Property="Control.Background"
            Setter.Value="#00FFFFFF" />
    <Setter Setter.Property="FrameworkElement.Cursor"
            Setter.Value="SizeWE" />
    <Setter Setter.Property="Control.Template">
      <Setter.Value>
        <ControlTemplate ControlTemplate.TargetType="{x:Type Thumb}">
          <Border Border.Padding="{TemplateBinding Control.Padding}"
                  Border.Background="{TemplateBinding Control.Background}" />
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="ThumbStyleNS"
         Style.TargetType="{x:Type Thumb}">
    <Setter Setter.Property="FrameworkElement.Height"
            Setter.Value="8" />
    <Setter Setter.Property="Control.Background"
            Setter.Value="#00FFFFFF" />
    <Setter Setter.Property="FrameworkElement.Cursor"
            Setter.Value="SizeNS" />
    <Setter Setter.Property="Control.Template">
      <Setter.Value>
        <ControlTemplate ControlTemplate.TargetType="{x:Type Thumb}">
          <Border Border.Padding="{TemplateBinding Control.Padding}"
                  Border.Background="{TemplateBinding Control.Background}" />
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="{x:Static DataGridColumnHeader.ColumnFloatingHeaderStyleKey}"
         Style.TargetType="{x:Type Control}">
    <Setter Setter.Property="UIElement.Opacity"
            Setter.Value="0.6" />
    <Setter Setter.Property="Control.BorderBrush"
            Setter.Value="#FF688CAF" />
    <Setter Setter.Property="Control.BorderThickness"
            Setter.Value="1" />
    <Setter Setter.Property="Control.Template">
      <Setter.Value>
        <ControlTemplate ControlTemplate.TargetType="{x:Type Control}">
          <Border Border.BorderThickness="{TemplateBinding Control.BorderThickness}"
                  Border.BorderBrush="{TemplateBinding Control.BorderBrush}"
                  Border.Padding="{TemplateBinding Control.Padding}"
                  Border.Background="{TemplateBinding Control.Background}">
            <Grid>
              <Canvas FrameworkElement.Name="PART_VisualBrushCanvas"
                      FrameworkElement.Margin="{TemplateBinding FrameworkElement.Margin}" />
            </Grid>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="{x:Static DataGridColumnHeader.ColumnHeaderDropSeparatorStyleKey}"
         Style.TargetType="{x:Type Separator}">
    <Setter Setter.Property="Control.Background"
            Setter.Value="#FF000080" />
    <Setter Setter.Property="Control.Template">
      <Setter.Value>
        <ControlTemplate ControlTemplate.TargetType="{x:Type Separator}">
          <Border Border.Background="{TemplateBinding Control.Background}"
                  Border.BorderBrush="{TemplateBinding Control.BorderBrush}"
                  Border.BorderThickness="{TemplateBinding Control.BorderThickness}"
                  UIElement.SnapsToDevicePixels="True" />
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="{x:Type DataGridRow}"
         Style.TargetType="{x:Type DataGridRow}">
    <Setter Setter.Property="Control.Background"
            Setter.Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}" />
    <Setter Setter.Property="UIElement.SnapsToDevicePixels"
            Setter.Value="True" />
    <Setter Setter.Property="Validation.ErrorTemplate"
            Setter.Value="{x:Null}" />
    <Setter Setter.Property="DataGridRow.ValidationErrorTemplate">
      <Setter.Value>
        <ControlTemplate>
          <TextBlock FrameworkElement.Margin="2,0,0,0"
                     FrameworkElement.VerticalAlignment="Center"
                     TextBlock.Foreground="#FFFF0000"
                     TextBlock.Text="!" />
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Setter.Property="Control.Template">
      <Setter.Value>
        <ControlTemplate ControlTemplate.TargetType="{x:Type DataGridRow}">
          <Border Border.Name="DGR_Border"
                  Border.Background="{TemplateBinding Control.Background}"
                  Border.BorderBrush="{TemplateBinding Control.BorderBrush}"
                  Border.BorderThickness="{TemplateBinding Control.BorderThickness}"
                  UIElement.SnapsToDevicePixels="True">
            <SelectiveScrollingGrid>
              <Grid.ColumnDefinitions>
                <ColumnDefinition ColumnDefinition.Width="Auto" />
                <ColumnDefinition ColumnDefinition.Width="*" />
              </Grid.ColumnDefinitions>
              <Grid.RowDefinitions>
                <RowDefinition RowDefinition.Height="*" />
                <RowDefinition RowDefinition.Height="Auto" />
              </Grid.RowDefinitions>
              <DataGridCellsPresenter Grid.Column="1"
                                      ItemsControl.ItemsPanel="{TemplateBinding DataGridRow.ItemsPanel}"
                                      UIElement.SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" />
              <DataGridDetailsPresenter Grid.Column="1"
                                        Grid.Row="1"
                                        UIElement.Visibility="{TemplateBinding DataGridRow.DetailsVisibility}"
                                        SelectiveScrollingGrid.SelectiveScrollingOrientation="{Binding RelativeSource={RelativeSource AncestorType={x:Type DataGrid}},Path=AreRowDetailsFrozen,Converter={x:Static DataGrid.RowDetailsScrollingConverter},ConverterParameter={x:Static SelectiveScrollingOrientation.Vertical}}" />
              <DataGridRowHeader SelectiveScrollingGrid.SelectiveScrollingOrientation="Vertical"
                                 Grid.RowSpan="2"
                                 UIElement.Visibility="{Binding RelativeSource={RelativeSource AncestorType={x:Type DataGrid}},Path=HeadersVisibility,Converter={x:Static DataGrid.HeadersVisibilityConverter},ConverterParameter={x:Static DataGridHeadersVisibility.Row}}" />
            </SelectiveScrollingGrid>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger Trigger.Property="DataGridRow.IsNewItem"
               Trigger.Value="True">
        <Setter Setter.Property="FrameworkElement.Margin"
                Setter.Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type DataGrid}},Path=NewItemMargin}" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="{x:Type DataGridCellsPresenter}"
         Style.TargetType="{x:Type DataGridCellsPresenter}">
    <Setter Setter.Property="Control.Template">
      <Setter.Value>
        <ControlTemplate ControlTemplate.TargetType="{x:Type DataGridCellsPresenter}">
          <ItemsPresenter />
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <SolidColorBrush x:Key="{x:Static DataGrid.FocusBorderBrushKey}"
                   SolidColorBrush.Color="#FF000000" />
  <Thickness x:Key="ì">1.5</Thickness>
  <Style x:Key="{x:Type DataGridCell}"
         Style.TargetType="{x:Type DataGridCell}">
    <Setter Setter.Property="Control.Background"
            Setter.Value="#00FFFFFF" />
    <Setter Setter.Property="Control.BorderBrush"
            Setter.Value="#00FFFFFF" />
    <Setter Setter.Property="Control.BorderThickness"
            Setter.Value="1" />
    <Setter Setter.Property="Control.Template">
      <Setter.Value>
        <ControlTemplate ControlTemplate.TargetType="{x:Type DataGridCell}">
          <Border FrameworkElement.Name="Bd"
                  Border.Background="{TemplateBinding Control.Background}"
                  Border.BorderBrush="{TemplateBinding Control.BorderBrush}"
                  Border.BorderThickness="{TemplateBinding Control.BorderThickness}"
                  UIElement.SnapsToDevicePixels="True">
            <ContentPresenter UIElement.SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" />
          </Border>
          <ControlTemplate.Triggers>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <!--<Condition Condition.Binding="{Binding Path=(base:AccessibilitySwitches.UseNetFx472CompatibleAccessibilityFeatures)}" Condition.Value="false" />-->
                <Condition Condition.Binding="{Binding Path=(SystemParameters.HighContrast)}"
                           Condition.Value="true" />
                <Condition Condition.Binding="{Binding Path=IsKeyboardFocused,RelativeSource={RelativeSource Self}}"
                           Condition.Value="true" />
              </MultiDataTrigger.Conditions>
              <Setter Setter.TargetName="Bd"
                      Setter.Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"
                      Setter.Property="Border.BorderBrush" />
              <Setter Setter.TargetName="Bd"
                      Setter.Value="{StaticResource ì}"
                      Setter.Property="Border.BorderThickness" />
            </MultiDataTrigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger Trigger.Property="DataGridCell.IsSelected"
               Trigger.Value="True">
        <Setter Setter.Property="Control.Background"
                Setter.Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
        <Setter Setter.Property="Control.Foreground"
                Setter.Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
        <Setter Setter.Property="Control.BorderBrush"
                Setter.Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
      </Trigger>
      <Trigger Trigger.Property="UIElement.IsKeyboardFocusWithin"
               Trigger.Value="True">
        <Setter Setter.Property="Control.BorderBrush"
                Setter.Value="{DynamicResource FocusBorderBrushKey}" />
      </Trigger>
      <!--<EventTrigger RoutedEvent="MouseDown">
        <BeginStoryboard>
          <Storyboard>
            <BooleanAnimationUsingKeyFrames Storyboard.TargetProperty="IsEditing">
              <DiscreteBooleanKeyFrame Value="True"
                                       KeyTime="0:0:0" />
            </BooleanAnimationUsingKeyFrames>
          </Storyboard>
        </BeginStoryboard>
      </EventTrigger>-->
      <!--<Trigger Property="IsMouseOver"
               Value="True">
        <Setter Property="IsEditing"
                Value="True" />
      </Trigger>-->
      <!--<Trigger Property="IsMouseOver"
               Value="false">
        <Setter Property="IsEditing"
                Value="False" />
      </Trigger>-->
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Condition.Property="DataGridCell.IsSelected"
                     Condition.Value="True" />
          <Condition Condition.Property="Selector.IsSelectionActive"
                     Condition.Value="False" />
        </MultiTrigger.Conditions>
        <Setter Setter.Property="Control.Background"
                Setter.Value="{DynamicResource InternalSystemColorsExtendedStart}" />
        <Setter Setter.Property="Control.BorderBrush"
                Setter.Value="{DynamicResource InternalSystemColorsExtendedStart}" />
        <Setter Setter.Property="Control.Foreground"
                Setter.Value="{DynamicResource {x:Static  SystemColors.InactiveSelectionHighlightBrush}}" />
      </MultiTrigger>
      <Trigger Trigger.Property="UIElement.IsEnabled"
               Trigger.Value="False">
        <Setter Setter.Property="Control.Foreground"
                Setter.Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
      </Trigger>
      <MultiDataTrigger>
        <MultiDataTrigger.Conditions>
          <!--<Condition Condition.Binding="{Binding Path=(base:AccessibilitySwitches.UseNetFx47CompatibleAccessibilityFeatures)}" Condition.Value="false" />-->
          <Condition Condition.Binding="{Binding Path=(SystemParameters.HighContrast)}"
                     Condition.Value="true" />
        </MultiDataTrigger.Conditions>
        <Setter Setter.Property="FrameworkElement.FocusVisualStyle"
                Setter.Value="{StaticResource è}" />
      </MultiDataTrigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="{x:Static DataGridComboBoxColumn.TextBlockComboBoxStyleKey}"
         Style.TargetType="{x:Type ComboBox}">
    <Setter Setter.Property="Control.Template">
      <Setter.Value>
        <ControlTemplate ControlTemplate.TargetType="{x:Type ComboBox}">
          <ContentPresenter FrameworkElement.Margin="1,1,1,1"
                            ContentPresenter.Content="{TemplateBinding ComboBox.SelectionBoxItem}"
                            ContentPresenter.ContentTemplate="{TemplateBinding ComboBox.SelectionBoxItemTemplate}"
                            ContentPresenter.ContentTemplateSelector="{TemplateBinding ItemsControl.ItemTemplateSelector}"
                            ContentPresenter.ContentStringFormat="{TemplateBinding ComboBox.SelectionBoxItemStringFormat}"
                            FrameworkElement.VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                            FrameworkElement.HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                            UIElement.SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"
                            UIElement.IsHitTestVisible="False" />
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="{x:Type DataGridColumnHeader}"
         Style.TargetType="{x:Type DataGridColumnHeader}">
    <Setter Setter.Property="Control.VerticalContentAlignment"
            Setter.Value="Center" />
    <Setter Setter.Property="Control.Template">
      <Setter.Value>
        <ControlTemplate ControlTemplate.TargetType="{x:Type DataGridColumnHeader}">
          <Grid>
            <theme:DataGridHeaderBorder SortDirection="{TemplateBinding DataGridColumnHeader.SortDirection}"
                                        IsHovered="{TemplateBinding UIElement.IsMouseOver}"
                                        IsPressed="{TemplateBinding ButtonBase.IsPressed}"
                                        IsClickable="{TemplateBinding DataGridColumnHeader.CanUserSort}"
                                        Background="{TemplateBinding Control.Background}"
                                        BorderBrush="{TemplateBinding Control.BorderBrush}"
                                        BorderThickness="{TemplateBinding Control.BorderThickness}"
                                        Padding="{TemplateBinding Control.Padding}"
                                        SeparatorVisibility="{TemplateBinding DataGridColumnHeader.SeparatorVisibility}"
                                        SeparatorBrush="{TemplateBinding DataGridColumnHeader.SeparatorBrush}">
              <Grid>
                <Grid.ColumnDefinitions>
                  <ColumnDefinition Width="*" />
                  <ColumnDefinition Width="Auto" />
                  <ColumnDefinition Width="Auto" />
                </Grid.ColumnDefinitions>
                <ContentPresenter UIElement.SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"
                                  FrameworkElement.VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                                  FrameworkElement.HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                                  ToolTip="{Binding Path=Column.(utl:CollectionViewBehavior.HeaderTooltip),
                                       RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=DataGridColumnHeader} }"
                                  ContentPresenter.RecognizesAccessKey="True" />

                <Button x:Name="FilterButton"
                        Grid.Column="2"
                        HorizontalAlignment="Right"
                        VerticalAlignment="Center"
                        Background="Transparent"
                        BorderBrush="Transparent"
                        Visibility="{Binding Path=Column.(utl:CollectionViewBehavior.ShowFilterButton),
                        RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=DataGridColumnHeader},
                        Converter={StaticResource BooleanToVisibilityConverter}}">
                  <Button.Style>
                    <Style TargetType="{x:Type Button}">
                      <EventSetter Event="Click"
                                   Handler="FilterButton_Click" />
                    </Style>
                  </Button.Style>
                  <Image>
                    <Image.Style>
                      <Style TargetType="{x:Type Image}">
                        <Style.Triggers>
                          <DataTrigger Binding="{Binding Path=Column.(utl:CollectionViewBehavior.FilterButtonShape),
                              RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=DataGridColumnHeader} }"
                                       Value="Empty">
                            <Setter Property="Source"
                                    Value="pack://application:,,,/Qhta.WPF.Utils;component/Resources/EmptyFilter.png" />
                          </DataTrigger>
                          <DataTrigger Binding="{Binding Path=Column.(utl:CollectionViewBehavior.FilterButtonShape),
                              RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=DataGridColumnHeader}
                            }"
                                       Value="Filled">
                            <Setter Property="Source"
                                    Value="pack://application:,,,/Qhta.WPF.Utils;component/Resources/Filter.png" />
                          </DataTrigger>
                          <DataTrigger Binding="{Binding Path=Column.(utl:CollectionViewBehavior.FilterButtonShape),
                              RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=DataGridColumnHeader}
                            }"
                                       Value="{x:Null}">
                            <Setter Property="Source"
                                    Value="pack://application:,,,/Qhta.WPF.Utils;component/Resources/EmptyFilter.png" />
                          </DataTrigger>
                        </Style.Triggers>
                      </Style>
                    </Image.Style>
                  </Image>
                </Button>

              </Grid>
            </theme:DataGridHeaderBorder>
            <Thumb Thumb.Name="PART_LeftHeaderGripper"
                   FrameworkElement.HorizontalAlignment="Left"
                   FrameworkElement.Style="{StaticResource ThumbStyleWE}" />
            <Thumb Thumb.Name="PART_RightHeaderGripper"
                   FrameworkElement.HorizontalAlignment="Right"
                   FrameworkElement.Style="{StaticResource ThumbStyleWE}" />
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="{x:Type DataGridRowHeader}"
         Style.TargetType="{x:Type DataGridRowHeader}">
    <Setter Setter.Property="Control.Template">
      <Setter.Value>
        <ControlTemplate ControlTemplate.TargetType="{x:Type DataGridRowHeader}">
          <Grid>
            <theme:DataGridHeaderBorder IsSelected="{TemplateBinding DataGridRowHeader.IsRowSelected}"
                                        IsHovered="{TemplateBinding UIElement.IsMouseOver}"
                                        IsPressed="{TemplateBinding ButtonBase.IsPressed}"
                                        Background="{TemplateBinding Control.Background}"
                                        BorderBrush="{TemplateBinding Control.BorderBrush}"
                                        BorderThickness="{TemplateBinding Control.BorderThickness}"
                                        Padding="{TemplateBinding Control.Padding}"
                                        Orientation="Horizontal"
                                        SeparatorVisibility="{TemplateBinding DataGridRowHeader.SeparatorVisibility}"
                                        SeparatorBrush="{TemplateBinding DataGridRowHeader.SeparatorBrush}">
              <StackPanel StackPanel.Orientation="Horizontal">
                <ContentPresenter UIElement.SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"
                                  FrameworkElement.VerticalAlignment="Center"
                                  ContentPresenter.RecognizesAccessKey="True" />
                <Control UIElement.SnapsToDevicePixels="False"
                         UIElement.Visibility="{Binding RelativeSource={RelativeSource AncestorType={x:Type DataGridRow}},Path=(Validation.HasError),Converter={StaticResource BooleanToVisibilityConverter}}"
                         Control.Template="{Binding RelativeSource={RelativeSource AncestorType={x:Type DataGridRow}},Path=ValidationErrorTemplate}" />
              </StackPanel>
            </theme:DataGridHeaderBorder>
            <Thumb Thumb.Name="PART_TopHeaderGripper"
                   FrameworkElement.VerticalAlignment="Top"
                   FrameworkElement.Style="{StaticResource ThumbStyleNS}" />
            <Thumb Thumb.Name="PART_BottomHeaderGripper"
                   FrameworkElement.VerticalAlignment="Bottom"
                   FrameworkElement.Style="{StaticResource ThumbStyleNS}" />
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
</ResourceDictionary>
  
  