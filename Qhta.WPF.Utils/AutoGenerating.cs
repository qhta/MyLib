namespace Qhta.WPF.Utils;

/// <summary>
/// Utility class that helps to autogenerate <see cref="DataGridContentBoundColumn"/>
/// </summary>
public static class AutoGenerating
{
  /// <summary>
  /// Creates <see cref="DataGridContentBoundColumn"/> for ItemsSource thas have DataGridColumnAttribute (defined in Qhta.MVVM)
  /// 
  /// </summary>
  /// <param name="sender"></param>
  /// <param name="args"></param>
  public static void UseDataGridColumnAttribute(object sender, DataGridAutoGeneratingColumnEventArgs args)
  {
    var dataGrid = sender as DataGrid;
    if (dataGrid != null)
    {
      var items = dataGrid.ItemsSource;
      if (items != null)
      {
        var itemsType = items.GetType() ?? typeof(object);
        if (itemsType.IsEnumerable(out var itemType))
        {
          var prop = itemType.GetProperty(args.PropertyName);
          if (prop != null)
          {
            var dataGridColumnAttr = prop.GetCustomAttribute<DataGridColumnAttribute>();
            if (dataGridColumnAttr != null && dataGridColumnAttr.IsAutoGenerated && args.Column is DataGridBoundColumn oldColumn)
            {
              var dataGridColumnDef = new DataGridColumnDef(oldColumn.Binding)
              {
                CanUserReorder = dataGridColumnAttr.CanUserReorder,
                CanUserResize = dataGridColumnAttr.CanUserResize,
                CanUserSort = dataGridColumnAttr.CanUserSort,
                ClipboardContentPath = dataGridColumnAttr.ClipboardContentPath,
                DisplayIndex = dataGridColumnAttr.DisplayIndex,
                Header = dataGridColumnAttr.Header ?? oldColumn.Header,
                HeaderStringFormat = dataGridColumnAttr.HeaderStringFormat ?? oldColumn.HeaderStringFormat,
                HeaderTemplate = args.Column.HeaderTemplate,
                IsReadOnly = dataGridColumnAttr.IsReadOnly,
                MaxWidth = dataGridColumnAttr.MaxWidth,
                MinWidth = dataGridColumnAttr.MinWidth,
                SortDirection = dataGridColumnAttr.SortDirection,
                SortMemberPath = dataGridColumnAttr.SortMemberPath,
                Visibility = (Visibility)dataGridColumnAttr.Visibility,
                Width = dataGridColumnAttr.Width,
              };
              if (dataGridColumnAttr.HeaderTemplateResourceKey != null)
              {
                dataGridColumnDef.HeaderTemplate = (DataTemplate)dataGrid.FindResource(dataGridColumnAttr.HeaderTemplateResourceKey);
                dataGridColumnDef.Header = null;
              }
              else if (dataGridColumnAttr.HeaderResourceKey != null)
              {
                var headerControl = new TextBlock();
                headerControl.Text = GetResourceString(dataGridColumnAttr.HeaderResourceKey);
                if (dataGridColumnAttr.HeaderTooltipResourceKey != null)
                  headerControl.ToolTip = GetResourceString(dataGridColumnAttr.HeaderTooltipResourceKey);
                else if (dataGridColumnAttr.HeaderTooltip != null)
                  headerControl.ToolTip = dataGridColumnAttr.HeaderTooltip;
                dataGridColumnDef.Header = headerControl;
              }
              else if (dataGridColumnAttr.HeaderTooltipResourceKey != null)
              {
                var headerControl = new ContentControl();
                headerControl.Content = dataGridColumnDef.Header;
                if (dataGridColumnAttr.HeaderTooltipResourceKey != null)
                  headerControl.ToolTip = GetResourceString(dataGridColumnAttr.HeaderTooltipResourceKey);
                else if (dataGridColumnAttr.HeaderTooltip != null)
                  headerControl.ToolTip = dataGridColumnAttr.HeaderTooltip;
                dataGridColumnDef.Header = headerControl;
              }
              else if (dataGridColumnAttr.HeaderTooltip != null)
              {
                var headerControl = new ContentControl();
                headerControl.Content = dataGridColumnDef.Header;
                headerControl.ToolTip = dataGridColumnAttr.HeaderTooltip;
                dataGridColumnDef.Header = headerControl;
              }

              if (itemsType is IFiltered)
                dataGridColumnDef.HeaderContextMenu = CreateHeaderContextMenu();

              DataTemplate? dataTemplate = null;
              if (dataGridColumnAttr.DataTemplateResourceKey != null)
                dataTemplate = (DataTemplate)dataGrid.FindResource(dataGridColumnAttr.DataTemplateResourceKey);
              DataTemplate? dataEditingTemplate = null;
              if (dataGridColumnAttr.DataEditingTemplateResourceKey != null)
                dataEditingTemplate = (DataTemplate)dataGrid.FindResource(dataGridColumnAttr.DataEditingTemplateResourceKey);
              if (dataTemplate != null)
                args.Column = CreateColumn(dataGridColumnDef, dataTemplate, dataEditingTemplate);
              else
                FormatColumn(oldColumn, dataGridColumnDef);
            }
            else
              args.Cancel = true;
          }
        }
      }
    }
  }

  private static string? GetResourceString(string staticResourceKey)
  {
    var k = staticResourceKey.LastIndexOf('.');
    if (k < 0)
      throw new InvalidOperationException($"HeaderResourceKey must be in the format \"typename.propName\"");
    var fullClassName = staticResourceKey.Substring(0, k);
    var className = fullClassName;
    var propName = staticResourceKey.Substring(k + 1);
    Assembly assembly;
    k = className.LastIndexOf('.');
    if (k > 0)
    {
      var ns = className.Substring(0, k);
      className = className.Substring(k + 1);
      assembly = Assembly.Load(ns);
    }
    else
      assembly = Assembly.GetEntryAssembly() ?? Assembly.GetExecutingAssembly();

    var ResourceManager = new global::System.Resources.ResourceManager(fullClassName, assembly);
    var resourceCulture = System.Globalization.CultureInfo.CurrentUICulture;
    var str = ResourceManager.GetString(propName, resourceCulture);
    return str;
  }

  private static BindingBase CreateStaticResourceBinding(string staticResourceKey)
  {
    var k = staticResourceKey.LastIndexOf('.');
    if (k < 0)
      throw new InvalidOperationException($"HeaderResourceKey must be in the format \"typename.propName\"");
    var className = staticResourceKey.Substring(0, k);
    var propName = staticResourceKey.Substring(k + 1);
    Assembly assembly;
    k = className.LastIndexOf('.');
    if (k > 0)
    {
      var ns = className.Substring(0, k);
      className = className.Substring(k + 1);
      assembly = Assembly.Load(ns);
    }
    else
      assembly = Assembly.GetEntryAssembly() ?? Assembly.GetExecutingAssembly();
    var staticResourceClass = assembly.GetType(className);
    if (staticResourceClass == null)
      throw new InvalidOperationException($"Type {className} not found");
    var staticResourceProperty = staticResourceClass.GetProperty(propName, BindingFlags.Public | BindingFlags.Static);
    if (staticResourceProperty == null)
      throw new InvalidOperationException($"Property {propName} in type {className} not found");
    var binding = new Binding()
    {
      Source = staticResourceClass,
      Path = new PropertyPath(staticResourceProperty),
    };
    return binding;
  }

  private static DataTemplate CreateTemplate(Type viewModelType, Type viewType)
  {
    const string xamlTemplate = "<DataTemplate DataType=\"{{x:Type vm:{0}}}\"><v:{1} /></DataTemplate>";
    var xaml = String.Format(xamlTemplate, viewModelType.Name, viewType.Name, viewModelType.Namespace, viewType.Namespace);

    var context = new ParserContext();

    context.XamlTypeMapper = new XamlTypeMapper(new string[0]);
    context.XamlTypeMapper.AddMappingProcessingInstruction("vm", viewModelType.Namespace, viewModelType.Assembly.FullName);
    context.XamlTypeMapper.AddMappingProcessingInstruction("v", viewType.Namespace, viewType.Assembly.FullName);

    context.XmlnsDictionary.Add("", "http://schemas.microsoft.com/winfx/2006/xaml/presentation");
    context.XmlnsDictionary.Add("x", "http://schemas.microsoft.com/winfx/2006/xaml");
    context.XmlnsDictionary.Add("vm", "vm");
    context.XmlnsDictionary.Add("v", "v");

    var template = (DataTemplate)XamlReader.Parse(xaml, context);
    return template;
  }

  private static ContextMenu CreateHeaderContextMenu()
  {    
    var contextMenu = new ContextMenu();
    return contextMenu;
  }
  private static DataGridContentBoundColumn CreateColumn(DataGridColumnDef dataGridColumnData, DataTemplate contentTemplate,
    DataTemplate? contentEditingTemplate = null)
  {
    var newColumn = new DataGridContentBoundColumn();
    var aBinding = dataGridColumnData.Binding as Binding;
    newColumn.Binding = dataGridColumnData.Binding;
    newColumn.ContentTemplate = contentTemplate;
    if (contentEditingTemplate != null)
      newColumn.ContentEditingTemplate = contentEditingTemplate;
    newColumn.Header = dataGridColumnData.Header;
    newColumn.SortMemberPath = dataGridColumnData.SortMemberPath;
    newColumn.ClipboardContentBinding =
        new Binding
        {
          Source = aBinding?.Source,
          Path = new PropertyPath(dataGridColumnData.ClipboardContentPath),
        };
    newColumn.CopyingCellClipboardContent += Col_CopyingCellClipboardContent;
    return newColumn;
  }

  private static void FormatColumn(DataGridColumn column, DataGridColumnDef dataGridColumnDef)
  {
    if (dataGridColumnDef.HeaderTemplate != null)
      column.HeaderTemplate = dataGridColumnDef.HeaderTemplate;
    else if (dataGridColumnDef.Header != null)
      column.Header = dataGridColumnDef.Header;
    if (dataGridColumnDef.HeaderStringFormat != null)
      column.HeaderStringFormat = dataGridColumnDef.HeaderStringFormat;
    var b = dataGridColumnDef.IsReadOnly;
    if (b == true)
      column.IsReadOnly = (bool)b;
    column.MaxWidth = dataGridColumnDef.MaxWidth;
    column.MinWidth = dataGridColumnDef.MinWidth;
    var d = dataGridColumnDef.Width;
    if (!double.IsNaN(d))
      column.Width = (double)d;
    column.CanUserReorder = dataGridColumnDef.CanUserReorder;
    column.CanUserResize = dataGridColumnDef.CanUserResize;
    column.CanUserSort = dataGridColumnDef.CanUserSort;
    column.SortMemberPath = dataGridColumnDef.SortMemberPath;
    column.SortDirection = dataGridColumnDef.SortDirection;
    var s = dataGridColumnDef.ClipboardContentPath;
    if (s != null)
      column.ClipboardContentBinding = new Binding(s);
    var n = dataGridColumnDef.DisplayIndex;
    if (n >= 0)
      column.DisplayIndex = n;
    n = (int)Convert.ChangeType(dataGridColumnDef.Visibility, typeof(int));
    column.Visibility = (System.Windows.Visibility)Enum.ToObject(typeof(System.Windows.Visibility), n);
  }

  private static void Col_CopyingCellClipboardContent(object? sender, DataGridCellClipboardEventArgs e)
  {
    var column = sender as DataGridContentBoundColumn;
    if (column != null)
    {
      var obj = e.Item;
      if (obj != null)
      {
        var binding = (column.ClipboardContentBinding as Binding);
        if (binding != null)
        {
          string boundProperty = binding.Path.Path;
          object? value = GetPropertyWithPath(obj, boundProperty);
          if (value != null)
          {
            var propertyValue = value.ToString();
            e.Content = propertyValue;
          }
        }
      }
    }
  }

  private static object? GetPropertyWithPath(object obj, string aPath)
  {
    var k = aPath.IndexOf(".");
    if (k > 0)
    {
      var propName = aPath.Substring(0, k);
      aPath = aPath.Substring(k + 1);
      PropertyInfo? pi = obj.GetType().GetProperty(propName);
      if (pi != null)
      {
        object? value = pi.GetValue(obj);
        if (value != null)
        {
          var propertyValue = GetPropertyWithPath(value, aPath);
          return propertyValue;
        }
      }
    }
    else
    {
      PropertyInfo? pi = obj.GetType().GetProperty(aPath);
      if (pi != null)
      {
        object? value = pi.GetValue(obj);
        if (value != null)
        {
          var propertyValue = value.ToString();
          return propertyValue;
        }
      }
    }
    return null;
  }
}

