@page "/register"
@using System.ComponentModel.DataAnnotations
@inject HttpClient Http

<PageTitle>Register</PageTitle>

<h3>Register</h3>

<EditForm Model="registrationModel" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label for="username" class="form-label">Username</label>
        <InputText id="username" class="form-control" @bind-Value="registrationModel.Username" />
        <ValidationMessage For="@(() => registrationModel.Username)" />
    </div>

    <div class="mb-3">
        <label for="email" class="form-label">Email</label>
        <InputText id="email" class="form-control" @bind-Value="registrationModel.Email" />
        <ValidationMessage For="@(() => registrationModel.Email)" />
    </div>

    <div class="mb-3">
        <label for="password" class="form-label">Password</label>
        <InputText id="password" type="password" class="form-control" @bind-Value="registrationModel.Password" />
        <ValidationMessage For="@(() => registrationModel.Password)" />
    </div>

    <button type="submit" class="btn btn-primary">Register</button>
</EditForm>

@if (isSuccess)
{
    <p class="text-success">Registration successful!</p>
}
else if (!string.IsNullOrEmpty(errorMessage))
{
    <p class="text-danger">@errorMessage</p>
}

@code {
    private RegistrationModel registrationModel = new();
    private bool isSuccess = false;
    private string? errorMessage;

    private async Task HandleValidSubmit()
    {
        try
        {
            var response = await Http.PostAsJsonAsync("api/register", registrationModel);
            if (response.IsSuccessStatusCode)
            {
                isSuccess = true;
                errorMessage = null;
            }
            else
            {
                isSuccess = false;
                errorMessage = "Registration failed. Please try again.";
            }
        }
        catch (Exception ex)
        {
            isSuccess = false;
            errorMessage = $"An error occurred: {ex.Message}";
        }
    }

    public class RegistrationModel
    {
        [Required]
        [StringLength(50, MinimumLength = 3, ErrorMessage = "Username must be between 3 and 50 characters.")]
        public string Username { get; set; } = string.Empty;

        [Required]
        [EmailAddress(ErrorMessage = "Invalid email address.")]
        public string Email { get; set; } = string.Empty;

        [Required]
        [StringLength(100, MinimumLength = 6, ErrorMessage = "Password must be at least 6 characters long.")]
        public string Password { get; set; } = string.Empty;
    }
}