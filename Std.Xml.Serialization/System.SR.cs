// <auto-generated>
using System.Reflection;

namespace FxResources.System.Private.Xml
{
  internal static class SR { }
}
namespace System
{
  internal static partial class SR
  {
    private static global::System.Resources.ResourceManager s_resourceManager;
    internal static global::System.Resources.ResourceManager ResourceManager => s_resourceManager ?? (s_resourceManager = new global::System.Resources.ResourceManager(typeof(FxResources.System.Private.Xml.SR)));

    /// <summary>{0}</summary>
    internal static string @Xml_UserException => GetResourceString("Xml_UserException");
    /// <summary>An XML error has occurred.</summary>
    internal static string @Xml_DefaultException => GetResourceString("Xml_DefaultException");
    /// <summary>Operation is not valid due to the current state of the object.</summary>
    internal static string @Xml_InvalidOperation => GetResourceString("Xml_InvalidOperation");
    /// <summary>An error occurred at {0}, ({1}, {2}).</summary>
    internal static string @Xml_ErrorFilePosition => GetResourceString("Xml_ErrorFilePosition");
    /// <summary>Stack overflow.</summary>
    internal static string @Xml_StackOverflow => GetResourceString("Xml_StackOverflow");
    /// <summary>No stylesheet was loaded.</summary>
    internal static string @Xslt_NoStylesheetLoaded => GetResourceString("Xslt_NoStylesheetLoaded");
    /// <summary>Type '{0}' is not a compiled stylesheet class.</summary>
    internal static string @Xslt_NotCompiledStylesheet => GetResourceString("Xslt_NotCompiledStylesheet");
    /// <summary>Executing a stylesheet that was compiled using a later version of the framework is not supported. Stylesheet Version: {0}. Current Framework Version: {1}.</summary>
    internal static string @Xslt_IncompatibleCompiledStylesheetVersion => GetResourceString("Xslt_IncompatibleCompiledStylesheetVersion");
    /// <summary>An asynchronous operation is already in progress.</summary>
    internal static string @Xml_AsyncIsRunningException => GetResourceString("Xml_AsyncIsRunningException");
    /// <summary>Set XmlReaderSettings.Async to true if you want to use Async Methods.</summary>
    internal static string @Xml_ReaderAsyncNotSetException => GetResourceString("Xml_ReaderAsyncNotSetException");
    /// <summary>There is an unclosed literal string.</summary>
    internal static string @Xml_UnclosedQuote => GetResourceString("Xml_UnclosedQuote");
    /// <summary>Unexpected end of file while parsing {0} has occurred.</summary>
    internal static string @Xml_UnexpectedEOF => GetResourceString("Xml_UnexpectedEOF");
    /// <summary>Unexpected end of file has occurred.</summary>
    internal static string @Xml_UnexpectedEOF1 => GetResourceString("Xml_UnexpectedEOF1");
    /// <summary>Unexpected end of file has occurred. The following elements are not closed: {0}</summary>
    internal static string @Xml_UnexpectedEOFInElementContent => GetResourceString("Xml_UnexpectedEOFInElementContent");
    /// <summary>Name cannot begin with the '{0}' character, hexadecimal value {1}.</summary>
    internal static string @Xml_BadStartNameChar => GetResourceString("Xml_BadStartNameChar");
    /// <summary>The '{0}' character, hexadecimal value {1}, cannot be included in a name.</summary>
    internal static string @Xml_BadNameChar => GetResourceString("Xml_BadNameChar");
    /// <summary>Invalid syntax for a decimal numeric entity reference.</summary>
    internal static string @Xml_BadDecimalEntity => GetResourceString("Xml_BadDecimalEntity");
    /// <summary>Invalid syntax for a hexadecimal numeric entity reference.</summary>
    internal static string @Xml_BadHexEntity => GetResourceString("Xml_BadHexEntity");
    /// <summary>There is no Unicode byte order mark. Cannot switch to Unicode.</summary>
    internal static string @Xml_MissingByteOrderMark => GetResourceString("Xml_MissingByteOrderMark");
    /// <summary>System does not support '{0}' encoding.</summary>
    internal static string @Xml_UnknownEncoding => GetResourceString("Xml_UnknownEncoding");
    /// <summary>An internal error has occurred.</summary>
    internal static string @Xml_InternalError => GetResourceString("Xml_InternalError");
    /// <summary>Invalid character in the given encoding.</summary>
    internal static string @Xml_InvalidCharInThisEncoding => GetResourceString("Xml_InvalidCharInThisEncoding");
    /// <summary>Line {0}, position {1}.</summary>
    internal static string @Xml_ErrorPosition => GetResourceString("Xml_ErrorPosition");
    /// <summary>{0} Line {1}, position {2}.</summary>
    internal static string @Xml_MessageWithErrorPosition => GetResourceString("Xml_MessageWithErrorPosition");
    /// <summary>'{0}' is an unexpected token. The expected token is '{1}'.</summary>
    internal static string @Xml_UnexpectedTokenEx => GetResourceString("Xml_UnexpectedTokenEx");
    /// <summary>'{0}' is an unexpected token. The expected token is '{1}' or '{2}'.</summary>
    internal static string @Xml_UnexpectedTokens2 => GetResourceString("Xml_UnexpectedTokens2");
    /// <summary>'{0}' is an unexpected token. Expecting whitespace.</summary>
    internal static string @Xml_ExpectingWhiteSpace => GetResourceString("Xml_ExpectingWhiteSpace");
    /// <summary>The '{0}' start tag on line {1} position {2} does not match the end tag of '{3}'.</summary>
    internal static string @Xml_TagMismatchEx => GetResourceString("Xml_TagMismatchEx");
    /// <summary>Unexpected end tag.</summary>
    internal static string @Xml_UnexpectedEndTag => GetResourceString("Xml_UnexpectedEndTag");
    /// <summary>'{0}' is an undeclared prefix.</summary>
    internal static string @Xml_UnknownNs => GetResourceString("Xml_UnknownNs");
    /// <summary>'{0}', hexadecimal value {1}, is an invalid attribute character.</summary>
    internal static string @Xml_BadAttributeChar => GetResourceString("Xml_BadAttributeChar");
    /// <summary>Expecting external ID, '[' or '&gt;'.</summary>
    internal static string @Xml_ExpectExternalOrClose => GetResourceString("Xml_ExpectExternalOrClose");
    /// <summary>Root element is missing.</summary>
    internal static string @Xml_MissingRoot => GetResourceString("Xml_MissingRoot");
    /// <summary>There are multiple root elements.</summary>
    internal static string @Xml_MultipleRoots => GetResourceString("Xml_MultipleRoots");
    /// <summary>Data at the root level is invalid.</summary>
    internal static string @Xml_InvalidRootData => GetResourceString("Xml_InvalidRootData");
    /// <summary>Unexpected XML declaration. The XML declaration must be the first node in the document, and no whitespace characters are allowed to appear before it.</summary>
    internal static string @Xml_XmlDeclNotFirst => GetResourceString("Xml_XmlDeclNotFirst");
    /// <summary>Syntax for an XML declaration is invalid.</summary>
    internal static string @Xml_InvalidXmlDecl => GetResourceString("Xml_InvalidXmlDecl");
    /// <summary>'{0}' is an invalid XmlNodeType.</summary>
    internal static string @Xml_InvalidNodeType => GetResourceString("Xml_InvalidNodeType");
    /// <summary>'{0}' is an invalid name for processing instructions.</summary>
    internal static string @Xml_InvalidPIName => GetResourceString("Xml_InvalidPIName");
    /// <summary>'{0}' is an invalid xml:space value.</summary>
    internal static string @Xml_InvalidXmlSpace => GetResourceString("Xml_InvalidXmlSpace");
    /// <summary>Version number '{0}' is invalid.</summary>
    internal static string @Xml_InvalidVersionNumber => GetResourceString("Xml_InvalidVersionNumber");
    /// <summary>'{0}' is a duplicate attribute name.</summary>
    internal static string @Xml_DupAttributeName => GetResourceString("Xml_DupAttributeName");
    /// <summary>Unexpected DTD declaration.</summary>
    internal static string @Xml_BadDTDLocation => GetResourceString("Xml_BadDTDLocation");
    /// <summary>Element '{0}' was not found.</summary>
    internal static string @Xml_ElementNotFound => GetResourceString("Xml_ElementNotFound");
    /// <summary>Element '{0}' with namespace name '{1}' was not found.</summary>
    internal static string @Xml_ElementNotFoundNs => GetResourceString("Xml_ElementNotFoundNs");
    /// <summary>XmlNodeType {0} is not supported for partial content parsing.</summary>
    internal static string @Xml_PartialContentNodeTypeNotSupportedEx => GetResourceString("Xml_PartialContentNodeTypeNotSupportedEx");
    /// <summary>Cannot have multiple DTDs.</summary>
    internal static string @Xml_MultipleDTDsProvided => GetResourceString("Xml_MultipleDTDsProvided");
    /// <summary>Cannot bind to the reserved namespace.</summary>
    internal static string @Xml_CanNotBindToReservedNamespace => GetResourceString("Xml_CanNotBindToReservedNamespace");
    /// <summary>'{0}', hexadecimal value {1}, is an invalid character.</summary>
    internal static string @Xml_InvalidCharacter => GetResourceString("Xml_InvalidCharacter");
    /// <summary>'{0}' is not a valid BinHex text sequence.</summary>
    internal static string @Xml_InvalidBinHexValue => GetResourceString("Xml_InvalidBinHexValue");
    /// <summary>'{0}' is not a valid BinHex text sequence. The sequence must contain an even number of characters.</summary>
    internal static string @Xml_InvalidBinHexValueOddCount => GetResourceString("Xml_InvalidBinHexValueOddCount");
    /// <summary>Invalid text declaration.</summary>
    internal static string @Xml_InvalidTextDecl => GetResourceString("Xml_InvalidTextDecl");
    /// <summary>'{0}' is not a valid Base64 text sequence.</summary>
    internal static string @Xml_InvalidBase64Value => GetResourceString("Xml_InvalidBase64Value");
    /// <summary>Reference to undeclared entity '{0}'.</summary>
    internal static string @Xml_UndeclaredEntity => GetResourceString("Xml_UndeclaredEntity");
    /// <summary>Parameter entity '{0}' references itself.</summary>
    internal static string @Xml_RecursiveParEntity => GetResourceString("Xml_RecursiveParEntity");
    /// <summary>General entity '{0}' references itself.</summary>
    internal static string @Xml_RecursiveGenEntity => GetResourceString("Xml_RecursiveGenEntity");
    /// <summary>External entity '{0}' reference cannot appear in the attribute value.</summary>
    internal static string @Xml_ExternalEntityInAttValue => GetResourceString("Xml_ExternalEntityInAttValue");
    /// <summary>Reference to unparsed entity '{0}'.</summary>
    internal static string @Xml_UnparsedEntityRef => GetResourceString("Xml_UnparsedEntityRef");
    /// <summary>Not the same name table.</summary>
    internal static string @Xml_NotSameNametable => GetResourceString("Xml_NotSameNametable");
    /// <summary>XmlReaderSettings.XmlNameTable must be the same name table as in XmlParserContext.NameTable or XmlParserContext.NamespaceManager.NameTable, or it must be null.</summary>
    internal static string @Xml_NametableMismatch => GetResourceString("Xml_NametableMismatch");
    /// <summary>Invalid namespace declaration.</summary>
    internal static string @Xml_BadNamespaceDecl => GetResourceString("Xml_BadNamespaceDecl");
    /// <summary>An error occurred while parsing EntityName.</summary>
    internal static string @Xml_ErrorParsingEntityName => GetResourceString("Xml_ErrorParsingEntityName");
    /// <summary>Invalid NmToken value '{0}'.</summary>
    internal static string @Xml_InvalidNmToken => GetResourceString("Xml_InvalidNmToken");
    /// <summary>Entity replacement text must nest properly within markup declarations.</summary>
    internal static string @Xml_EntityRefNesting => GetResourceString("Xml_EntityRefNesting");
    /// <summary>Cannot resolve entity reference '{0}'.</summary>
    internal static string @Xml_CannotResolveEntity => GetResourceString("Xml_CannotResolveEntity");
    /// <summary>Cannot resolve entity reference '{0}' because the DTD has been ignored. To enable DTD processing set the DtdProcessing property on XmlReaderSettings to Parse and pass the settings into XmlReader.Create method.</summary>
    internal static string @Xml_CannotResolveEntityDtdIgnored => GetResourceString("Xml_CannotResolveEntityDtdIgnored");
    /// <summary>Cannot resolve external DTD subset - public ID = '{0}', system ID = '{1}'.</summary>
    internal static string @Xml_CannotResolveExternalSubset => GetResourceString("Xml_CannotResolveExternalSubset");
    /// <summary>Cannot resolve '{0}'.</summary>
    internal static string @Xml_CannotResolveUrl => GetResourceString("Xml_CannotResolveUrl");
    /// <summary>']]&gt;' is not allowed in character data.</summary>
    internal static string @Xml_CDATAEndInText => GetResourceString("Xml_CDATAEndInText");
    /// <summary>Standalone document declaration must have a value of 'no' because an external entity '{0}' is referenced.</summary>
    internal static string @Xml_ExternalEntityInStandAloneDocument => GetResourceString("Xml_ExternalEntityInStandAloneDocument");
    /// <summary>DTD must be defined before the document root element.</summary>
    internal static string @Xml_DtdAfterRootElement => GetResourceString("Xml_DtdAfterRootElement");
    /// <summary>The '{0}' property is read only and cannot be set.</summary>
    internal static string @Xml_ReadOnlyProperty => GetResourceString("Xml_ReadOnlyProperty");
    /// <summary>DTD is prohibited in this XML document.</summary>
    internal static string @Xml_DtdIsProhibited => GetResourceString("Xml_DtdIsProhibited");
    /// <summary>For security reasons DTD is prohibited in this XML document. To enable DTD processing set the DtdProcessing property on XmlReaderSettings to Parse and pass the settings into XmlReader.Create method.</summary>
    internal static string @Xml_DtdIsProhibitedEx => GetResourceString("Xml_DtdIsProhibitedEx");
    /// <summary>ReadSubtree() can be called only if the reader is on an element node.</summary>
    internal static string @Xml_ReadSubtreeNotOnElement => GetResourceString("Xml_ReadSubtreeNotOnElement");
    /// <summary>DTD is not allowed in XML fragments.</summary>
    internal static string @Xml_DtdNotAllowedInFragment => GetResourceString("Xml_DtdNotAllowedInFragment");
    /// <summary>WriteStartDocument cannot be called on writers created with ConformanceLevel.Fragment.</summary>
    internal static string @Xml_CannotStartDocumentOnFragment => GetResourceString("Xml_CannotStartDocumentOnFragment");
    /// <summary>An error has occurred while opening external DTD '{0}': {1}</summary>
    internal static string @Xml_ErrorOpeningExternalDtd => GetResourceString("Xml_ErrorOpeningExternalDtd");
    /// <summary>An error has occurred while opening external entity '{0}': {1}</summary>
    internal static string @Xml_ErrorOpeningExternalEntity => GetResourceString("Xml_ErrorOpeningExternalEntity");
    /// <summary>{0} method is not supported on this XmlReader. Use CanReadBinaryContent property to find out if a reader implements it.</summary>
    internal static string @Xml_ReadBinaryContentNotSupported => GetResourceString("Xml_ReadBinaryContentNotSupported");
    /// <summary>ReadValueChunk method is not supported on this XmlReader. Use CanReadValueChunk property to find out if an XmlReader implements it.</summary>
    internal static string @Xml_ReadValueChunkNotSupported => GetResourceString("Xml_ReadValueChunkNotSupported");
    /// <summary>The {0} method is not supported on node type {1}. If you want to read typed content of an element, use the ReadElementContentAs method.</summary>
    internal static string @Xml_InvalidReadContentAs => GetResourceString("Xml_InvalidReadContentAs");
    /// <summary>The {0} method is not supported on node type {1}.</summary>
    internal static string @Xml_InvalidReadElementContentAs => GetResourceString("Xml_InvalidReadElementContentAs");
    /// <summary>ReadElementContentAs() methods cannot be called on an element that has child elements.</summary>
    internal static string @Xml_MixedReadElementContentAs => GetResourceString("Xml_MixedReadElementContentAs");
    /// <summary>ReadValueChunk calls cannot be mixed with ReadContentAsBase64 or ReadContentAsBinHex.</summary>
    internal static string @Xml_MixingReadValueChunkWithBinary => GetResourceString("Xml_MixingReadValueChunkWithBinary");
    /// <summary>ReadContentAsBase64 and ReadContentAsBinHex method calls cannot be mixed with calls to ReadElementContentAsBase64 and ReadElementContentAsBinHex.</summary>
    internal static string @Xml_MixingBinaryContentMethods => GetResourceString("Xml_MixingBinaryContentMethods");
    /// <summary>ReadContentAsBase64 and ReadContentAsBinHex method calls cannot be mixed with calls to ReadChars, ReadBase64, and ReadBinHex.</summary>
    internal static string @Xml_MixingV1StreamingWithV2Binary => GetResourceString("Xml_MixingV1StreamingWithV2Binary");
    /// <summary>The ReadValueAsChunk method is not supported on node type {0}.</summary>
    internal static string @Xml_InvalidReadValueChunk => GetResourceString("Xml_InvalidReadValueChunk");
    /// <summary>Content cannot be converted to the type {0}.</summary>
    internal static string @Xml_ReadContentAsFormatException => GetResourceString("Xml_ReadContentAsFormatException");
    /// <summary>BaseUri must be specified either as an argument of XmlReader.Create or on the XmlParserContext. If it is specified on both, it must be the same base URI.</summary>
    internal static string @Xml_DoubleBaseUri => GetResourceString("Xml_DoubleBaseUri");
    /// <summary>The buffer is not large enough to fit a surrogate pair. Please provide a buffer of size at least 2 characters.</summary>
    internal static string @Xml_NotEnoughSpaceForSurrogatePair => GetResourceString("Xml_NotEnoughSpaceForSurrogatePair");
    /// <summary>The URL cannot be empty.</summary>
    internal static string @Xml_EmptyUrl => GetResourceString("Xml_EmptyUrl");
    /// <summary>Unexpected node type {0}. {1} method can only be called on elements with simple or empty content.</summary>
    internal static string @Xml_UnexpectedNodeInSimpleContent => GetResourceString("Xml_UnexpectedNodeInSimpleContent");
    /// <summary>The Whitespace or SignificantWhitespace node can contain only XML whitespace characters. '{0}' is not an XML white space character.</summary>
    internal static string @Xml_InvalidWhitespaceCharacter => GetResourceString("Xml_InvalidWhitespaceCharacter");
    /// <summary>Cannot change conformance checking to {0}. Make sure the ConformanceLevel in XmlReaderSettings is set to Auto for wrapping scenarios.</summary>
    internal static string @Xml_IncompatibleConformanceLevel => GetResourceString("Xml_IncompatibleConformanceLevel");
    /// <summary>The input document has exceeded a limit set by {0}.</summary>
    internal static string @Xml_LimitExceeded => GetResourceString("Xml_LimitExceeded");
    /// <summary>The XmlReader is closed or in error state.</summary>
    internal static string @Xml_ClosedOrErrorReader => GetResourceString("Xml_ClosedOrErrorReader");
    /// <summary>Invalid value of a character entity reference.</summary>
    internal static string @Xml_CharEntityOverflow => GetResourceString("Xml_CharEntityOverflow");
    /// <summary>The '{0}' character, hexadecimal value {1}, at position {2} within the name, cannot be included in a name.</summary>
    internal static string @Xml_BadNameCharWithPos => GetResourceString("Xml_BadNameCharWithPos");
    /// <summary>The 'xmlns' attribute is bound to the reserved namespace 'http://www.w3.org/2000/xmlns/'.</summary>
    internal static string @Xml_XmlnsBelongsToReservedNs => GetResourceString("Xml_XmlnsBelongsToReservedNs");
    /// <summary>Reference to undeclared parameter entity '{0}'.</summary>
    internal static string @Xml_UndeclaredParEntity => GetResourceString("Xml_UndeclaredParEntity");
    /// <summary>Invalid XML document. {0}</summary>
    internal static string @Xml_InvalidXmlDocument => GetResourceString("Xml_InvalidXmlDocument");
    /// <summary>No DTD found.</summary>
    internal static string @Xml_NoDTDPresent => GetResourceString("Xml_NoDTDPresent");
    /// <summary>Unsupported combination of validation types.</summary>
    internal static string @Xml_MultipleValidaitonTypes => GetResourceString("Xml_MultipleValidaitonTypes");
    /// <summary>No validation occurred.</summary>
    internal static string @Xml_NoValidation => GetResourceString("Xml_NoValidation");
    /// <summary>Expected WhitespaceHandling.None, or WhitespaceHandling.All, or WhitespaceHandling.Significant.</summary>
    internal static string @Xml_WhitespaceHandling => GetResourceString("Xml_WhitespaceHandling");
    /// <summary>Cannot call ResetState when parsing an XML fragment.</summary>
    internal static string @Xml_InvalidResetStateCall => GetResourceString("Xml_InvalidResetStateCall");
    /// <summary>Expected EntityHandling.ExpandEntities or EntityHandling.ExpandCharEntities.</summary>
    internal static string @Xml_EntityHandling => GetResourceString("Xml_EntityHandling");
    /// <summary>'{0}' is a duplicate enumeration value.</summary>
    internal static string @Xml_AttlistDuplEnumValue => GetResourceString("Xml_AttlistDuplEnumValue");
    /// <summary>'{0}' is a duplicate notation value.</summary>
    internal static string @Xml_AttlistDuplNotationValue => GetResourceString("Xml_AttlistDuplNotationValue");
    /// <summary>'{0}' is an invalid value for the 'encoding' attribute. The encoding cannot be switched after a call to ResetState.</summary>
    internal static string @Xml_EncodingSwitchAfterResetState => GetResourceString("Xml_EncodingSwitchAfterResetState");
    /// <summary>Unexpected XmlNodeType: '{0}'.</summary>
    internal static string @Xml_UnexpectedNodeType => GetResourceString("Xml_UnexpectedNodeType");
    /// <summary>A conditional section is not allowed in an internal subset.</summary>
    internal static string @Xml_InvalidConditionalSection => GetResourceString("Xml_InvalidConditionalSection");
    /// <summary>']]&gt;' is not expected.</summary>
    internal static string @Xml_UnexpectedCDataEnd => GetResourceString("Xml_UnexpectedCDataEnd");
    /// <summary>There is an unclosed conditional section.</summary>
    internal static string @Xml_UnclosedConditionalSection => GetResourceString("Xml_UnclosedConditionalSection");
    /// <summary>Expected DTD markup was not found.</summary>
    internal static string @Xml_ExpectDtdMarkup => GetResourceString("Xml_ExpectDtdMarkup");
    /// <summary>Incomplete DTD content.</summary>
    internal static string @Xml_IncompleteDtdContent => GetResourceString("Xml_IncompleteDtdContent");
    /// <summary>Enumeration data type required.</summary>
    internal static string @Xml_EnumerationRequired => GetResourceString("Xml_EnumerationRequired");
    /// <summary>Invalid content model.</summary>
    internal static string @Xml_InvalidContentModel => GetResourceString("Xml_InvalidContentModel");
    /// <summary>Fragment identifier '{0}' cannot be part of the system identifier '{1}'.</summary>
    internal static string @Xml_FragmentId => GetResourceString("Xml_FragmentId");
    /// <summary>Expecting 'PCDATA'.</summary>
    internal static string @Xml_ExpectPcData => GetResourceString("Xml_ExpectPcData");
    /// <summary>Whitespace not allowed before '?', '*', or '+'.</summary>
    internal static string @Xml_ExpectNoWhitespace => GetResourceString("Xml_ExpectNoWhitespace");
    /// <summary>Expecting '?', '*', or '+'.</summary>
    internal static string @Xml_ExpectOp => GetResourceString("Xml_ExpectOp");
    /// <summary>'{0}' is an invalid attribute type.</summary>
    internal static string @Xml_InvalidAttributeType => GetResourceString("Xml_InvalidAttributeType");
    /// <summary>Invalid attribute type.</summary>
    internal static string @Xml_InvalidAttributeType1 => GetResourceString("Xml_InvalidAttributeType1");
    /// <summary>Expecting an attribute type.</summary>
    internal static string @Xml_ExpectAttType => GetResourceString("Xml_ExpectAttType");
    /// <summary>'{0}' is an unqualified name and cannot contain the character ':'.</summary>
    internal static string @Xml_ColonInLocalName => GetResourceString("Xml_ColonInLocalName");
    /// <summary>A parameter entity reference is not allowed in internal markup.</summary>
    internal static string @Xml_InvalidParEntityRef => GetResourceString("Xml_InvalidParEntityRef");
    /// <summary>Expecting an internal subset or the end of the DOCTYPE declaration.</summary>
    internal static string @Xml_ExpectSubOrClose => GetResourceString("Xml_ExpectSubOrClose");
    /// <summary>Expecting a system identifier or a public identifier.</summary>
    internal static string @Xml_ExpectExternalOrPublicId => GetResourceString("Xml_ExpectExternalOrPublicId");
    /// <summary>Expecting an external identifier or an entity value.</summary>
    internal static string @Xml_ExpectExternalIdOrEntityValue => GetResourceString("Xml_ExpectExternalIdOrEntityValue");
    /// <summary>Conditional sections must specify the keyword 'IGNORE' or 'INCLUDE'.</summary>
    internal static string @Xml_ExpectIgnoreOrInclude => GetResourceString("Xml_ExpectIgnoreOrInclude");
    /// <summary>Object type is not supported.</summary>
    internal static string @Xml_UnsupportedClass => GetResourceString("Xml_UnsupportedClass");
    /// <summary>Resolving of external URIs was prohibited.</summary>
    internal static string @Xml_NullResolver => GetResourceString("Xml_NullResolver");
    /// <summary>Relative URIs are not supported.</summary>
    internal static string @Xml_RelativeUriNotSupported => GetResourceString("Xml_RelativeUriNotSupported");
    /// <summary>Set XmlWriterSettings.Async to true if you want to use Async Methods.</summary>
    internal static string @Xml_WriterAsyncNotSetException => GetResourceString("Xml_WriterAsyncNotSetException");
    /// <summary>Cannot use a prefix with an empty namespace.</summary>
    internal static string @Xml_PrefixForEmptyNs => GetResourceString("Xml_PrefixForEmptyNs");
    /// <summary>An XML comment cannot contain '--', and '-' cannot be the last character.</summary>
    internal static string @Xml_InvalidCommentChars => GetResourceString("Xml_InvalidCommentChars");
    /// <summary>The '{0}' namespace is not defined.</summary>
    internal static string @Xml_UndefNamespace => GetResourceString("Xml_UndefNamespace");
    /// <summary>The empty string '' is not a valid name.</summary>
    internal static string @Xml_EmptyName => GetResourceString("Xml_EmptyName");
    /// <summary>The empty string '' is not a valid local name.</summary>
    internal static string @Xml_EmptyLocalName => GetResourceString("Xml_EmptyLocalName");
    /// <summary>Invalid name character in '{0}'. The '{1}' character, hexadecimal value {2}, cannot be included in a name.</summary>
    internal static string @Xml_InvalidNameCharsDetail => GetResourceString("Xml_InvalidNameCharsDetail");
    /// <summary>There was no XML start tag open.</summary>
    internal static string @Xml_NoStartTag => GetResourceString("Xml_NoStartTag");
    /// <summary>The Writer is closed or in error state.</summary>
    internal static string @Xml_ClosedOrError => GetResourceString("Xml_ClosedOrError");
    /// <summary>Token {0} in state {1} would result in an invalid XML document.</summary>
    internal static string @Xml_WrongToken => GetResourceString("Xml_WrongToken");
    /// <summary>Prefix "xml" is reserved for use by XML and can be mapped only to namespace name "http://www.w3.org/XML/1998/namespace".</summary>
    internal static string @Xml_XmlPrefix => GetResourceString("Xml_XmlPrefix");
    /// <summary>Prefix "xmlns" is reserved for use by XML.</summary>
    internal static string @Xml_XmlnsPrefix => GetResourceString("Xml_XmlnsPrefix");
    /// <summary>Prefix '{0}' cannot be mapped to namespace name reserved for "xml" or "xmlns".</summary>
    internal static string @Xml_NamespaceDeclXmlXmlns => GetResourceString("Xml_NamespaceDeclXmlXmlns");
    /// <summary>Only whitespace characters should be used.</summary>
    internal static string @Xml_NonWhitespace => GetResourceString("Xml_NonWhitespace");
    /// <summary>Cannot write XML declaration. WriteStartDocument method has already written it.</summary>
    internal static string @Xml_DupXmlDecl => GetResourceString("Xml_DupXmlDecl");
    /// <summary>Cannot write XML declaration. XML declaration can be only at the beginning of the document.</summary>
    internal static string @Xml_CannotWriteXmlDecl => GetResourceString("Xml_CannotWriteXmlDecl");
    /// <summary>Document does not have a root element.</summary>
    internal static string @Xml_NoRoot => GetResourceString("Xml_NoRoot");
    /// <summary>The current position on the Reader is neither an element nor an attribute.</summary>
    internal static string @Xml_InvalidPosition => GetResourceString("Xml_InvalidPosition");
    /// <summary>Incomplete entity contents.</summary>
    internal static string @Xml_IncompleteEntity => GetResourceString("Xml_IncompleteEntity");
    /// <summary>Invalid high surrogate character (0x{0}). A high surrogate character must have a value from range (0xD800 - 0xDBFF).</summary>
    internal static string @Xml_InvalidSurrogateHighChar => GetResourceString("Xml_InvalidSurrogateHighChar");
    /// <summary>The surrogate pair is invalid. Missing a low surrogate character.</summary>
    internal static string @Xml_InvalidSurrogateMissingLowChar => GetResourceString("Xml_InvalidSurrogateMissingLowChar");
    /// <summary>The surrogate pair (0x{0}, 0x{1}) is invalid. A high surrogate character (0xD800 - 0xDBFF) must always be paired with a low surrogate character (0xDC00 - 0xDFFF).</summary>
    internal static string @Xml_InvalidSurrogatePairWithArgs => GetResourceString("Xml_InvalidSurrogatePairWithArgs");
    /// <summary>The prefix '{0}' cannot be redefined from '{1}' to '{2}' within the same start element tag.</summary>
    internal static string @Xml_RedefinePrefix => GetResourceString("Xml_RedefinePrefix");
    /// <summary>The DTD has already been written out.</summary>
    internal static string @Xml_DtdAlreadyWritten => GetResourceString("Xml_DtdAlreadyWritten");
    /// <summary>XmlWriterSettings.{0} can contain only valid XML text content characters when XmlWriterSettings.CheckCharacters is true. {1}</summary>
    internal static string @Xml_InvalidCharsInIndent => GetResourceString("Xml_InvalidCharsInIndent");
    /// <summary>XmlWriterSettings.{0} can contain only valid XML whitespace characters when XmlWriterSettings.CheckCharacters and XmlWriterSettings.NewLineOnAttributes are true.</summary>
    internal static string @Xml_IndentCharsNotWhitespace => GetResourceString("Xml_IndentCharsNotWhitespace");
    /// <summary>Make sure that the ConformanceLevel setting is set to ConformanceLevel.Fragment or ConformanceLevel.Auto if you want to write an XML fragment.</summary>
    internal static string @Xml_ConformanceLevelFragment => GetResourceString("Xml_ConformanceLevelFragment");
    /// <summary>Invalid XML attribute quote character. Valid attribute quote characters are ' and ".</summary>
    internal static string @Xml_InvalidQuote => GetResourceString("Xml_InvalidQuote");
    /// <summary>An undefined prefix is in use.</summary>
    internal static string @Xml_UndefPrefix => GetResourceString("Xml_UndefPrefix");
    /// <summary>Cannot set the namespace if Namespaces is 'false'.</summary>
    internal static string @Xml_NoNamespaces => GetResourceString("Xml_NoNamespaces");
    /// <summary>Cannot have ']]&gt;' inside an XML CDATA block.</summary>
    internal static string @Xml_InvalidCDataChars => GetResourceString("Xml_InvalidCDataChars");
    /// <summary>WriteStartDocument needs to be the first call.</summary>
    internal static string @Xml_NotTheFirst => GetResourceString("Xml_NotTheFirst");
    /// <summary>Cannot have '?&gt;' inside an XML processing instruction.</summary>
    internal static string @Xml_InvalidPiChars => GetResourceString("Xml_InvalidPiChars");
    /// <summary>Invalid name character in '{0}'.</summary>
    internal static string @Xml_InvalidNameChars => GetResourceString("Xml_InvalidNameChars");
    /// <summary>The Writer is closed.</summary>
    internal static string @Xml_Closed => GetResourceString("Xml_Closed");
    /// <summary>Prefixes beginning with "xml" (regardless of whether the characters are uppercase, lowercase, or some combination thereof) are reserved for use by XML.</summary>
    internal static string @Xml_InvalidPrefix => GetResourceString("Xml_InvalidPrefix");
    /// <summary>Indentation value must be greater than 0.</summary>
    internal static string @Xml_InvalidIndentation => GetResourceString("Xml_InvalidIndentation");
    /// <summary>NotInWriteState.</summary>
    internal static string @Xml_NotInWriteState => GetResourceString("Xml_NotInWriteState");
    /// <summary>The second character surrogate pair is not in the input buffer to be written.</summary>
    internal static string @Xml_SurrogatePairSplit => GetResourceString("Xml_SurrogatePairSplit");
    /// <summary>Document cannot have multiple document elements.</summary>
    internal static string @Xml_NoMultipleRoots => GetResourceString("Xml_NoMultipleRoots");
    /// <summary>A node of type '{0}' cannot have the name '{1}'.</summary>
    internal static string @XmlBadName => GetResourceString("XmlBadName");
    /// <summary>A node of type '{0}' cannot have a name.</summary>
    internal static string @XmlNoNameAllowed => GetResourceString("XmlNoNameAllowed");
    /// <summary>The string was not recognized as a valid Uri.</summary>
    internal static string @XmlConvert_BadUri => GetResourceString("XmlConvert_BadUri");
    /// <summary>The string '{0}' is not a valid {1} value.</summary>
    internal static string @XmlConvert_BadFormat => GetResourceString("XmlConvert_BadFormat");
    /// <summary>Value '{0}' was either too large or too small for {1}.</summary>
    internal static string @XmlConvert_Overflow => GetResourceString("XmlConvert_Overflow");
    /// <summary>Xml type '{0}' does not support Clr type '{1}'.</summary>
    internal static string @XmlConvert_TypeBadMapping => GetResourceString("XmlConvert_TypeBadMapping");
    /// <summary>Xml type '{0}' does not support a conversion from Clr type '{1}' to Clr type '{2}'.</summary>
    internal static string @XmlConvert_TypeBadMapping2 => GetResourceString("XmlConvert_TypeBadMapping2");
    /// <summary>Xml type 'List of {0}' does not support Clr type '{1}'.</summary>
    internal static string @XmlConvert_TypeListBadMapping => GetResourceString("XmlConvert_TypeListBadMapping");
    /// <summary>Xml type 'List of {0}' does not support a conversion from Clr type '{1}' to Clr type '{2}'.</summary>
    internal static string @XmlConvert_TypeListBadMapping2 => GetResourceString("XmlConvert_TypeListBadMapping2");
    /// <summary>Xml type '{0}' cannot convert from Clr type '{1}' unless the destination type is String or XmlAtomicValue.</summary>
    internal static string @XmlConvert_TypeToString => GetResourceString("XmlConvert_TypeToString");
    /// <summary>Xml type '{0}' cannot convert to Clr type '{1}' unless the source value is a String or an XmlAtomicValue.</summary>
    internal static string @XmlConvert_TypeFromString => GetResourceString("XmlConvert_TypeFromString");
    /// <summary>The QName '{0}' cannot be represented as a String.  A prefix for namespace '{1}' cannot be found.</summary>
    internal static string @XmlConvert_TypeNoPrefix => GetResourceString("XmlConvert_TypeNoPrefix");
    /// <summary>The String '{0}' cannot be represented as an XmlQualifiedName.  A namespace for prefix '{1}' cannot be found.</summary>
    internal static string @XmlConvert_TypeNoNamespace => GetResourceString("XmlConvert_TypeNoNamespace");
    /// <summary>String must be exactly one character long.</summary>
    internal static string @XmlConvert_NotOneCharString => GetResourceString("XmlConvert_NotOneCharString");
    /// <summary>The parameter entity replacement text must nest properly within markup declarations.</summary>
    internal static string @Sch_ParEntityRefNesting => GetResourceString("Sch_ParEntityRefNesting");
    /// <summary>line-feed (#xA) or tab (#x9) characters, leading or trailing spaces and sequences of one or more spaces (#x20) are not allowed in 'xs:token'.</summary>
    internal static string @Sch_NotTokenString => GetResourceString("Sch_NotTokenString");
    /// <summary>The '{0}' value for the 'dateTimeOption' parameter is not an allowed value for the 'XmlDateTimeSerializationMode' enumeration.</summary>
    internal static string @Sch_InvalidDateTimeOption => GetResourceString("Sch_InvalidDateTimeOption");
    /// <summary>StandAlone is 'yes' and the value of the attribute '{0}' contains a definition in an external document that changes on normalization.</summary>
    internal static string @Sch_StandAloneNormalization => GetResourceString("Sch_StandAloneNormalization");
    /// <summary>Markup for unspecified default attribute '{0}' is external and standalone='yes'.</summary>
    internal static string @Sch_UnSpecifiedDefaultAttributeInExternalStandalone => GetResourceString("Sch_UnSpecifiedDefaultAttributeInExternalStandalone");
    /// <summary>A schema error occurred.</summary>
    internal static string @Sch_DefaultException => GetResourceString("Sch_DefaultException");
    /// <summary>The '{0}' element has already been declared.</summary>
    internal static string @Sch_DupElementDecl => GetResourceString("Sch_DupElementDecl");
    /// <summary>The attribute of type ID is already declared on the '{0}' element.</summary>
    internal static string @Sch_IdAttrDeclared => GetResourceString("Sch_IdAttrDeclared");
    /// <summary>Root element name must match the DocType name.</summary>
    internal static string @Sch_RootMatchDocType => GetResourceString("Sch_RootMatchDocType");
    /// <summary>'{0}' is already used as an ID.</summary>
    internal static string @Sch_DupId => GetResourceString("Sch_DupId");
    /// <summary>The '{0}' element is not declared.</summary>
    internal static string @Sch_UndeclaredElement => GetResourceString("Sch_UndeclaredElement");
    /// <summary>The '{0}' attribute is not declared.</summary>
    internal static string @Sch_UndeclaredAttribute => GetResourceString("Sch_UndeclaredAttribute");
    /// <summary>The '{0}' notation is not declared.</summary>
    internal static string @Sch_UndeclaredNotation => GetResourceString("Sch_UndeclaredNotation");
    /// <summary>Reference to undeclared ID is '{0}'.</summary>
    internal static string @Sch_UndeclaredId => GetResourceString("Sch_UndeclaredId");
    /// <summary>Expected schema root. Make sure the root element is &lt;schema&gt; and the namespace is 'http://www.w3.org/2001/XMLSchema' for an XSD schema or 'urn:schemas-microsoft-com:xml-data' for an XDR schema.</summary>
    internal static string @Sch_SchemaRootExpected => GetResourceString("Sch_SchemaRootExpected");
    /// <summary>The root element of a W3C XML Schema should be &lt;schema&gt; and its namespace should be 'http://www.w3.org/2001/XMLSchema'.</summary>
    internal static string @Sch_XSDSchemaRootExpected => GetResourceString("Sch_XSDSchemaRootExpected");
    /// <summary>The '{0}' attribute is not supported in this context.</summary>
    internal static string @Sch_UnsupportedAttribute => GetResourceString("Sch_UnsupportedAttribute");
    /// <summary>The '{0}' element is not supported in this context.</summary>
    internal static string @Sch_UnsupportedElement => GetResourceString("Sch_UnsupportedElement");
    /// <summary>The '{0}' attribute is either invalid or missing.</summary>
    internal static string @Sch_MissAttribute => GetResourceString("Sch_MissAttribute");
    /// <summary>The 'annotation' element cannot appear at this location.</summary>
    internal static string @Sch_AnnotationLocation => GetResourceString("Sch_AnnotationLocation");
    /// <summary>Content must be "textOnly" when using DataType on an ElementType.</summary>
    internal static string @Sch_DataTypeTextOnly => GetResourceString("Sch_DataTypeTextOnly");
    /// <summary>The model attribute must have a value of open or closed, not '{0}'.</summary>
    internal static string @Sch_UnknownModel => GetResourceString("Sch_UnknownModel");
    /// <summary>The order attribute must have a value of 'seq', 'one', or 'many', not '{0}'.</summary>
    internal static string @Sch_UnknownOrder => GetResourceString("Sch_UnknownOrder");
    /// <summary>The content attribute must have a value of 'textOnly', 'eltOnly', 'mixed', or 'empty', not '{0}'.</summary>
    internal static string @Sch_UnknownContent => GetResourceString("Sch_UnknownContent");
    /// <summary>The required attribute must have a value of yes or no.</summary>
    internal static string @Sch_UnknownRequired => GetResourceString("Sch_UnknownRequired");
    /// <summary>Reference to an unknown data type, '{0}'.</summary>
    internal static string @Sch_UnknownDtType => GetResourceString("Sch_UnknownDtType");
    /// <summary>The order must be many when content is mixed.</summary>
    internal static string @Sch_MixedMany => GetResourceString("Sch_MixedMany");
    /// <summary>The group is not allowed when ElementType has empty or textOnly content.</summary>
    internal static string @Sch_GroupDisabled => GetResourceString("Sch_GroupDisabled");
    /// <summary>The DataType value cannot be empty.</summary>
    internal static string @Sch_MissDtvalue => GetResourceString("Sch_MissDtvalue");
    /// <summary>The dt:values attribute is missing.</summary>
    internal static string @Sch_MissDtvaluesAttribute => GetResourceString("Sch_MissDtvaluesAttribute");
    /// <summary>Data type has already been declared.</summary>
    internal static string @Sch_DupDtType => GetResourceString("Sch_DupDtType");
    /// <summary>The '{0}' attribute has already been declared for this ElementType.</summary>
    internal static string @Sch_DupAttribute => GetResourceString("Sch_DupAttribute");
    /// <summary>Data type should be enumeration when the values attribute is present.</summary>
    internal static string @Sch_RequireEnumeration => GetResourceString("Sch_RequireEnumeration");
    /// <summary>An attribute or element of type xs:ID or derived from xs:ID, should not have a value constraint.</summary>
    internal static string @Sch_DefaultIdValue => GetResourceString("Sch_DefaultIdValue");
    /// <summary>Element is not allowed when the content is empty or textOnly.</summary>
    internal static string @Sch_ElementNotAllowed => GetResourceString("Sch_ElementNotAllowed");
    /// <summary>There is a missing element.</summary>
    internal static string @Sch_ElementMissing => GetResourceString("Sch_ElementMissing");
    /// <summary>When the order is many, the maxOccurs attribute must have a value of '*'.</summary>
    internal static string @Sch_ManyMaxOccurs => GetResourceString("Sch_ManyMaxOccurs");
    /// <summary>The maxOccurs attribute must have a value of 1 or *.</summary>
    internal static string @Sch_MaxOccursInvalid => GetResourceString("Sch_MaxOccursInvalid");
    /// <summary>The minOccurs attribute must have a value of 0 or 1.</summary>
    internal static string @Sch_MinOccursInvalid => GetResourceString("Sch_MinOccursInvalid");
    /// <summary>The value '{0}' is invalid for dt:maxLength.</summary>
    internal static string @Sch_DtMaxLengthInvalid => GetResourceString("Sch_DtMaxLengthInvalid");
    /// <summary>The value '{0}' is invalid for dt:minLength.</summary>
    internal static string @Sch_DtMinLengthInvalid => GetResourceString("Sch_DtMinLengthInvalid");
    /// <summary>The value of maxLength has already been declared.</summary>
    internal static string @Sch_DupDtMaxLength => GetResourceString("Sch_DupDtMaxLength");
    /// <summary>The value of minLength has already been declared.</summary>
    internal static string @Sch_DupDtMinLength => GetResourceString("Sch_DupDtMinLength");
    /// <summary>The maxLength value must be equal to or greater than the minLength value.</summary>
    internal static string @Sch_DtMinMaxLength => GetResourceString("Sch_DtMinMaxLength");
    /// <summary>The '{0}' element already exists in the content model.</summary>
    internal static string @Sch_DupElement => GetResourceString("Sch_DupElement");
    /// <summary>The content model can only have one of the following; 'all', 'choice', or 'sequence'.</summary>
    internal static string @Sch_DupGroupParticle => GetResourceString("Sch_DupGroupParticle");
    /// <summary>The value '{0}' is invalid according to its data type.</summary>
    internal static string @Sch_InvalidValue => GetResourceString("Sch_InvalidValue");
    /// <summary>The value '{0}' is invalid according to its schema type '{1}' - {2}</summary>
    internal static string @Sch_InvalidValueDetailed => GetResourceString("Sch_InvalidValueDetailed");
    /// <summary>The attribute '{0}' has an invalid value '{1}' according to its schema type '{2}' - {3}</summary>
    internal static string @Sch_InvalidValueDetailedAttribute => GetResourceString("Sch_InvalidValueDetailedAttribute");
    /// <summary>The required attribute '{0}' is missing.</summary>
    internal static string @Sch_MissRequiredAttribute => GetResourceString("Sch_MissRequiredAttribute");
    /// <summary>The value of the '{0}' attribute does not equal its fixed value.</summary>
    internal static string @Sch_FixedAttributeValue => GetResourceString("Sch_FixedAttributeValue");
    /// <summary>The value of the '{0}' element does not equal its fixed value.</summary>
    internal static string @Sch_FixedElementValue => GetResourceString("Sch_FixedElementValue");
    /// <summary>The '{0}' attribute is invalid - The value '{1}' is invalid according to its datatype '{2}' - {3}</summary>
    internal static string @Sch_AttributeValueDataTypeDetailed => GetResourceString("Sch_AttributeValueDataTypeDetailed");
    /// <summary>The default value of '{0}' attribute is invalid according to its datatype.</summary>
    internal static string @Sch_AttributeDefaultDataType => GetResourceString("Sch_AttributeDefaultDataType");
    /// <summary>The 'include' element cannot appear at this location.</summary>
    internal static string @Sch_IncludeLocation => GetResourceString("Sch_IncludeLocation");
    /// <summary>The 'import' element cannot appear at this location.</summary>
    internal static string @Sch_ImportLocation => GetResourceString("Sch_ImportLocation");
    /// <summary>The 'redefine' element cannot appear at this location.</summary>
    internal static string @Sch_RedefineLocation => GetResourceString("Sch_RedefineLocation");
    /// <summary>The values 'list' and 'union' are invalid for the blockDefault attribute.</summary>
    internal static string @Sch_InvalidBlockDefaultValue => GetResourceString("Sch_InvalidBlockDefaultValue");
    /// <summary>The value 'substitution' is invalid for the finalDefault attribute.</summary>
    internal static string @Sch_InvalidFinalDefaultValue => GetResourceString("Sch_InvalidFinalDefaultValue");
    /// <summary>The values 'list' and 'union' are invalid for the block attribute on element.</summary>
    internal static string @Sch_InvalidElementBlockValue => GetResourceString("Sch_InvalidElementBlockValue");
    /// <summary>The values 'substitution', 'list', and 'union' are invalid for the final attribute on element.</summary>
    internal static string @Sch_InvalidElementFinalValue => GetResourceString("Sch_InvalidElementFinalValue");
    /// <summary>The values 'substitution' and 'extension' are invalid for the final attribute on simpleType.</summary>
    internal static string @Sch_InvalidSimpleTypeFinalValue => GetResourceString("Sch_InvalidSimpleTypeFinalValue");
    /// <summary>The values 'substitution', 'list', and 'union' are invalid for the block attribute on complexType.</summary>
    internal static string @Sch_InvalidComplexTypeBlockValue => GetResourceString("Sch_InvalidComplexTypeBlockValue");
    /// <summary>The values 'substitution', 'list', and 'union' are invalid for the final attribute on complexType.</summary>
    internal static string @Sch_InvalidComplexTypeFinalValue => GetResourceString("Sch_InvalidComplexTypeFinalValue");
    /// <summary>The identity constraint '{0}' has already been declared.</summary>
    internal static string @Sch_DupIdentityConstraint => GetResourceString("Sch_DupIdentityConstraint");
    /// <summary>The global element '{0}' has already been declared.</summary>
    internal static string @Sch_DupGlobalElement => GetResourceString("Sch_DupGlobalElement");
    /// <summary>The global attribute '{0}' has already been declared.</summary>
    internal static string @Sch_DupGlobalAttribute => GetResourceString("Sch_DupGlobalAttribute");
    /// <summary>The simpleType '{0}' has already been declared.</summary>
    internal static string @Sch_DupSimpleType => GetResourceString("Sch_DupSimpleType");
    /// <summary>The complexType '{0}' has already been declared.</summary>
    internal static string @Sch_DupComplexType => GetResourceString("Sch_DupComplexType");
    /// <summary>The group '{0}' has already been declared.</summary>
    internal static string @Sch_DupGroup => GetResourceString("Sch_DupGroup");
    /// <summary>The attributeGroup '{0}' has already been declared.</summary>
    internal static string @Sch_DupAttributeGroup => GetResourceString("Sch_DupAttributeGroup");
    /// <summary>The notation '{0}' has already been declared.</summary>
    internal static string @Sch_DupNotation => GetResourceString("Sch_DupNotation");
    /// <summary>The fixed and default attributes cannot both be present.</summary>
    internal static string @Sch_DefaultFixedAttributes => GetResourceString("Sch_DefaultFixedAttributes");
    /// <summary>The fixed value constraint on the '{0}' attribute reference must match the fixed value constraint on the declaration.</summary>
    internal static string @Sch_FixedInRef => GetResourceString("Sch_FixedInRef");
    /// <summary>The default value constraint cannot be present on the '{0}' attribute reference if the fixed value constraint is present on the declaration.</summary>
    internal static string @Sch_FixedDefaultInRef => GetResourceString("Sch_FixedDefaultInRef");
    /// <summary>'{0}' is a duplicate XSD element.</summary>
    internal static string @Sch_DupXsdElement => GetResourceString("Sch_DupXsdElement");
    /// <summary>The '{0}' attribute cannot be present.</summary>
    internal static string @Sch_ForbiddenAttribute => GetResourceString("Sch_ForbiddenAttribute");
    /// <summary>The '{0}' attribute is ignored, because the value of 'prohibited' for attribute use only prevents inheritance of an identically named attribute from the base type definition.</summary>
    internal static string @Sch_AttributeIgnored => GetResourceString("Sch_AttributeIgnored");
    /// <summary>When the ref attribute is present, the type attribute and complexType, simpleType, key, keyref, and unique elements cannot be present.</summary>
    internal static string @Sch_ElementRef => GetResourceString("Sch_ElementRef");
    /// <summary>The type attribute cannot be present with either simpleType or complexType.</summary>
    internal static string @Sch_TypeMutualExclusive => GetResourceString("Sch_TypeMutualExclusive");
    /// <summary>For element declaration, either the name or the ref attribute must be present.</summary>
    internal static string @Sch_ElementNameRef => GetResourceString("Sch_ElementNameRef");
    /// <summary>For attribute '{0}', either the name or the ref attribute must be present, but not both.</summary>
    internal static string @Sch_AttributeNameRef => GetResourceString("Sch_AttributeNameRef");
    /// <summary>The following text is not allowed in this context: '{0}'.</summary>
    internal static string @Sch_TextNotAllowed => GetResourceString("Sch_TextNotAllowed");
    /// <summary>Type '{0}' is not declared.</summary>
    internal static string @Sch_UndeclaredType => GetResourceString("Sch_UndeclaredType");
    /// <summary>Type '{0}' is not declared, or is not a simple type.</summary>
    internal static string @Sch_UndeclaredSimpleType => GetResourceString("Sch_UndeclaredSimpleType");
    /// <summary>Substitution group refers to '{0}', an undeclared element.</summary>
    internal static string @Sch_UndeclaredEquivClass => GetResourceString("Sch_UndeclaredEquivClass");
    /// <summary>An attribute of type ID must have a declared default of either #IMPLIED or #REQUIRED.</summary>
    internal static string @Sch_AttListPresence => GetResourceString("Sch_AttListPresence");
    /// <summary>'{0}' is not in the notation list.</summary>
    internal static string @Sch_NotationValue => GetResourceString("Sch_NotationValue");
    /// <summary>'{0}' is not in the enumeration list.</summary>
    internal static string @Sch_EnumerationValue => GetResourceString("Sch_EnumerationValue");
    /// <summary>The attribute value cannot be empty.</summary>
    internal static string @Sch_EmptyAttributeValue => GetResourceString("Sch_EmptyAttributeValue");
    /// <summary>'{0}' is an invalid language identifier.</summary>
    internal static string @Sch_InvalidLanguageId => GetResourceString("Sch_InvalidLanguageId");
    /// <summary>Invalid xml:space syntax.</summary>
    internal static string @Sch_XmlSpace => GetResourceString("Sch_XmlSpace");
    /// <summary>'{1}' is an invalid value for the '{0}' attribute.</summary>
    internal static string @Sch_InvalidXsdAttributeValue => GetResourceString("Sch_InvalidXsdAttributeValue");
    /// <summary>The value for the '{0}' attribute is invalid - {1}</summary>
    internal static string @Sch_InvalidXsdAttributeDatatypeValue => GetResourceString("Sch_InvalidXsdAttributeDatatypeValue");
    /// <summary>The '{0}' element is invalid - The value '{1}' is invalid according to its datatype '{2}' - {3}</summary>
    internal static string @Sch_ElementValueDataTypeDetailed => GetResourceString("Sch_ElementValueDataTypeDetailed");
    /// <summary>The default value '{0}' of element '{1}' is invalid according to the type specified by xsi:type.</summary>
    internal static string @Sch_InvalidElementDefaultValue => GetResourceString("Sch_InvalidElementDefaultValue");
    /// <summary>Multiple definition of element '{0}' causes the content model to become ambiguous. A content model must be formed such that during validation of an element information item sequence, the particle contained directly, indirectly or implicitly therein with wh ...</summary>
    internal static string @Sch_NonDeterministic => GetResourceString("Sch_NonDeterministic");
    /// <summary>Wildcard '{0}' allows element '{1}', and causes the content model to become ambiguous. A content model must be formed such that during validation of an element information item sequence, the particle contained directly, indirectly or implicitly therein wit ...</summary>
    internal static string @Sch_NonDeterministicAnyEx => GetResourceString("Sch_NonDeterministicAnyEx");
    /// <summary>Wildcards '{0}' and '{1}' have not empty intersection, and causes the content model to become ambiguous. A content model must be formed such that during validation of an element information item sequence, the particle contained directly, indirectly or impl ...</summary>
    internal static string @Sch_NonDeterministicAnyAny => GetResourceString("Sch_NonDeterministicAnyAny");
    /// <summary>The standalone document declaration must have a value of 'no'.</summary>
    internal static string @Sch_StandAlone => GetResourceString("Sch_StandAlone");
    /// <summary>The value 'xmlns' cannot be used as the name of an attribute declaration.</summary>
    internal static string @Sch_XmlNsAttribute => GetResourceString("Sch_XmlNsAttribute");
    /// <summary>Element '{0}' cannot appear more than once if content model type is "all".</summary>
    internal static string @Sch_AllElement => GetResourceString("Sch_AllElement");
    /// <summary>The targetNamespace '{0}' of included/redefined schema should be the same as the targetNamespace '{1}' of the including schema.</summary>
    internal static string @Sch_MismatchTargetNamespaceInclude => GetResourceString("Sch_MismatchTargetNamespaceInclude");
    /// <summary>The namespace attribute '{0}' of an import should be the same value as the targetNamespace '{1}' of the imported schema.</summary>
    internal static string @Sch_MismatchTargetNamespaceImport => GetResourceString("Sch_MismatchTargetNamespaceImport");
    /// <summary>The targetNamespace parameter '{0}' should be the same value as the targetNamespace '{1}' of the schema.</summary>
    internal static string @Sch_MismatchTargetNamespaceEx => GetResourceString("Sch_MismatchTargetNamespaceEx");
    /// <summary>This is an invalid xsi:type '{0}'.</summary>
    internal static string @Sch_XsiTypeNotFound => GetResourceString("Sch_XsiTypeNotFound");
    /// <summary>The xsi:type '{0}' cannot be abstract.</summary>
    internal static string @Sch_XsiTypeAbstract => GetResourceString("Sch_XsiTypeAbstract");
    /// <summary>A list data type must be derived from an atomic or union data type.</summary>
    internal static string @Sch_ListFromNonatomic => GetResourceString("Sch_ListFromNonatomic");
    /// <summary>It is an error if a union type has a member with variety union and this member cannot be substituted with its own members. This may be due to the fact that the union member is a restriction of a union with facets.</summary>
    internal static string @Sch_UnionFromUnion => GetResourceString("Sch_UnionFromUnion");
    /// <summary>This is a duplicate Length constraining facet.</summary>
    internal static string @Sch_DupLengthFacet => GetResourceString("Sch_DupLengthFacet");
    /// <summary>This is a duplicate MinLength constraining facet.</summary>
    internal static string @Sch_DupMinLengthFacet => GetResourceString("Sch_DupMinLengthFacet");
    /// <summary>This is a duplicate MaxLength constraining facet.</summary>
    internal static string @Sch_DupMaxLengthFacet => GetResourceString("Sch_DupMaxLengthFacet");
    /// <summary>This is a duplicate WhiteSpace constraining facet.</summary>
    internal static string @Sch_DupWhiteSpaceFacet => GetResourceString("Sch_DupWhiteSpaceFacet");
    /// <summary>This is a duplicate MaxInclusive constraining facet.</summary>
    internal static string @Sch_DupMaxInclusiveFacet => GetResourceString("Sch_DupMaxInclusiveFacet");
    /// <summary>This is a duplicate MaxExclusive constraining facet.</summary>
    internal static string @Sch_DupMaxExclusiveFacet => GetResourceString("Sch_DupMaxExclusiveFacet");
    /// <summary>This is a duplicate MinInclusive constraining facet.</summary>
    internal static string @Sch_DupMinInclusiveFacet => GetResourceString("Sch_DupMinInclusiveFacet");
    /// <summary>This is a duplicate MinExclusive constraining facet.</summary>
    internal static string @Sch_DupMinExclusiveFacet => GetResourceString("Sch_DupMinExclusiveFacet");
    /// <summary>This is a duplicate TotalDigits constraining facet.</summary>
    internal static string @Sch_DupTotalDigitsFacet => GetResourceString("Sch_DupTotalDigitsFacet");
    /// <summary>This is a duplicate FractionDigits constraining facet.</summary>
    internal static string @Sch_DupFractionDigitsFacet => GetResourceString("Sch_DupFractionDigitsFacet");
    /// <summary>The length constraining facet is prohibited for '{0}'.</summary>
    internal static string @Sch_LengthFacetProhibited => GetResourceString("Sch_LengthFacetProhibited");
    /// <summary>The MinLength constraining facet is prohibited for '{0}'.</summary>
    internal static string @Sch_MinLengthFacetProhibited => GetResourceString("Sch_MinLengthFacetProhibited");
    /// <summary>The MaxLength constraining facet is prohibited for '{0}'.</summary>
    internal static string @Sch_MaxLengthFacetProhibited => GetResourceString("Sch_MaxLengthFacetProhibited");
    /// <summary>The Pattern constraining facet is prohibited for '{0}'.</summary>
    internal static string @Sch_PatternFacetProhibited => GetResourceString("Sch_PatternFacetProhibited");
    /// <summary>The Enumeration constraining facet is prohibited for '{0}'.</summary>
    internal static string @Sch_EnumerationFacetProhibited => GetResourceString("Sch_EnumerationFacetProhibited");
    /// <summary>The WhiteSpace constraining facet is prohibited for '{0}'.</summary>
    internal static string @Sch_WhiteSpaceFacetProhibited => GetResourceString("Sch_WhiteSpaceFacetProhibited");
    /// <summary>The MaxInclusive constraining facet is prohibited for '{0}'.</summary>
    internal static string @Sch_MaxInclusiveFacetProhibited => GetResourceString("Sch_MaxInclusiveFacetProhibited");
    /// <summary>The MaxExclusive constraining facet is prohibited for '{0}'.</summary>
    internal static string @Sch_MaxExclusiveFacetProhibited => GetResourceString("Sch_MaxExclusiveFacetProhibited");
    /// <summary>The MinInclusive constraining facet is prohibited for '{0}'.</summary>
    internal static string @Sch_MinInclusiveFacetProhibited => GetResourceString("Sch_MinInclusiveFacetProhibited");
    /// <summary>The MinExclusive constraining facet is prohibited for '{0}'.</summary>
    internal static string @Sch_MinExclusiveFacetProhibited => GetResourceString("Sch_MinExclusiveFacetProhibited");
    /// <summary>The TotalDigits constraining facet is prohibited for '{0}'.</summary>
    internal static string @Sch_TotalDigitsFacetProhibited => GetResourceString("Sch_TotalDigitsFacetProhibited");
    /// <summary>The FractionDigits constraining facet is prohibited for '{0}'.</summary>
    internal static string @Sch_FractionDigitsFacetProhibited => GetResourceString("Sch_FractionDigitsFacetProhibited");
    /// <summary>The Length constraining facet is invalid - {0}</summary>
    internal static string @Sch_LengthFacetInvalid => GetResourceString("Sch_LengthFacetInvalid");
    /// <summary>The MinLength constraining facet is invalid - {0}</summary>
    internal static string @Sch_MinLengthFacetInvalid => GetResourceString("Sch_MinLengthFacetInvalid");
    /// <summary>The MaxLength constraining facet is invalid - {0}</summary>
    internal static string @Sch_MaxLengthFacetInvalid => GetResourceString("Sch_MaxLengthFacetInvalid");
    /// <summary>The MaxInclusive constraining facet is invalid - {0}</summary>
    internal static string @Sch_MaxInclusiveFacetInvalid => GetResourceString("Sch_MaxInclusiveFacetInvalid");
    /// <summary>The MaxExclusive constraining facet is invalid - {0}</summary>
    internal static string @Sch_MaxExclusiveFacetInvalid => GetResourceString("Sch_MaxExclusiveFacetInvalid");
    /// <summary>The MinInclusive constraining facet is invalid - {0}</summary>
    internal static string @Sch_MinInclusiveFacetInvalid => GetResourceString("Sch_MinInclusiveFacetInvalid");
    /// <summary>The MinExclusive constraining facet is invalid - {0}</summary>
    internal static string @Sch_MinExclusiveFacetInvalid => GetResourceString("Sch_MinExclusiveFacetInvalid");
    /// <summary>The TotalDigits constraining facet is invalid - {0}</summary>
    internal static string @Sch_TotalDigitsFacetInvalid => GetResourceString("Sch_TotalDigitsFacetInvalid");
    /// <summary>The FractionDigits constraining facet is invalid - {0}</summary>
    internal static string @Sch_FractionDigitsFacetInvalid => GetResourceString("Sch_FractionDigitsFacetInvalid");
    /// <summary>The Pattern constraining facet is invalid - {0}</summary>
    internal static string @Sch_PatternFacetInvalid => GetResourceString("Sch_PatternFacetInvalid");
    /// <summary>The Enumeration constraining facet is invalid - {0}</summary>
    internal static string @Sch_EnumerationFacetInvalid => GetResourceString("Sch_EnumerationFacetInvalid");
    /// <summary>The whitespace character, '{0}', is invalid.</summary>
    internal static string @Sch_InvalidWhiteSpace => GetResourceString("Sch_InvalidWhiteSpace");
    /// <summary>This is an unknown facet.</summary>
    internal static string @Sch_UnknownFacet => GetResourceString("Sch_UnknownFacet");
    /// <summary>It is an error for both length and minLength or maxLength to be present.</summary>
    internal static string @Sch_LengthAndMinMax => GetResourceString("Sch_LengthAndMinMax");
    /// <summary>minLength is greater than maxLength.</summary>
    internal static string @Sch_MinLengthGtMaxLength => GetResourceString("Sch_MinLengthGtMaxLength");
    /// <summary>FractionDigits is greater than TotalDigits.</summary>
    internal static string @Sch_FractionDigitsGtTotalDigits => GetResourceString("Sch_FractionDigitsGtTotalDigits");
    /// <summary>The actual length is not equal to the specified length.</summary>
    internal static string @Sch_LengthConstraintFailed => GetResourceString("Sch_LengthConstraintFailed");
    /// <summary>The actual length is less than the MinLength value.</summary>
    internal static string @Sch_MinLengthConstraintFailed => GetResourceString("Sch_MinLengthConstraintFailed");
    /// <summary>The actual length is greater than the MaxLength value.</summary>
    internal static string @Sch_MaxLengthConstraintFailed => GetResourceString("Sch_MaxLengthConstraintFailed");
    /// <summary>The Pattern constraint failed.</summary>
    internal static string @Sch_PatternConstraintFailed => GetResourceString("Sch_PatternConstraintFailed");
    /// <summary>The Enumeration constraint failed.</summary>
    internal static string @Sch_EnumerationConstraintFailed => GetResourceString("Sch_EnumerationConstraintFailed");
    /// <summary>The MaxInclusive constraint failed.</summary>
    internal static string @Sch_MaxInclusiveConstraintFailed => GetResourceString("Sch_MaxInclusiveConstraintFailed");
    /// <summary>The MaxExclusive constraint failed.</summary>
    internal static string @Sch_MaxExclusiveConstraintFailed => GetResourceString("Sch_MaxExclusiveConstraintFailed");
    /// <summary>The MinInclusive constraint failed.</summary>
    internal static string @Sch_MinInclusiveConstraintFailed => GetResourceString("Sch_MinInclusiveConstraintFailed");
    /// <summary>The MinExclusive constraint failed.</summary>
    internal static string @Sch_MinExclusiveConstraintFailed => GetResourceString("Sch_MinExclusiveConstraintFailed");
    /// <summary>The TotalDigits constraint failed.</summary>
    internal static string @Sch_TotalDigitsConstraintFailed => GetResourceString("Sch_TotalDigitsConstraintFailed");
    /// <summary>The FractionDigits constraint failed.</summary>
    internal static string @Sch_FractionDigitsConstraintFailed => GetResourceString("Sch_FractionDigitsConstraintFailed");
    /// <summary>The value '{0}' is not valid according to any of the memberTypes of the union.</summary>
    internal static string @Sch_UnionFailedEx => GetResourceString("Sch_UnionFailedEx");
    /// <summary>NOTATION cannot be used directly in a schema; only data types derived from NOTATION by specifying an enumeration value can be used in a schema. All enumeration facet values must match the name of a notation declared in the current schema.</summary>
    internal static string @Sch_NotationRequired => GetResourceString("Sch_NotationRequired");
    /// <summary>No element type can have more than one NOTATION attribute specified.</summary>
    internal static string @Sch_DupNotationAttribute => GetResourceString("Sch_DupNotationAttribute");
    /// <summary>NOTATION must have either the Public or System attribute present.</summary>
    internal static string @Sch_MissingPublicSystemAttribute => GetResourceString("Sch_MissingPublicSystemAttribute");
    /// <summary>An attribute of type NOTATION must not be declared on an element declared EMPTY.</summary>
    internal static string @Sch_NotationAttributeOnEmptyElement => GetResourceString("Sch_NotationAttributeOnEmptyElement");
    /// <summary>The Keyref '{0}' cannot find the referred key or unique in scope.</summary>
    internal static string @Sch_RefNotInScope => GetResourceString("Sch_RefNotInScope");
    /// <summary>The '{0}' identity constraint is not declared.</summary>
    internal static string @Sch_UndeclaredIdentityConstraint => GetResourceString("Sch_UndeclaredIdentityConstraint");
    /// <summary>Reference to an invalid identity constraint, '{0}'.</summary>
    internal static string @Sch_RefInvalidIdentityConstraint => GetResourceString("Sch_RefInvalidIdentityConstraint");
    /// <summary>Keyref '{0}' has different cardinality as the referred key or unique element.</summary>
    internal static string @Sch_RefInvalidCardin => GetResourceString("Sch_RefInvalidCardin");
    /// <summary>The '{0}' Keyref can refer to key or unique only.</summary>
    internal static string @Sch_ReftoKeyref => GetResourceString("Sch_ReftoKeyref");
    /// <summary>The XPath for selector or field cannot be empty.</summary>
    internal static string @Sch_EmptyXPath => GetResourceString("Sch_EmptyXPath");
    /// <summary>The prefix '{0}' in XPath cannot be resolved.</summary>
    internal static string @Sch_UnresolvedPrefix => GetResourceString("Sch_UnresolvedPrefix");
    /// <summary>The key sequence '{0}' in '{1}' Keyref fails to refer to some key.</summary>
    internal static string @Sch_UnresolvedKeyref => GetResourceString("Sch_UnresolvedKeyref");
    /// <summary>'{0}' is an invalid XPath for selector or field.</summary>
    internal static string @Sch_ICXpathError => GetResourceString("Sch_ICXpathError");
    /// <summary>'{0}' is an invalid XPath for selector. Selector cannot have an XPath selection with an attribute node.</summary>
    internal static string @Sch_SelectorAttr => GetResourceString("Sch_SelectorAttr");
    /// <summary>The field '{0}' is expecting an element or attribute with simple type or simple content.</summary>
    internal static string @Sch_FieldSimpleTypeExpected => GetResourceString("Sch_FieldSimpleTypeExpected");
    /// <summary>The field '{0}' is expecting at the most one value.</summary>
    internal static string @Sch_FieldSingleValueExpected => GetResourceString("Sch_FieldSingleValueExpected");
    /// <summary>The identity constraint '{0}' validation has failed. Either a key is missing or the existing key has an empty node.</summary>
    internal static string @Sch_MissingKey => GetResourceString("Sch_MissingKey");
    /// <summary>There is a duplicate key sequence '{0}' for the '{1}' key or unique identity constraint.</summary>
    internal static string @Sch_DuplicateKey => GetResourceString("Sch_DuplicateKey");
    /// <summary>The target namespace of an attribute declaration, whether local or global, must not match http://www.w3.org/2001/XMLSchema-instance.</summary>
    internal static string @Sch_TargetNamespaceXsi => GetResourceString("Sch_TargetNamespaceXsi");
    /// <summary>Reference to an undeclared entity, '{0}'.</summary>
    internal static string @Sch_UndeclaredEntity => GetResourceString("Sch_UndeclaredEntity");
    /// <summary>Reference to an unparsed entity, '{0}'.</summary>
    internal static string @Sch_UnparsedEntityRef => GetResourceString("Sch_UnparsedEntityRef");
    /// <summary>The value for the 'maxOccurs' attribute must be xsd:nonNegativeInteger or 'unbounded'.</summary>
    internal static string @Sch_MaxOccursInvalidXsd => GetResourceString("Sch_MaxOccursInvalidXsd");
    /// <summary>The value for the 'minOccurs' attribute must be xsd:nonNegativeInteger.</summary>
    internal static string @Sch_MinOccursInvalidXsd => GetResourceString("Sch_MinOccursInvalidXsd");
    /// <summary>'maxInclusive' and 'maxExclusive' cannot both be specified for the same data type.</summary>
    internal static string @Sch_MaxInclusiveExclusive => GetResourceString("Sch_MaxInclusiveExclusive");
    /// <summary>'minInclusive' and 'minExclusive' cannot both be specified for the same data type.</summary>
    internal static string @Sch_MinInclusiveExclusive => GetResourceString("Sch_MinInclusiveExclusive");
    /// <summary>The value specified for 'minInclusive' cannot be greater than the value specified for 'maxInclusive' for the same data type.</summary>
    internal static string @Sch_MinInclusiveGtMaxInclusive => GetResourceString("Sch_MinInclusiveGtMaxInclusive");
    /// <summary>The value specified for 'minExclusive' cannot be greater than the value specified for 'maxExclusive' for the same data type.</summary>
    internal static string @Sch_MinExclusiveGtMaxExclusive => GetResourceString("Sch_MinExclusiveGtMaxExclusive");
    /// <summary>The value specified for 'minInclusive' cannot be greater than the value specified for 'maxExclusive' for the same data type.</summary>
    internal static string @Sch_MinInclusiveGtMaxExclusive => GetResourceString("Sch_MinInclusiveGtMaxExclusive");
    /// <summary>The value specified for 'minExclusive' cannot be greater than the value specified for 'maxInclusive' for the same data type.</summary>
    internal static string @Sch_MinExclusiveGtMaxInclusive => GetResourceString("Sch_MinExclusiveGtMaxInclusive");
    /// <summary>'simpleType' should be the first child of restriction.</summary>
    internal static string @Sch_SimpleTypeRestriction => GetResourceString("Sch_SimpleTypeRestriction");
    /// <summary>Facet should go before 'attribute', 'attributeGroup', or 'anyAttribute'.</summary>
    internal static string @Sch_InvalidFacetPosition => GetResourceString("Sch_InvalidFacetPosition");
    /// <summary>'{0}' and content model are mutually exclusive.</summary>
    internal static string @Sch_AttributeMutuallyExclusive => GetResourceString("Sch_AttributeMutuallyExclusive");
    /// <summary>'anyAttribute' must be the last child.</summary>
    internal static string @Sch_AnyAttributeLastChild => GetResourceString("Sch_AnyAttributeLastChild");
    /// <summary>The content model of a complex type must consist of 'annotation' (if present); followed by zero or one of the following: 'simpleContent', 'complexContent', 'group', 'choice', 'sequence', or 'all'; followed by zero or more 'attribute' or 'attributeGroup'; f ...</summary>
    internal static string @Sch_ComplexTypeContentModel => GetResourceString("Sch_ComplexTypeContentModel");
    /// <summary>Complex content restriction or extension should consist of zero or one of 'group', 'choice', 'sequence', or 'all'; followed by zero or more 'attribute' or 'attributeGroup'; followed by zero or one 'anyAttribute'.</summary>
    internal static string @Sch_ComplexContentContentModel => GetResourceString("Sch_ComplexContentContentModel");
    /// <summary>Carriage return (#xD), line feed (#xA), and tab (#x9) characters are not allowed in xs:normalizedString.</summary>
    internal static string @Sch_NotNormalizedString => GetResourceString("Sch_NotNormalizedString");
    /// <summary>FractionDigits should be equal to 0 on types other then decimal.</summary>
    internal static string @Sch_FractionDigitsNotOnDecimal => GetResourceString("Sch_FractionDigitsNotOnDecimal");
    /// <summary>Element '{0}' must have no character or element children.</summary>
    internal static string @Sch_ContentInNill => GetResourceString("Sch_ContentInNill");
    /// <summary>Could not find schema information for the element '{0}'.</summary>
    internal static string @Sch_NoElementSchemaFound => GetResourceString("Sch_NoElementSchemaFound");
    /// <summary>Could not find schema information for the attribute '{0}'.</summary>
    internal static string @Sch_NoAttributeSchemaFound => GetResourceString("Sch_NoAttributeSchemaFound");
    /// <summary>The Namespace '{0}' is an invalid URI.</summary>
    internal static string @Sch_InvalidNamespace => GetResourceString("Sch_InvalidNamespace");
    /// <summary>The targetNamespace attribute cannot have empty string as its value.</summary>
    internal static string @Sch_InvalidTargetNamespaceAttribute => GetResourceString("Sch_InvalidTargetNamespaceAttribute");
    /// <summary>The namespace attribute cannot have empty string as its value.</summary>
    internal static string @Sch_InvalidNamespaceAttribute => GetResourceString("Sch_InvalidNamespaceAttribute");
    /// <summary>The SchemaLocation '{0}' is an invalid URI.</summary>
    internal static string @Sch_InvalidSchemaLocation => GetResourceString("Sch_InvalidSchemaLocation");
    /// <summary>Namespace attribute of an import must not match the real value of the enclosing targetNamespace of the &lt;schema&gt;.</summary>
    internal static string @Sch_ImportTargetNamespace => GetResourceString("Sch_ImportTargetNamespace");
    /// <summary>The enclosing &lt;schema&gt; must have a targetNamespace, if the Namespace attribute is absent on the import element.</summary>
    internal static string @Sch_ImportTargetNamespaceNull => GetResourceString("Sch_ImportTargetNamespaceNull");
    /// <summary>Double redefine for group.</summary>
    internal static string @Sch_GroupDoubleRedefine => GetResourceString("Sch_GroupDoubleRedefine");
    /// <summary>Cannot find a {0} with name '{1}' to redefine.</summary>
    internal static string @Sch_ComponentRedefineNotFound => GetResourceString("Sch_ComponentRedefineNotFound");
    /// <summary>No group to redefine.</summary>
    internal static string @Sch_GroupRedefineNotFound => GetResourceString("Sch_GroupRedefineNotFound");
    /// <summary>Double redefine for attribute group.</summary>
    internal static string @Sch_AttrGroupDoubleRedefine => GetResourceString("Sch_AttrGroupDoubleRedefine");
    /// <summary>No attribute group to redefine.</summary>
    internal static string @Sch_AttrGroupRedefineNotFound => GetResourceString("Sch_AttrGroupRedefineNotFound");
    /// <summary>Double redefine for complex type.</summary>
    internal static string @Sch_ComplexTypeDoubleRedefine => GetResourceString("Sch_ComplexTypeDoubleRedefine");
    /// <summary>No complex type to redefine.</summary>
    internal static string @Sch_ComplexTypeRedefineNotFound => GetResourceString("Sch_ComplexTypeRedefineNotFound");
    /// <summary>Cannot redefine a simple type as complex type.</summary>
    internal static string @Sch_SimpleToComplexTypeRedefine => GetResourceString("Sch_SimpleToComplexTypeRedefine");
    /// <summary>Double redefine for simple type.</summary>
    internal static string @Sch_SimpleTypeDoubleRedefine => GetResourceString("Sch_SimpleTypeDoubleRedefine");
    /// <summary>Cannot redefine a complex type as simple type.</summary>
    internal static string @Sch_ComplexToSimpleTypeRedefine => GetResourceString("Sch_ComplexToSimpleTypeRedefine");
    /// <summary>No simple type to redefine.</summary>
    internal static string @Sch_SimpleTypeRedefineNotFound => GetResourceString("Sch_SimpleTypeRedefineNotFound");
    /// <summary>When group is redefined, the real value of both minOccurs and maxOccurs attribute must be 1 (or absent).</summary>
    internal static string @Sch_MinMaxGroupRedefine => GetResourceString("Sch_MinMaxGroupRedefine");
    /// <summary>Multiple self-reference within a group is redefined.</summary>
    internal static string @Sch_MultipleGroupSelfRef => GetResourceString("Sch_MultipleGroupSelfRef");
    /// <summary>Multiple self-reference within an attribute group is redefined.</summary>
    internal static string @Sch_MultipleAttrGroupSelfRef => GetResourceString("Sch_MultipleAttrGroupSelfRef");
    /// <summary>If type is being redefined, the base type has to be self-referenced.</summary>
    internal static string @Sch_InvalidTypeRedefine => GetResourceString("Sch_InvalidTypeRedefine");
    /// <summary>If ref is present, all of &lt;complexType&gt;, &lt;simpleType&gt;, &lt;key&gt;, &lt;keyref&gt;, &lt;unique&gt;, nillable, default, fixed, form, block, and type must be absent.</summary>
    internal static string @Sch_InvalidElementRef => GetResourceString("Sch_InvalidElementRef");
    /// <summary>minOccurs value cannot be greater than maxOccurs value.</summary>
    internal static string @Sch_MinGtMax => GetResourceString("Sch_MinGtMax");
    /// <summary>Selector cannot appear twice in one identity constraint.</summary>
    internal static string @Sch_DupSelector => GetResourceString("Sch_DupSelector");
    /// <summary>Selector must be present.</summary>
    internal static string @Sch_IdConstraintNoSelector => GetResourceString("Sch_IdConstraintNoSelector");
    /// <summary>At least one field must be present.</summary>
    internal static string @Sch_IdConstraintNoFields => GetResourceString("Sch_IdConstraintNoFields");
    /// <summary>The referring attribute must be present.</summary>
    internal static string @Sch_IdConstraintNoRefer => GetResourceString("Sch_IdConstraintNoRefer");
    /// <summary>Cannot define fields before selector.</summary>
    internal static string @Sch_SelectorBeforeFields => GetResourceString("Sch_SelectorBeforeFields");
    /// <summary>SimpleType content is missing.</summary>
    internal static string @Sch_NoSimpleTypeContent => GetResourceString("Sch_NoSimpleTypeContent");
    /// <summary>SimpleType restriction should have either the base attribute or a simpleType child, but not both.</summary>
    internal static string @Sch_SimpleTypeRestRefBase => GetResourceString("Sch_SimpleTypeRestRefBase");
    /// <summary>SimpleType restriction should have either the base attribute or a simpleType child to indicate the base type for the derivation.</summary>
    internal static string @Sch_SimpleTypeRestRefBaseNone => GetResourceString("Sch_SimpleTypeRestRefBaseNone");
    /// <summary>SimpleType list should have either the itemType attribute or a simpleType child, but not both.</summary>
    internal static string @Sch_SimpleTypeListRefBase => GetResourceString("Sch_SimpleTypeListRefBase");
    /// <summary>SimpleType list should have either the itemType attribute or a simpleType child to indicate the itemType of the list.</summary>
    internal static string @Sch_SimpleTypeListRefBaseNone => GetResourceString("Sch_SimpleTypeListRefBaseNone");
    /// <summary>Either the memberTypes attribute must be non-empty or there must be at least one simpleType child.</summary>
    internal static string @Sch_SimpleTypeUnionNoBase => GetResourceString("Sch_SimpleTypeUnionNoBase");
    /// <summary>'restriction' or 'extension' child is required for complexType '{0}' in namespace '{1}', because it has a simpleContent or complexContent child.</summary>
    internal static string @Sch_NoRestOrExtQName => GetResourceString("Sch_NoRestOrExtQName");
    /// <summary>'restriction' or 'extension' child is required for complexType with simpleContent or complexContent child.</summary>
    internal static string @Sch_NoRestOrExt => GetResourceString("Sch_NoRestOrExt");
    /// <summary>'sequence', 'choice', or 'all' child is required.</summary>
    internal static string @Sch_NoGroupParticle => GetResourceString("Sch_NoGroupParticle");
    /// <summary>'all' must have 'minOccurs' value of 0 or 1.</summary>
    internal static string @Sch_InvalidAllMin => GetResourceString("Sch_InvalidAllMin");
    /// <summary>'all' must have a 'maxOccurs' value of 1.</summary>
    internal static string @Sch_InvalidAllMax => GetResourceString("Sch_InvalidAllMax");
    /// <summary>The 'value' attribute must be present in facet.</summary>
    internal static string @Sch_InvalidFacet => GetResourceString("Sch_InvalidFacet");
    /// <summary>The element '{0}' is abstract or its type is abstract.</summary>
    internal static string @Sch_AbstractElement => GetResourceString("Sch_AbstractElement");
    /// <summary>The xsi:type attribute value '{0}' is not valid for the element '{1}', either because it is not a type validly derived from the type in the schema, or because it has xsi:type derivation blocked.</summary>
    internal static string @Sch_XsiTypeBlockedEx => GetResourceString("Sch_XsiTypeBlockedEx");
    /// <summary>If the 'nillable' attribute is false in the schema, the 'xsi:nil' attribute must not be present in the instance.</summary>
    internal static string @Sch_InvalidXsiNill => GetResourceString("Sch_InvalidXsiNill");
    /// <summary>Element '{0}' cannot substitute in place of head element '{1}' because it has block='substitution'.</summary>
    internal static string @Sch_SubstitutionNotAllowed => GetResourceString("Sch_SubstitutionNotAllowed");
    /// <summary>Member element {0}'s type cannot be derived by restriction or extension from head element {1}'s type, because it has block='restriction' or 'extension'.</summary>
    internal static string @Sch_SubstitutionBlocked => GetResourceString("Sch_SubstitutionBlocked");
    /// <summary>The element '{0}' cannot contain child element '{1}' because the parent element's content model is empty.</summary>
    internal static string @Sch_InvalidElementInEmptyEx => GetResourceString("Sch_InvalidElementInEmptyEx");
    /// <summary>The element '{0}' cannot contain child element '{1}' because the parent element's content model is text only.</summary>
    internal static string @Sch_InvalidElementInTextOnlyEx => GetResourceString("Sch_InvalidElementInTextOnlyEx");
    /// <summary>The element {0} cannot contain text.</summary>
    internal static string @Sch_InvalidTextInElement => GetResourceString("Sch_InvalidTextInElement");
    /// <summary>The element {0} has invalid child element {1}.</summary>
    internal static string @Sch_InvalidElementContent => GetResourceString("Sch_InvalidElementContent");
    /// <summary>The element {0} has invalid child element {1} - {2}</summary>
    internal static string @Sch_InvalidElementContentComplex => GetResourceString("Sch_InvalidElementContentComplex");
    /// <summary>The element {0} has incomplete content.</summary>
    internal static string @Sch_IncompleteContent => GetResourceString("Sch_IncompleteContent");
    /// <summary>The element {0} has incomplete content - {2}</summary>
    internal static string @Sch_IncompleteContentComplex => GetResourceString("Sch_IncompleteContentComplex");
    /// <summary>The element {0} cannot contain text. List of possible elements expected: {1}.</summary>
    internal static string @Sch_InvalidTextInElementExpecting => GetResourceString("Sch_InvalidTextInElementExpecting");
    /// <summary>The element {0} has invalid child element {1}. List of possible elements expected: {2}.</summary>
    internal static string @Sch_InvalidElementContentExpecting => GetResourceString("Sch_InvalidElementContentExpecting");
    /// <summary>The element {0} has invalid child element {1}. List of possible elements expected: {2}. {3}</summary>
    internal static string @Sch_InvalidElementContentExpectingComplex => GetResourceString("Sch_InvalidElementContentExpectingComplex");
    /// <summary>The element {0} has incomplete content. List of possible elements expected: {1}.</summary>
    internal static string @Sch_IncompleteContentExpecting => GetResourceString("Sch_IncompleteContentExpecting");
    /// <summary>The element {0} has incomplete content. List of possible elements expected: {1}. {2}</summary>
    internal static string @Sch_IncompleteContentExpectingComplex => GetResourceString("Sch_IncompleteContentExpectingComplex");
    /// <summary>The element {0} cannot substitute for a local element {1} expected in that position.</summary>
    internal static string @Sch_InvalidElementSubstitution => GetResourceString("Sch_InvalidElementSubstitution");
    /// <summary>'{0}' in namespace '{1}'</summary>
    internal static string @Sch_ElementNameAndNamespace => GetResourceString("Sch_ElementNameAndNamespace");
    /// <summary>'{0}'</summary>
    internal static string @Sch_ElementName => GetResourceString("Sch_ElementName");
    /// <summary>{0}as well as</summary>
    internal static string @Sch_ContinuationString => GetResourceString("Sch_ContinuationString");
    /// <summary>any element in namespace '{0}'</summary>
    internal static string @Sch_AnyElementNS => GetResourceString("Sch_AnyElementNS");
    /// <summary>any element</summary>
    internal static string @Sch_AnyElement => GetResourceString("Sch_AnyElement");
    /// <summary>The element cannot contain text. Content model is empty.</summary>
    internal static string @Sch_InvalidTextInEmpty => GetResourceString("Sch_InvalidTextInEmpty");
    /// <summary>The element cannot contain whitespace. Content model is empty.</summary>
    internal static string @Sch_InvalidWhitespaceInEmpty => GetResourceString("Sch_InvalidWhitespaceInEmpty");
    /// <summary>The element cannot contain comment or processing instruction. Content model is empty.</summary>
    internal static string @Sch_InvalidPIComment => GetResourceString("Sch_InvalidPIComment");
    /// <summary>If ref is present, all of 'simpleType', 'form', 'type', and 'use' must be absent.</summary>
    internal static string @Sch_InvalidAttributeRef => GetResourceString("Sch_InvalidAttributeRef");
    /// <summary>The 'use' attribute must be optional (or absent) if the default attribute is present.</summary>
    internal static string @Sch_OptionalDefaultAttribute => GetResourceString("Sch_OptionalDefaultAttribute");
    /// <summary>Circular attribute reference.</summary>
    internal static string @Sch_AttributeCircularRef => GetResourceString("Sch_AttributeCircularRef");
    /// <summary>Circular identity constraint reference.</summary>
    internal static string @Sch_IdentityConstraintCircularRef => GetResourceString("Sch_IdentityConstraintCircularRef");
    /// <summary>Circular substitution group affiliation.</summary>
    internal static string @Sch_SubstitutionCircularRef => GetResourceString("Sch_SubstitutionCircularRef");
    /// <summary>Invalid namespace in 'anyAttribute'.</summary>
    internal static string @Sch_InvalidAnyAttribute => GetResourceString("Sch_InvalidAnyAttribute");
    /// <summary>Duplicate ID attribute.</summary>
    internal static string @Sch_DupIdAttribute => GetResourceString("Sch_DupIdAttribute");
    /// <summary>The 'maxOccurs' attribute of all the particles of an 'all' group must be 0 or 1.</summary>
    internal static string @Sch_InvalidAllElementMax => GetResourceString("Sch_InvalidAllElementMax");
    /// <summary>Invalid namespace in 'any'.</summary>
    internal static string @Sch_InvalidAny => GetResourceString("Sch_InvalidAny");
    /// <summary>The value of the namespace attribute of the element or attribute wildcard is invalid - {0}</summary>
    internal static string @Sch_InvalidAnyDetailed => GetResourceString("Sch_InvalidAnyDetailed");
    /// <summary>Element '{0}' cannot be nominated as the 'substitutionGroup' of any other declaration.</summary>
    internal static string @Sch_InvalidExamplar => GetResourceString("Sch_InvalidExamplar");
    /// <summary>Reference to undeclared substitution group affiliation.</summary>
    internal static string @Sch_NoExamplar => GetResourceString("Sch_NoExamplar");
    /// <summary>'{0}' cannot be a member of substitution group with head element '{1}'.</summary>
    internal static string @Sch_InvalidSubstitutionMember => GetResourceString("Sch_InvalidSubstitutionMember");
    /// <summary>'SchemaLocation' must successfully resolve if &lt;redefine&gt; contains any child other than &lt;annotation&gt;.</summary>
    internal static string @Sch_RedefineNoSchema => GetResourceString("Sch_RedefineNoSchema");
    /// <summary>The '{0}' attribute is not allowed.</summary>
    internal static string @Sch_ProhibitedAttribute => GetResourceString("Sch_ProhibitedAttribute");
    /// <summary>Circular type reference.</summary>
    internal static string @Sch_TypeCircularRef => GetResourceString("Sch_TypeCircularRef");
    /// <summary>Two distinct members of the attribute uses must not have type definitions which are both xs:ID or are derived from xs:ID.</summary>
    internal static string @Sch_TwoIdAttrUses => GetResourceString("Sch_TwoIdAttrUses");
    /// <summary>It is an error if there is a member of the attribute uses of a type definition with type xs:ID or derived from xs:ID and another attribute with type xs:ID matches an attribute wildcard.</summary>
    internal static string @Sch_AttrUseAndWildId => GetResourceString("Sch_AttrUseAndWildId");
    /// <summary>It is an error if more than one attribute whose type is xs:ID or is derived from xs:ID, matches an attribute wildcard on an element.</summary>
    internal static string @Sch_MoreThanOneWildId => GetResourceString("Sch_MoreThanOneWildId");
    /// <summary>The base type is the final extension.</summary>
    internal static string @Sch_BaseFinalExtension => GetResourceString("Sch_BaseFinalExtension");
    /// <summary>The content type of the base type must be a simple type definition or it must be mixed, and simpleType child must be present.</summary>
    internal static string @Sch_NotSimpleContent => GetResourceString("Sch_NotSimpleContent");
    /// <summary>The content type of the base type must not be a simple type definition.</summary>
    internal static string @Sch_NotComplexContent => GetResourceString("Sch_NotComplexContent");
    /// <summary>The base type is final restriction.</summary>
    internal static string @Sch_BaseFinalRestriction => GetResourceString("Sch_BaseFinalRestriction");
    /// <summary>The base type is the final list.</summary>
    internal static string @Sch_BaseFinalList => GetResourceString("Sch_BaseFinalList");
    /// <summary>The base type is the final union.</summary>
    internal static string @Sch_BaseFinalUnion => GetResourceString("Sch_BaseFinalUnion");
    /// <summary>Undefined complexType '{0}' is used as a base for complex type restriction.</summary>
    internal static string @Sch_UndefBaseRestriction => GetResourceString("Sch_UndefBaseRestriction");
    /// <summary>Undefined complexType '{0}' is used as a base for complex type extension.</summary>
    internal static string @Sch_UndefBaseExtension => GetResourceString("Sch_UndefBaseExtension");
    /// <summary>The derived type and the base type must have the same content type.</summary>
    internal static string @Sch_DifContentType => GetResourceString("Sch_DifContentType");
    /// <summary>Invalid content type derivation by restriction.</summary>
    internal static string @Sch_InvalidContentRestriction => GetResourceString("Sch_InvalidContentRestriction");
    /// <summary>Invalid content type derivation by restriction. {0}</summary>
    internal static string @Sch_InvalidContentRestrictionDetailed => GetResourceString("Sch_InvalidContentRestrictionDetailed");
    /// <summary>If the derived content type is Empty, then the base content type should also be Empty or Mixed with Emptiable particle according to rule 5.3 of Schema Component Constraint: Derivation Valid (Restriction, Complex).</summary>
    internal static string @Sch_InvalidBaseToEmpty => GetResourceString("Sch_InvalidBaseToEmpty");
    /// <summary>If the derived content type is Mixed, then the base content type should also be Mixed according to rule 5.4 of Schema Component Constraint: Derivation Valid (Restriction, Complex).</summary>
    internal static string @Sch_InvalidBaseToMixed => GetResourceString("Sch_InvalidBaseToMixed");
    /// <summary>The attribute '{0}' already exists.</summary>
    internal static string @Sch_DupAttributeUse => GetResourceString("Sch_DupAttributeUse");
    /// <summary>Invalid particle derivation by restriction.</summary>
    internal static string @Sch_InvalidParticleRestriction => GetResourceString("Sch_InvalidParticleRestriction");
    /// <summary>Invalid particle derivation by restriction - '{0}'.</summary>
    internal static string @Sch_InvalidParticleRestrictionDetailed => GetResourceString("Sch_InvalidParticleRestrictionDetailed");
    /// <summary>'Choice' or 'any' is forbidden as derived particle when the base particle is 'all'.</summary>
    internal static string @Sch_ForbiddenDerivedParticleForAll => GetResourceString("Sch_ForbiddenDerivedParticleForAll");
    /// <summary>Only 'element' is valid as derived particle when the base particle is 'element'.</summary>
    internal static string @Sch_ForbiddenDerivedParticleForElem => GetResourceString("Sch_ForbiddenDerivedParticleForElem");
    /// <summary>'All' or 'any' is forbidden as derived particle when the base particle is 'choice'.</summary>
    internal static string @Sch_ForbiddenDerivedParticleForChoice => GetResourceString("Sch_ForbiddenDerivedParticleForChoice");
    /// <summary>'All', 'any', and 'choice' are forbidden as derived particles when the base particle is 'sequence'.</summary>
    internal static string @Sch_ForbiddenDerivedParticleForSeq => GetResourceString("Sch_ForbiddenDerivedParticleForSeq");
    /// <summary>Derived element '{0}' is not a valid restriction of base element '{1}' according to Elt:Elt -- NameAndTypeOK.</summary>
    internal static string @Sch_ElementFromElement => GetResourceString("Sch_ElementFromElement");
    /// <summary>The namespace of element '{0}'is not valid with respect to the wildcard's namespace constraint in the base, Elt:Any -- NSCompat Rule 1.</summary>
    internal static string @Sch_ElementFromAnyRule1 => GetResourceString("Sch_ElementFromAnyRule1");
    /// <summary>The occurrence range of element '{0}'is not a valid restriction of the wildcard's occurrence range in the base, Elt:Any -- NSCompat Rule2.</summary>
    internal static string @Sch_ElementFromAnyRule2 => GetResourceString("Sch_ElementFromAnyRule2");
    /// <summary>The derived wildcard's occurrence range is not a valid restriction of the base wildcard's occurrence range, Any:Any -- NSSubset Rule 1.</summary>
    internal static string @Sch_AnyFromAnyRule1 => GetResourceString("Sch_AnyFromAnyRule1");
    /// <summary>The derived wildcard's namespace constraint must be an intensional subset of the base wildcard's namespace constraint, Any:Any -- NSSubset Rule2.</summary>
    internal static string @Sch_AnyFromAnyRule2 => GetResourceString("Sch_AnyFromAnyRule2");
    /// <summary>The derived wildcard's 'processContents' must be identical to or stronger than the base wildcard's 'processContents', where 'strict' is stronger than 'lax' and 'lax' is stronger than 'skip', Any:Any -- NSSubset Rule 3.</summary>
    internal static string @Sch_AnyFromAnyRule3 => GetResourceString("Sch_AnyFromAnyRule3");
    /// <summary>Every member of the derived group particle must be a valid restriction of the base wildcard, NSRecurseCheckCardinality Rule 1.</summary>
    internal static string @Sch_GroupBaseFromAny1 => GetResourceString("Sch_GroupBaseFromAny1");
    /// <summary>The derived particle's occurrence range at ({0}, {1}) is not a valid restriction of the base wildcard's occurrence range at ({2}, {3}), NSRecurseCheckCardinality Rule 2.</summary>
    internal static string @Sch_GroupBaseFromAny2 => GetResourceString("Sch_GroupBaseFromAny2");
    /// <summary>The derived element {0} at ({1}, {2}) is not a valid restriction of the base sequence particle at ({3}, {4}) according to Elt:All/Choice/Sequence -- RecurseAsIfGroup.</summary>
    internal static string @Sch_ElementFromGroupBase1 => GetResourceString("Sch_ElementFromGroupBase1");
    /// <summary>The derived element {0} at ({1}, {2}) is not a valid restriction of the base choice particle at ({3}, {4}) according to Elt:All/Choice/Sequence -- RecurseAsIfGroup.</summary>
    internal static string @Sch_ElementFromGroupBase2 => GetResourceString("Sch_ElementFromGroupBase2");
    /// <summary>The derived element {0} at ({1}, {2}) is not a valid restriction of the base all particle at ({3}, {4}) according to Elt:All/Choice/Sequence -- RecurseAsIfGroup.</summary>
    internal static string @Sch_ElementFromGroupBase3 => GetResourceString("Sch_ElementFromGroupBase3");
    /// <summary>The derived particle's range is not a valid restriction of the base particle's range according to All:All,Sequence:Sequence -- Recurse Rule 1 or Choice:Choice -- RecurseLax.</summary>
    internal static string @Sch_GroupBaseRestRangeInvalid => GetResourceString("Sch_GroupBaseRestRangeInvalid");
    /// <summary>The derived particle cannot have more members than the base particle - All:All,Sequence:Sequence -- Recurse Rule 2 / Choice:Choice -- RecurseLax.</summary>
    internal static string @Sch_GroupBaseRestNoMap => GetResourceString("Sch_GroupBaseRestNoMap");
    /// <summary>All particles in the particles of the base particle which are not mapped to by any particle in the particles of the derived particle should be emptiable - All:All,Sequence:Sequence -- Recurse Rule 2 / Choice:Choice -- RecurseLax.</summary>
    internal static string @Sch_GroupBaseRestNotEmptiable => GetResourceString("Sch_GroupBaseRestNotEmptiable");
    /// <summary>The derived sequence particle at ({0}, {1}) is not a valid restriction of the base all particle at ({2}, {3}) according to Sequence:All -- RecurseUnordered.</summary>
    internal static string @Sch_SeqFromAll => GetResourceString("Sch_SeqFromAll");
    /// <summary>The derived sequence particle at ({0}, {1}) is not a valid restriction of the base choice particle at ({2}, {3}) according to Sequence:Choice -- MapAndSum.</summary>
    internal static string @Sch_SeqFromChoice => GetResourceString("Sch_SeqFromChoice");
    /// <summary>Reference to undeclared model group '{0}'.</summary>
    internal static string @Sch_UndefGroupRef => GetResourceString("Sch_UndefGroupRef");
    /// <summary>Circular group reference.</summary>
    internal static string @Sch_GroupCircularRef => GetResourceString("Sch_GroupCircularRef");
    /// <summary>The group ref to 'all' is not the root particle, or it is being used as an extension.</summary>
    internal static string @Sch_AllRefNotRoot => GetResourceString("Sch_AllRefNotRoot");
    /// <summary>The group ref to 'all' must have 'minOccurs' = 0 or 1 and 'maxOccurs' = 1.</summary>
    internal static string @Sch_AllRefMinMax => GetResourceString("Sch_AllRefMinMax");
    /// <summary>'all' is not the only particle in a group, or is being used as an extension.</summary>
    internal static string @Sch_NotAllAlone => GetResourceString("Sch_NotAllAlone");
    /// <summary>Circular attribute group reference.</summary>
    internal static string @Sch_AttributeGroupCircularRef => GetResourceString("Sch_AttributeGroupCircularRef");
    /// <summary>Reference to undeclared attribute group '{0}'.</summary>
    internal static string @Sch_UndefAttributeGroupRef => GetResourceString("Sch_UndefAttributeGroupRef");
    /// <summary>Invalid attribute extension.</summary>
    internal static string @Sch_InvalidAttributeExtension => GetResourceString("Sch_InvalidAttributeExtension");
    /// <summary>The base any attribute must be a superset of the derived 'anyAttribute'.</summary>
    internal static string @Sch_InvalidAnyAttributeRestriction => GetResourceString("Sch_InvalidAnyAttributeRestriction");
    /// <summary>Invalid attribute restriction. Attribute restriction is prohibited in base type.</summary>
    internal static string @Sch_AttributeRestrictionProhibited => GetResourceString("Sch_AttributeRestrictionProhibited");
    /// <summary>Invalid attribute restriction. Derived attribute's type is not a valid restriction of the base attribute's type.</summary>
    internal static string @Sch_AttributeRestrictionInvalid => GetResourceString("Sch_AttributeRestrictionInvalid");
    /// <summary>Invalid attribute restriction. Derived attribute's fixed value must be the same as the base attribute's fixed value.</summary>
    internal static string @Sch_AttributeFixedInvalid => GetResourceString("Sch_AttributeFixedInvalid");
    /// <summary>Derived attribute's use has to be required if base attribute's use is required.</summary>
    internal static string @Sch_AttributeUseInvalid => GetResourceString("Sch_AttributeUseInvalid");
    /// <summary>The base type definition must have an attribute wildcard and the target namespace of the attribute declaration in the 'redefine' must be valid with respect to that wildcard.</summary>
    internal static string @Sch_AttributeRestrictionInvalidFromWildcard => GetResourceString("Sch_AttributeRestrictionInvalidFromWildcard");
    /// <summary>The base attribute '{0}' whose use = 'required' does not have a corresponding derived attribute while redefining attribute group '{1}'.</summary>
    internal static string @Sch_NoDerivedAttribute => GetResourceString("Sch_NoDerivedAttribute");
    /// <summary>The 'anyAttribute' is not expressible.</summary>
    internal static string @Sch_UnexpressibleAnyAttribute => GetResourceString("Sch_UnexpressibleAnyAttribute");
    /// <summary>Reference to invalid attribute '{0}'.</summary>
    internal static string @Sch_RefInvalidAttribute => GetResourceString("Sch_RefInvalidAttribute");
    /// <summary>Circular element reference.</summary>
    internal static string @Sch_ElementCircularRef => GetResourceString("Sch_ElementCircularRef");
    /// <summary>Reference to invalid element '{0}'.</summary>
    internal static string @Sch_RefInvalidElement => GetResourceString("Sch_RefInvalidElement");
    /// <summary>Element's type does not allow fixed or default value constraint.</summary>
    internal static string @Sch_ElementCannotHaveValue => GetResourceString("Sch_ElementCannotHaveValue");
    /// <summary>Although the '{0}' element's content type is mixed, it cannot have element children, because it has a fixed value constraint in the schema.</summary>
    internal static string @Sch_ElementInMixedWithFixed => GetResourceString("Sch_ElementInMixedWithFixed");
    /// <summary>Elements with the same name and in the same scope must have the same type.</summary>
    internal static string @Sch_ElementTypeCollision => GetResourceString("Sch_ElementTypeCollision");
    /// <summary>Cannot resolve the 'schemaLocation' attribute.</summary>
    internal static string @Sch_InvalidIncludeLocation => GetResourceString("Sch_InvalidIncludeLocation");
    /// <summary>Cannot load the schema for the namespace '{0}' - {1}</summary>
    internal static string @Sch_CannotLoadSchema => GetResourceString("Sch_CannotLoadSchema");
    /// <summary>Cannot load the schema from the location '{0}' - {1}</summary>
    internal static string @Sch_CannotLoadSchemaLocation => GetResourceString("Sch_CannotLoadSchemaLocation");
    /// <summary>It is an error if 'length' is among the members of the facets of the base type definition and its value is greater than the value of the parent 'length'.</summary>
    internal static string @Sch_LengthGtBaseLength => GetResourceString("Sch_LengthGtBaseLength");
    /// <summary>It is an error if 'minLength' is among the members of the facets of the base type definition and its value is less than the value of the parent 'minLength'.</summary>
    internal static string @Sch_MinLengthGtBaseMinLength => GetResourceString("Sch_MinLengthGtBaseMinLength");
    /// <summary>It is an error if 'maxLength' is among the members of the facets of the base type definition and its value is greater than the value of the parent 'maxLength'.</summary>
    internal static string @Sch_MaxLengthGtBaseMaxLength => GetResourceString("Sch_MaxLengthGtBaseMaxLength");
    /// <summary>It is an error for both 'length' and either 'minLength' or 'maxLength' to be members of facets, unless they are specified in different derivation steps. In which case the following must be true: the value of 'minLength' &lt;= the value of 'length' &lt;= the valu ...</summary>
    internal static string @Sch_MaxMinLengthBaseLength => GetResourceString("Sch_MaxMinLengthBaseLength");
    /// <summary>It is an error if the derived 'maxInclusive' facet value is greater than the parent 'maxInclusive' facet value.</summary>
    internal static string @Sch_MaxInclusiveMismatch => GetResourceString("Sch_MaxInclusiveMismatch");
    /// <summary>It is an error if the derived 'maxExclusive' facet value is greater than the parent 'maxExclusive' facet value.</summary>
    internal static string @Sch_MaxExclusiveMismatch => GetResourceString("Sch_MaxExclusiveMismatch");
    /// <summary>It is an error if the derived 'minInclusive' facet value is less than the parent 'minInclusive' facet value.</summary>
    internal static string @Sch_MinInclusiveMismatch => GetResourceString("Sch_MinInclusiveMismatch");
    /// <summary>It is an error if the derived 'minExclusive' facet value is less than the parent 'minExclusive' facet value.</summary>
    internal static string @Sch_MinExclusiveMismatch => GetResourceString("Sch_MinExclusiveMismatch");
    /// <summary>It is an error if the derived 'minExclusive' facet value is less than or equal to the parent 'minInclusive' facet value.</summary>
    internal static string @Sch_MinExlIncMismatch => GetResourceString("Sch_MinExlIncMismatch");
    /// <summary>It is an error if the derived 'minExclusive' facet value is greater than or equal to the parent 'maxExclusive' facet value.</summary>
    internal static string @Sch_MinExlMaxExlMismatch => GetResourceString("Sch_MinExlMaxExlMismatch");
    /// <summary>It is an error if the derived 'minInclusive' facet value is greater than or equal to the parent 'maxExclusive' facet value.</summary>
    internal static string @Sch_MinIncMaxExlMismatch => GetResourceString("Sch_MinIncMaxExlMismatch");
    /// <summary>It is an error if the derived 'minInclusive' facet value is less than or equal to the parent 'minExclusive' facet value.</summary>
    internal static string @Sch_MinIncExlMismatch => GetResourceString("Sch_MinIncExlMismatch");
    /// <summary>It is an error if the derived 'maxInclusive' facet value is greater than or equal to the parent 'maxExclusive' facet value.</summary>
    internal static string @Sch_MaxIncExlMismatch => GetResourceString("Sch_MaxIncExlMismatch");
    /// <summary>It is an error if the derived 'maxExclusive' facet value is greater than or equal to the parent 'maxInclusive' facet value.</summary>
    internal static string @Sch_MaxExlIncMismatch => GetResourceString("Sch_MaxExlIncMismatch");
    /// <summary>It is an error if the derived 'totalDigits' facet value is greater than the parent 'totalDigits' facet value.</summary>
    internal static string @Sch_TotalDigitsMismatch => GetResourceString("Sch_TotalDigitsMismatch");
    /// <summary>It is an error if the derived 'fractionDigits' facet value is greater than the parent 'fractionDigits' facet value.</summary>
    internal static string @Sch_FractionDigitsMismatch => GetResourceString("Sch_FractionDigitsMismatch");
    /// <summary>Values that are declared with fixed='true' in a base type can not be changed in a derived type.</summary>
    internal static string @Sch_FacetBaseFixed => GetResourceString("Sch_FacetBaseFixed");
    /// <summary>It is an error if 'whiteSpace' is among the facets of the type definition, its value is 'replace' or 'preserve', and the value of the parent 'whiteSpace' is 'collapse'.</summary>
    internal static string @Sch_WhiteSpaceRestriction1 => GetResourceString("Sch_WhiteSpaceRestriction1");
    /// <summary>It is an error if 'whiteSpace' is among the facets of the type definition, its value is 'preserve', and the value of the parent 'whiteSpace' is 'replace'.</summary>
    internal static string @Sch_WhiteSpaceRestriction2 => GetResourceString("Sch_WhiteSpaceRestriction2");
    /// <summary>There must be no fixed value when an attribute is 'xsi:nil' and has a value of 'true'.</summary>
    internal static string @Sch_XsiNilAndFixed => GetResourceString("Sch_XsiNilAndFixed");
    /// <summary>Different schema types cannot be mixed.</summary>
    internal static string @Sch_MixSchemaTypes => GetResourceString("Sch_MixSchemaTypes");
    /// <summary>'XmlSchemaSet' can load only W3C XML Schemas.</summary>
    internal static string @Sch_XSDSchemaOnly => GetResourceString("Sch_XSDSchemaOnly");
    /// <summary>Public attribute '{0}' is an invalid URI.</summary>
    internal static string @Sch_InvalidPublicAttribute => GetResourceString("Sch_InvalidPublicAttribute");
    /// <summary>System attribute '{0}' is an invalid URI.</summary>
    internal static string @Sch_InvalidSystemAttribute => GetResourceString("Sch_InvalidSystemAttribute");
    /// <summary>'simpleType' or 'complexType' cannot follow 'unique', 'key' or 'keyref'.</summary>
    internal static string @Sch_TypeAfterConstraints => GetResourceString("Sch_TypeAfterConstraints");
    /// <summary>There can be no type value when attribute is 'xsi:nil' and has value 'true'.</summary>
    internal static string @Sch_XsiNilAndType => GetResourceString("Sch_XsiNilAndType");
    /// <summary>'simpleType' should have only one child 'union', 'list', or 'restriction'.</summary>
    internal static string @Sch_DupSimpleTypeChild => GetResourceString("Sch_DupSimpleTypeChild");
    /// <summary>Invalid 'id' attribute value: {0}</summary>
    internal static string @Sch_InvalidIdAttribute => GetResourceString("Sch_InvalidIdAttribute");
    /// <summary>Invalid 'name' attribute value '{0}': '{1}'.</summary>
    internal static string @Sch_InvalidNameAttributeEx => GetResourceString("Sch_InvalidNameAttributeEx");
    /// <summary>Invalid '{0}' attribute: '{1}'.</summary>
    internal static string @Sch_InvalidAttribute => GetResourceString("Sch_InvalidAttribute");
    /// <summary>Empty choice cannot be satisfied if 'minOccurs' is not equal to 0.</summary>
    internal static string @Sch_EmptyChoice => GetResourceString("Sch_EmptyChoice");
    /// <summary>The data type of the simple content is not a valid restriction of the base complex type.</summary>
    internal static string @Sch_DerivedNotFromBase => GetResourceString("Sch_DerivedNotFromBase");
    /// <summary>Simple content restriction must have a simple type child if the content type of the base type is not a simple type definition.</summary>
    internal static string @Sch_NeedSimpleTypeChild => GetResourceString("Sch_NeedSimpleTypeChild");
    /// <summary>The schema items collection cannot contain an object of type 'XmlSchemaInclude', 'XmlSchemaImport', or 'XmlSchemaRedefine'.</summary>
    internal static string @Sch_InvalidCollection => GetResourceString("Sch_InvalidCollection");
    /// <summary>Namespace '{0}' is not available to be referenced in this schema.</summary>
    internal static string @Sch_UnrefNS => GetResourceString("Sch_UnrefNS");
    /// <summary>Restriction of 'anySimpleType' is not allowed.</summary>
    internal static string @Sch_InvalidSimpleTypeRestriction => GetResourceString("Sch_InvalidSimpleTypeRestriction");
    /// <summary>Multiple redefines of the same schema will be ignored.</summary>
    internal static string @Sch_MultipleRedefine => GetResourceString("Sch_MultipleRedefine");
    /// <summary>Value cannot be null.</summary>
    internal static string @Sch_NullValue => GetResourceString("Sch_NullValue");
    /// <summary>Content model validation resulted in a large number of states, possibly due to large occurrence ranges. Therefore, content model may not be validated accurately.</summary>
    internal static string @Sch_ComplexContentModel => GetResourceString("Sch_ComplexContentModel");
    /// <summary>All schemas in the set should be successfully preprocessed prior to compilation.</summary>
    internal static string @Sch_SchemaNotPreprocessed => GetResourceString("Sch_SchemaNotPreprocessed");
    /// <summary>The schema could not be removed because other schemas in the set have dependencies on this schema or its imports.</summary>
    internal static string @Sch_SchemaNotRemoved => GetResourceString("Sch_SchemaNotRemoved");
    /// <summary>An element or attribute information item has already been validated from the '{0}' namespace. It is an error if 'xsi:schemaLocation', 'xsi:noNamespaceSchemaLocation', or an inline schema occurs for that namespace.</summary>
    internal static string @Sch_ComponentAlreadySeenForNS => GetResourceString("Sch_ComponentAlreadySeenForNS");
    /// <summary>Default attribute '{0}' for element '{1}' could not be applied as the attribute namespace is not mapped to a prefix in the instance document.</summary>
    internal static string @Sch_DefaultAttributeNotApplied => GetResourceString("Sch_DefaultAttributeNotApplied");
    /// <summary>The attribute '{0}' does not match one of the four allowed attributes in the 'xsi' namespace.</summary>
    internal static string @Sch_NotXsiAttribute => GetResourceString("Sch_NotXsiAttribute");
    /// <summary>Schema does not exist in the set.</summary>
    internal static string @Sch_SchemaDoesNotExist => GetResourceString("Sch_SchemaDoesNotExist");
    /// <summary>Validate method can be called only on nodes of type Document, DocumentFragment, Element, or Attribute.</summary>
    internal static string @XmlDocument_ValidateInvalidNodeType => GetResourceString("XmlDocument_ValidateInvalidNodeType");
    /// <summary>Cannot validate '{0}' because its owner document is not the current document.</summary>
    internal static string @XmlDocument_NodeNotFromDocument => GetResourceString("XmlDocument_NodeNotFromDocument");
    /// <summary>Schema information could not be found for the node passed into Validate. The node may be invalid in its current position. Navigate to the ancestor that has schema information, then call Validate again.</summary>
    internal static string @XmlDocument_NoNodeSchemaInfo => GetResourceString("XmlDocument_NoNodeSchemaInfo");
    /// <summary>The XmlSchemaSet on the document is either null or has no schemas in it. Provide schema information before calling Validate.</summary>
    internal static string @XmlDocument_NoSchemaInfo => GetResourceString("XmlDocument_NoSchemaInfo");
    /// <summary>It is invalid to call the '{0}' method in the current state of the validator. The '{1}' method must be called before proceeding with validation.</summary>
    internal static string @Sch_InvalidStartTransition => GetResourceString("Sch_InvalidStartTransition");
    /// <summary>The transition from the '{0}' method to the '{1}' method is not allowed.</summary>
    internal static string @Sch_InvalidStateTransition => GetResourceString("Sch_InvalidStateTransition");
    /// <summary>The 'EndValidation' method cannot not be called when all the elements have not been validated. 'ValidateEndElement' calls corresponding to 'ValidateElement' calls might be missing.</summary>
    internal static string @Sch_InvalidEndValidation => GetResourceString("Sch_InvalidEndValidation");
    /// <summary>It is invalid to call the 'ValidateEndElement' overload that takes in a 'typedValue' after 'ValidateText' or 'ValidateWhitespace' methods have been called.</summary>
    internal static string @Sch_InvalidEndElementCall => GetResourceString("Sch_InvalidEndElementCall");
    /// <summary>It is invalid to call the 'ValidateEndElement' overload that takes in a 'typedValue' for elements with complex content.</summary>
    internal static string @Sch_InvalidEndElementCallTyped => GetResourceString("Sch_InvalidEndElementCallTyped");
    /// <summary>The call to the '{0}' method does not match a corresponding call to 'ValidateElement' method.</summary>
    internal static string @Sch_InvalidEndElementMultiple => GetResourceString("Sch_InvalidEndElementMultiple");
    /// <summary>The '{0}' attribute has already been validated and is a duplicate attribute.</summary>
    internal static string @Sch_DuplicateAttribute => GetResourceString("Sch_DuplicateAttribute");
    /// <summary>The partial validation type has to be 'XmlSchemaElement', 'XmlSchemaAttribute', or 'XmlSchemaType'.</summary>
    internal static string @Sch_InvalidPartialValidationType => GetResourceString("Sch_InvalidPartialValidationType");
    /// <summary>The element name '{0}' does not match the name '{1}' of the 'XmlSchemaElement' set as a partial validation type.</summary>
    internal static string @Sch_SchemaElementNameMismatch => GetResourceString("Sch_SchemaElementNameMismatch");
    /// <summary>The attribute name '{0}' does not match the name '{1}' of the 'XmlSchemaAttribute' set as a partial validation type.</summary>
    internal static string @Sch_SchemaAttributeNameMismatch => GetResourceString("Sch_SchemaAttributeNameMismatch");
    /// <summary>If the partial validation type is 'XmlSchemaElement' or 'XmlSchemaType', the 'ValidateAttribute' method cannot be called.</summary>
    internal static string @Sch_ValidateAttributeInvalidCall => GetResourceString("Sch_ValidateAttributeInvalidCall");
    /// <summary>If the partial validation type is 'XmlSchemaAttribute', the 'ValidateElement' method cannot be called.</summary>
    internal static string @Sch_ValidateElementInvalidCall => GetResourceString("Sch_ValidateElementInvalidCall");
    /// <summary>Enumeration has not started. Call MoveNext.</summary>
    internal static string @Sch_EnumNotStarted => GetResourceString("Sch_EnumNotStarted");
    /// <summary>Enumeration has already finished.</summary>
    internal static string @Sch_EnumFinished => GetResourceString("Sch_EnumFinished");
    /// <summary>The supplied xml instance is a schema or contains an inline schema. This class cannot infer a schema for a schema.</summary>
    internal static string @SchInf_schema => GetResourceString("SchInf_schema");
    /// <summary>Inference cannot handle entity references. Pass in an 'XmlReader' that expands entities.</summary>
    internal static string @SchInf_entity => GetResourceString("SchInf_entity");
    /// <summary>Expected simple content. Schema was not created using this tool.</summary>
    internal static string @SchInf_simplecontent => GetResourceString("SchInf_simplecontent");
    /// <summary>Expected 'Extension' within 'SimpleContent'. Schema was not created using this tool.</summary>
    internal static string @SchInf_extension => GetResourceString("SchInf_extension");
    /// <summary>Particle cannot exist along with 'ContentModel'.</summary>
    internal static string @SchInf_particle => GetResourceString("SchInf_particle");
    /// <summary>Complex type expected to exist with at least one 'Element' at this point.</summary>
    internal static string @SchInf_ct => GetResourceString("SchInf_ct");
    /// <summary>sequence expected to contain elements only. Schema was not created using this tool.</summary>
    internal static string @SchInf_seq => GetResourceString("SchInf_seq");
    /// <summary>The supplied schema contains particles other than Sequence and Choice. Only schemas generated by this tool are supported.</summary>
    internal static string @SchInf_noseq => GetResourceString("SchInf_noseq");
    /// <summary>Expected ComplexType. Schema was not generated using this tool.</summary>
    internal static string @SchInf_noct => GetResourceString("SchInf_noct");
    /// <summary>Expected Element. Schema was not generated using this tool.</summary>
    internal static string @SchInf_UnknownParticle => GetResourceString("SchInf_UnknownParticle");
    /// <summary>Inference can only handle simple built-in types for 'SchemaType'.</summary>
    internal static string @SchInf_schematype => GetResourceString("SchInf_schematype");
    /// <summary>There is no element to infer schema.</summary>
    internal static string @SchInf_NoElement => GetResourceString("SchInf_NoElement");
    /// <summary>This is an unclosed string.</summary>
    internal static string @Xp_UnclosedString => GetResourceString("Xp_UnclosedString");
    /// <summary>'{0}' is an invalid expression.</summary>
    internal static string @Xp_ExprExpected => GetResourceString("Xp_ExprExpected");
    /// <summary>The argument to function '{0}' in '{1}' cannot be converted to a node-set.</summary>
    internal static string @Xp_InvalidArgumentType => GetResourceString("Xp_InvalidArgumentType");
    /// <summary>Function '{0}' in '{1}' has an invalid number of arguments.</summary>
    internal static string @Xp_InvalidNumArgs => GetResourceString("Xp_InvalidNumArgs");
    /// <summary>'{0}' has an invalid qualified name.</summary>
    internal static string @Xp_InvalidName => GetResourceString("Xp_InvalidName");
    /// <summary>'{0}' has an invalid token.</summary>
    internal static string @Xp_InvalidToken => GetResourceString("Xp_InvalidToken");
    /// <summary>Expression must evaluate to a node-set.</summary>
    internal static string @Xp_NodeSetExpected => GetResourceString("Xp_NodeSetExpected");
    /// <summary>The XPath query '{0}' is not supported.</summary>
    internal static string @Xp_NotSupported => GetResourceString("Xp_NotSupported");
    /// <summary>'{0}' is an invalid XSLT pattern.</summary>
    internal static string @Xp_InvalidPattern => GetResourceString("Xp_InvalidPattern");
    /// <summary>'{0}' is an invalid key pattern. It either contains a variable reference or 'key()' function.</summary>
    internal static string @Xp_InvalidKeyPattern => GetResourceString("Xp_InvalidKeyPattern");
    /// <summary>This is an invalid object. Only objects returned from Compile() can be passed as input.</summary>
    internal static string @Xp_BadQueryObject => GetResourceString("Xp_BadQueryObject");
    /// <summary>XsltContext is needed for this query because of an unknown function.</summary>
    internal static string @Xp_UndefinedXsltContext => GetResourceString("Xp_UndefinedXsltContext");
    /// <summary>Namespace Manager or XsltContext needed. This query has a prefix, variable, or user-defined function.</summary>
    internal static string @Xp_NoContext => GetResourceString("Xp_NoContext");
    /// <summary>The variable '{0}' is undefined.</summary>
    internal static string @Xp_UndefVar => GetResourceString("Xp_UndefVar");
    /// <summary>The function '{0}()' is undefined.</summary>
    internal static string @Xp_UndefFunc => GetResourceString("Xp_UndefFunc");
    /// <summary>Function '{0}()' has failed.</summary>
    internal static string @Xp_FunctionFailed => GetResourceString("Xp_FunctionFailed");
    /// <summary>The 'current()' function cannot be used in a pattern.</summary>
    internal static string @Xp_CurrentNotAllowed => GetResourceString("Xp_CurrentNotAllowed");
    /// <summary>The xpath query is too complex.</summary>
    internal static string @Xp_QueryTooComplex => GetResourceString("Xp_QueryTooComplex");
    /// <summary>This document already has a 'DocumentType' node.</summary>
    internal static string @Xdom_DualDocumentTypeNode => GetResourceString("Xdom_DualDocumentTypeNode");
    /// <summary>This document already has a 'DocumentElement' node.</summary>
    internal static string @Xdom_DualDocumentElementNode => GetResourceString("Xdom_DualDocumentElementNode");
    /// <summary>This document already has an 'XmlDeclaration' node.</summary>
    internal static string @Xdom_DualDeclarationNode => GetResourceString("Xdom_DualDeclarationNode");
    /// <summary>Cannot import nodes of type '{0}'.</summary>
    internal static string @Xdom_Import => GetResourceString("Xdom_Import");
    /// <summary>Cannot import a null node.</summary>
    internal static string @Xdom_Import_NullNode => GetResourceString("Xdom_Import_NullNode");
    /// <summary>The document does not have a root element.</summary>
    internal static string @Xdom_NoRootEle => GetResourceString("Xdom_NoRootEle");
    /// <summary>The attribute local name cannot be empty.</summary>
    internal static string @Xdom_Attr_Name => GetResourceString("Xdom_Attr_Name");
    /// <summary>An 'Attributes' collection can only contain 'Attribute' objects.</summary>
    internal static string @Xdom_AttrCol_Object => GetResourceString("Xdom_AttrCol_Object");
    /// <summary>The reference node must be a child of the current node.</summary>
    internal static string @Xdom_AttrCol_Insert => GetResourceString("Xdom_AttrCol_Insert");
    /// <summary>The named node is from a different document context.</summary>
    internal static string @Xdom_NamedNode_Context => GetResourceString("Xdom_NamedNode_Context");
    /// <summary>Wrong XML version information. The XML must match production "VersionNum ::= '1.' [0-9]+".</summary>
    internal static string @Xdom_Version => GetResourceString("Xdom_Version");
    /// <summary>Wrong value for the XML declaration standalone attribute of '{0}'.</summary>
    internal static string @Xdom_standalone => GetResourceString("Xdom_standalone");
    /// <summary>The 'InnerText' of an 'Entity' node is read-only and cannot be set.</summary>
    internal static string @Xdom_Ent_Innertext => GetResourceString("Xdom_Ent_Innertext");
    /// <summary>'EntityReference' nodes have no support for setting value.</summary>
    internal static string @Xdom_EntRef_SetVal => GetResourceString("Xdom_EntRef_SetVal");
    /// <summary>The string for whitespace contains an invalid character.</summary>
    internal static string @Xdom_WS_Char => GetResourceString("Xdom_WS_Char");
    /// <summary>Cannot set a value on node type '{0}'.</summary>
    internal static string @Xdom_Node_SetVal => GetResourceString("Xdom_Node_SetVal");
    /// <summary>The local name for elements or attributes cannot be null or an empty string.</summary>
    internal static string @Xdom_Empty_LocalName => GetResourceString("Xdom_Empty_LocalName");
    /// <summary>Cannot set the 'InnerXml' for the current node because it is either read-only or cannot have children.</summary>
    internal static string @Xdom_Set_InnerXml => GetResourceString("Xdom_Set_InnerXml");
    /// <summary>The 'Attribute' node cannot be inserted because it is already an attribute of another element.</summary>
    internal static string @Xdom_Attr_InUse => GetResourceString("Xdom_Attr_InUse");
    /// <summary>The element list has changed. The enumeration operation failed to continue.</summary>
    internal static string @Xdom_Enum_ElementList => GetResourceString("Xdom_Enum_ElementList");
    /// <summary>'{0}' does not represent any 'XmlNodeType'.</summary>
    internal static string @Xdom_Invalid_NT_String => GetResourceString("Xdom_Invalid_NT_String");
    /// <summary>Cannot create an 'EntityReference' node with a name starting with '#'.</summary>
    internal static string @Xdom_InvalidCharacter_EntityReference => GetResourceString("Xdom_InvalidCharacter_EntityReference");
    /// <summary>The index being passed in is out of range.</summary>
    internal static string @Xdom_IndexOutOfRange => GetResourceString("Xdom_IndexOutOfRange");
    /// <summary>The 'InnerText' of a 'Document' node is read-only and cannot be set.</summary>
    internal static string @Xdom_Document_Innertext => GetResourceString("Xdom_Document_Innertext");
    /// <summary>Operation is not valid due to the current position of the navigator.</summary>
    internal static string @Xpn_BadPosition => GetResourceString("Xpn_BadPosition");
    /// <summary>The current position of the navigator is missing a valid parent.</summary>
    internal static string @Xpn_MissingParent => GetResourceString("Xpn_MissingParent");
    /// <summary>No content generated as the result of the operation.</summary>
    internal static string @Xpn_NoContent => GetResourceString("Xpn_NoContent");
    /// <summary>The document to be loaded could not be found.</summary>
    internal static string @Xdom_Load_NoDocument => GetResourceString("Xdom_Load_NoDocument");
    /// <summary>There is no reader from which to load the document.</summary>
    internal static string @Xdom_Load_NoReader => GetResourceString("Xdom_Load_NoReader");
    /// <summary>Cannot create a node without an owner document.</summary>
    internal static string @Xdom_Node_Null_Doc => GetResourceString("Xdom_Node_Null_Doc");
    /// <summary>Cannot insert a node or any ancestor of that node as a child of itself.</summary>
    internal static string @Xdom_Node_Insert_Child => GetResourceString("Xdom_Node_Insert_Child");
    /// <summary>The current node cannot contain other nodes.</summary>
    internal static string @Xdom_Node_Insert_Contain => GetResourceString("Xdom_Node_Insert_Contain");
    /// <summary>The reference node is not a child of this node.</summary>
    internal static string @Xdom_Node_Insert_Path => GetResourceString("Xdom_Node_Insert_Path");
    /// <summary>The node to be inserted is from a different document context.</summary>
    internal static string @Xdom_Node_Insert_Context => GetResourceString("Xdom_Node_Insert_Context");
    /// <summary>Cannot insert the node in the specified location.</summary>
    internal static string @Xdom_Node_Insert_Location => GetResourceString("Xdom_Node_Insert_Location");
    /// <summary>The specified node cannot be inserted as the valid child of this node, because the specified node is the wrong type.</summary>
    internal static string @Xdom_Node_Insert_TypeConflict => GetResourceString("Xdom_Node_Insert_TypeConflict");
    /// <summary>The current node cannot contain other nodes, so the node to be removed is not its child.</summary>
    internal static string @Xdom_Node_Remove_Contain => GetResourceString("Xdom_Node_Remove_Contain");
    /// <summary>The node to be removed is not a child of this node.</summary>
    internal static string @Xdom_Node_Remove_Child => GetResourceString("Xdom_Node_Remove_Child");
    /// <summary>This node is read-only. It cannot be modified.</summary>
    internal static string @Xdom_Node_Modify_ReadOnly => GetResourceString("Xdom_Node_Modify_ReadOnly");
    /// <summary>The 'Text' node is not connected in the DOM live tree. No 'SplitText' operation could be performed.</summary>
    internal static string @Xdom_TextNode_SplitText => GetResourceString("Xdom_TextNode_SplitText");
    /// <summary>The namespace declaration attribute has an incorrect 'namespaceURI': '{0}'.</summary>
    internal static string @Xdom_Attr_Reserved_XmlNS => GetResourceString("Xdom_Attr_Reserved_XmlNS");
    /// <summary>'Entity' and 'Notation' nodes cannot be cloned.</summary>
    internal static string @Xdom_Node_Cloning => GetResourceString("Xdom_Node_Cloning");
    /// <summary>The node is not an expandable 'EntityReference' node.</summary>
    internal static string @Xnr_ResolveEntity => GetResourceString("Xnr_ResolveEntity");
    /// <summary>An XmlSchemaSet must be provided to validate the document.</summary>
    internal static string @XPathDocument_MissingSchemas => GetResourceString("XPathDocument_MissingSchemas");
    /// <summary>Element should have prior schema information to call this method.</summary>
    internal static string @XPathDocument_NotEnoughSchemaInfo => GetResourceString("XPathDocument_NotEnoughSchemaInfo");
    /// <summary>Validate and CheckValidity are only allowed on Root or Element nodes.</summary>
    internal static string @XPathDocument_ValidateInvalidNodeType => GetResourceString("XPathDocument_ValidateInvalidNodeType");
    /// <summary>An XmlSchemaSet is only allowed as a parameter on the Root node.</summary>
    internal static string @XPathDocument_SchemaSetNotAllowed => GetResourceString("XPathDocument_SchemaSetNotAllowed");
    /// <summary>CDATA end token is missing.</summary>
    internal static string @XmlBin_MissingEndCDATA => GetResourceString("XmlBin_MissingEndCDATA");
    /// <summary>Invalid QName ID.</summary>
    internal static string @XmlBin_InvalidQNameID => GetResourceString("XmlBin_InvalidQNameID");
    /// <summary>Unexpected BinaryXml token.</summary>
    internal static string @XmlBinary_UnexpectedToken => GetResourceString("XmlBinary_UnexpectedToken");
    /// <summary>Unable to parse data as SQL_DECIMAL.</summary>
    internal static string @XmlBinary_InvalidSqlDecimal => GetResourceString("XmlBinary_InvalidSqlDecimal");
    /// <summary>Invalid BinaryXml signature.</summary>
    internal static string @XmlBinary_InvalidSignature => GetResourceString("XmlBinary_InvalidSignature");
    /// <summary>Invalid BinaryXml protocol version.</summary>
    internal static string @XmlBinary_InvalidProtocolVersion => GetResourceString("XmlBinary_InvalidProtocolVersion");
    /// <summary>Unsupported BinaryXml codepage.</summary>
    internal static string @XmlBinary_UnsupportedCodePage => GetResourceString("XmlBinary_UnsupportedCodePage");
    /// <summary>Invalid BinaryXml standalone token.</summary>
    internal static string @XmlBinary_InvalidStandalone => GetResourceString("XmlBinary_InvalidStandalone");
    /// <summary>BinaryXml Parser does not support initialization with XmlParserContext.</summary>
    internal static string @XmlBinary_NoParserContext => GetResourceString("XmlBinary_NoParserContext");
    /// <summary>Lists of BinaryXml value tokens not supported.</summary>
    internal static string @XmlBinary_ListsOfValuesNotSupported => GetResourceString("XmlBinary_ListsOfValuesNotSupported");
    /// <summary>Token '{0}' does not support a conversion to Clr type '{1}'.</summary>
    internal static string @XmlBinary_CastNotSupported => GetResourceString("XmlBinary_CastNotSupported");
    /// <summary>Prefix '{0}' is already assigned to namespace '{1}' and cannot be reassigned to '{2}' on this tag.</summary>
    internal static string @XmlBinary_NoRemapPrefix => GetResourceString("XmlBinary_NoRemapPrefix");
    /// <summary>Attribute '{0}' has namespace '{1}' but no prefix.</summary>
    internal static string @XmlBinary_AttrWithNsNoPrefix => GetResourceString("XmlBinary_AttrWithNsNoPrefix");
    /// <summary>The value is too big to fit into an Int32. The arithmetic operation resulted in an overflow.</summary>
    internal static string @XmlBinary_ValueTooBig => GetResourceString("XmlBinary_ValueTooBig");
    /// <summary>Arithmetic Overflow.</summary>
    internal static string @SqlTypes_ArithOverflow => GetResourceString("SqlTypes_ArithOverflow");
    /// <summary>Invalid serialization assembly: Required type {0} cannot be found in the generated assembly '{1}'.</summary>
    internal static string @XmlMissingType => GetResourceString("XmlMissingType");
    /// <summary>{0} is an unsupported type. Please use [XmlIgnore] attribute to exclude members of this type from serialization graph.</summary>
    internal static string @XmlSerializerUnsupportedType => GetResourceString("XmlSerializerUnsupportedType");
    /// <summary>Cannot serialize member '{0}' of type '{1}', see inner exception for more details.</summary>
    internal static string @XmlSerializerUnsupportedMember => GetResourceString("XmlSerializerUnsupportedMember");
    /// <summary>The type {0} may not be serialized.</summary>
    internal static string @XmlUnsupportedTypeKind => GetResourceString("XmlUnsupportedTypeKind");
    /// <summary>The type {0} may not be serialized with SOAP-encoded messages. Set the Use for your message to Literal.</summary>
    internal static string @XmlUnsupportedSoapTypeKind => GetResourceString("XmlUnsupportedSoapTypeKind");
    /// <summary>The type {0} is not supported because it implements IDictionary.</summary>
    internal static string @XmlUnsupportedIDictionary => GetResourceString("XmlUnsupportedIDictionary");
    /// <summary>Cannot serialize member {0} of type {1}, because it implements IDictionary.</summary>
    internal static string @XmlUnsupportedIDictionaryDetails => GetResourceString("XmlUnsupportedIDictionaryDetails");
    /// <summary>A type with the name {0} has already been added in namespace {1}.</summary>
    internal static string @XmlDuplicateTypeName => GetResourceString("XmlDuplicateTypeName");
    /// <summary>Schema Id is missing. The schema returned from {0}.GetSchema() must have an Id.</summary>
    internal static string @XmlSerializableNameMissing1 => GetResourceString("XmlSerializableNameMissing1");
    /// <summary>{0} cannot be serialized because it does not have a parameterless constructor.</summary>
    internal static string @XmlConstructorInaccessible => GetResourceString("XmlConstructorInaccessible");
    /// <summary>{0} is inaccessible due to its protection level. Only public types can be processed.</summary>
    internal static string @XmlTypeInaccessible => GetResourceString("XmlTypeInaccessible");
    /// <summary>{0} cannot be serialized. Static types cannot be used as parameters or return types.</summary>
    internal static string @XmlTypeStatic => GetResourceString("XmlTypeStatic");
    /// <summary>You must implement a default accessor on {0} because it inherits from ICollection.</summary>
    internal static string @XmlNoDefaultAccessors => GetResourceString("XmlNoDefaultAccessors");
    /// <summary>To be XML serializable, types which inherit from {2} must have an implementation of Add({1}) at all levels of their inheritance hierarchy. {0} does not implement Add({1}).</summary>
    internal static string @XmlNoAddMethod => GetResourceString("XmlNoAddMethod");
    /// <summary>Cannot deserialize type '{0}' because it contains property '{1}' which has no public setter.</summary>
    internal static string @XmlReadOnlyPropertyError => GetResourceString("XmlReadOnlyPropertyError");
    /// <summary>'{0}.{1}' already has attributes.</summary>
    internal static string @XmlAttributeSetAgain => GetResourceString("XmlAttributeSetAgain");
    /// <summary>Cannot use wildcards at the top level of a schema.</summary>
    internal static string @XmlIllegalWildcard => GetResourceString("XmlIllegalWildcard");
    /// <summary>An element declared at the top level of a schema cannot have maxOccurs &gt; 1. Provide a wrapper element for '{0}' by using XmlArray or XmlArrayItem instead of XmlElementAttribute, or by using the Wrapped parameter style.</summary>
    internal static string @XmlIllegalArrayElement => GetResourceString("XmlIllegalArrayElement");
    /// <summary>There was an error exporting '{0}': elements declared at the top level of a schema cannot be unqualified.</summary>
    internal static string @XmlIllegalForm => GetResourceString("XmlIllegalForm");
    /// <summary>There was an error exporting '{0}': bare members cannot contain text content.</summary>
    internal static string @XmlBareTextMember => GetResourceString("XmlBareTextMember");
    /// <summary>There was an error exporting '{0}': bare members cannot be attributes.</summary>
    internal static string @XmlBareAttributeMember => GetResourceString("XmlBareAttributeMember");
    /// <summary>There was an error reflecting '{0}'.</summary>
    internal static string @XmlReflectionError => GetResourceString("XmlReflectionError");
    /// <summary>There was an error reflecting type '{0}'.</summary>
    internal static string @XmlTypeReflectionError => GetResourceString("XmlTypeReflectionError");
    /// <summary>There was an error reflecting property '{0}'.</summary>
    internal static string @XmlPropertyReflectionError => GetResourceString("XmlPropertyReflectionError");
    /// <summary>There was an error reflecting field '{0}'.</summary>
    internal static string @XmlFieldReflectionError => GetResourceString("XmlFieldReflectionError");
    /// <summary>'{0}' is an invalid value for the {1} property. The property may only be specified for primitive types.</summary>
    internal static string @XmlInvalidDataTypeUsage => GetResourceString("XmlInvalidDataTypeUsage");
    /// <summary>Value '{0}' cannot be used for the {1} property. The datatype '{2}' is missing.</summary>
    internal static string @XmlInvalidXsdDataType => GetResourceString("XmlInvalidXsdDataType");
    /// <summary>'{0}' is an invalid value for the {1} property. {0} cannot be converted to {2}.</summary>
    internal static string @XmlDataTypeMismatch => GetResourceString("XmlDataTypeMismatch");
    /// <summary>{0} cannot be used as: 'xml {1}'.</summary>
    internal static string @XmlIllegalTypeContext => GetResourceString("XmlIllegalTypeContext");
    /// <summary>The type, {0}, is undeclared.</summary>
    internal static string @XmlUdeclaredXsdType => GetResourceString("XmlUdeclaredXsdType");
    /// <summary>Only XmlEnum may be used on enumerated constants.</summary>
    internal static string @XmlInvalidConstantAttribute => GetResourceString("XmlInvalidConstantAttribute");
    /// <summary>XmlAttribute and XmlAnyAttribute cannot be used in conjunction with XmlElement, XmlText, XmlAnyElement, XmlArray, or XmlArrayItem.</summary>
    internal static string @XmlIllegalAttributesArrayAttribute => GetResourceString("XmlIllegalAttributesArrayAttribute");
    /// <summary>XmlElement, XmlText, and XmlAnyElement cannot be used in conjunction with XmlAttribute, XmlAnyAttribute, XmlArray, or XmlArrayItem.</summary>
    internal static string @XmlIllegalElementsArrayAttribute => GetResourceString("XmlIllegalElementsArrayAttribute");
    /// <summary>XmlArray and XmlArrayItem cannot be used in conjunction with XmlAttribute, XmlAnyAttribute, XmlElement, XmlText, or XmlAnyElement.</summary>
    internal static string @XmlIllegalArrayArrayAttribute => GetResourceString("XmlIllegalArrayArrayAttribute");
    /// <summary>For non-array types, you may use the following attributes: XmlAttribute, XmlText, XmlElement, or XmlAnyElement.</summary>
    internal static string @XmlIllegalAttribute => GetResourceString("XmlIllegalAttribute");
    /// <summary>The type for {0} may not be specified for primitive types.</summary>
    internal static string @XmlIllegalType => GetResourceString("XmlIllegalType");
    /// <summary>Cannot serialize member '{0}' of type {1}. XmlAttribute/XmlText cannot be used to encode complex types.</summary>
    internal static string @XmlIllegalAttrOrText => GetResourceString("XmlIllegalAttrOrText");
    /// <summary>Cannot serialize member '{0}' of type {1}. SoapAttribute cannot be used to encode complex types.</summary>
    internal static string @XmlIllegalSoapAttribute => GetResourceString("XmlIllegalSoapAttribute");
    /// <summary>Cannot serialize member '{0}' of type {1}. XmlAttribute/XmlText cannot be used to encode types implementing {2}.</summary>
    internal static string @XmlIllegalAttrOrTextInterface => GetResourceString("XmlIllegalAttrOrTextInterface");
    /// <summary>XmlAttribute cannot be used to encode array of {1}, because it is marked with FlagsAttribute.</summary>
    internal static string @XmlIllegalAttributeFlagsArray => GetResourceString("XmlIllegalAttributeFlagsArray");
    /// <summary>Cannot serialize member of type {0}: XmlAnyElement can only be used with classes of type XmlNode or a type deriving from XmlNode.</summary>
    internal static string @XmlIllegalAnyElement => GetResourceString("XmlIllegalAnyElement");
    /// <summary>IsNullable may not be 'true' for value type {0}.  Please consider using Nullable&lt;{0}&gt; instead.</summary>
    internal static string @XmlInvalidIsNullable => GetResourceString("XmlInvalidIsNullable");
    /// <summary>IsNullable may not be set to 'false' for a Nullable&lt;{0}&gt; type. Consider using '{0}' type or removing the IsNullable property from the {1} attribute.</summary>
    internal static string @XmlInvalidNotNullable => GetResourceString("XmlInvalidNotNullable");
    /// <summary>The Form property may not be 'Unqualified' when an explicit Namespace property is present.</summary>
    internal static string @XmlInvalidFormUnqualified => GetResourceString("XmlInvalidFormUnqualified");
    /// <summary>The namespace, {0}, is a duplicate.</summary>
    internal static string @XmlDuplicateNamespace => GetResourceString("XmlDuplicateNamespace");
    /// <summary>This element has no name. Please review schema type '{0}' from namespace '{1}'.</summary>
    internal static string @XmlElementHasNoName => GetResourceString("XmlElementHasNoName");
    /// <summary>This attribute has no name.</summary>
    internal static string @XmlAttributeHasNoName => GetResourceString("XmlAttributeHasNoName");
    /// <summary>The element, {0}, from namespace, {1}, was imported in two different contexts: ({2}, {3}).</summary>
    internal static string @XmlElementImportedTwice => GetResourceString("XmlElementImportedTwice");
    /// <summary>Member {0}.{1} of type {2} hides base class member {3}.{4} of type {5}. Use XmlElementAttribute or XmlAttributeAttribute to specify a new name.</summary>
    internal static string @XmlHiddenMember => GetResourceString("XmlHiddenMember");
    /// <summary>Member '{0}.{1}' hides inherited member '{2}.{3}', but has different custom attributes.</summary>
    internal static string @XmlInvalidXmlOverride => GetResourceString("XmlInvalidXmlOverride");
    /// <summary>These members may not be derived.</summary>
    internal static string @XmlMembersDeriveError => GetResourceString("XmlMembersDeriveError");
    /// <summary>The type '{0}' from namespace '{1}' was used in two different ways.</summary>
    internal static string @XmlTypeUsedTwice => GetResourceString("XmlTypeUsedTwice");
    /// <summary>Group {0} is missing.</summary>
    internal static string @XmlMissingGroup => GetResourceString("XmlMissingGroup");
    /// <summary>The attribute group {0} is missing.</summary>
    internal static string @XmlMissingAttributeGroup => GetResourceString("XmlMissingAttributeGroup");
    /// <summary>The datatype '{0}' is missing.</summary>
    internal static string @XmlMissingDataType => GetResourceString("XmlMissingDataType");
    /// <summary>Referenced type '{0}' is only valid for encoded SOAP.</summary>
    internal static string @XmlInvalidEncoding => GetResourceString("XmlInvalidEncoding");
    /// <summary>The element '{0}' is missing.</summary>
    internal static string @XmlMissingElement => GetResourceString("XmlMissingElement");
    /// <summary>The attribute {0} is missing.</summary>
    internal static string @XmlMissingAttribute => GetResourceString("XmlMissingAttribute");
    /// <summary>The method for enum {0} is missing.</summary>
    internal static string @XmlMissingMethodEnum => GetResourceString("XmlMissingMethodEnum");
    /// <summary>Cannot write a node of type XmlAttribute as an element value. Use XmlAnyAttributeAttribute with an array of XmlNode or XmlAttribute to write the node as an attribute.</summary>
    internal static string @XmlNoAttributeHere => GetResourceString("XmlNoAttributeHere");
    /// <summary>The node must be either type XmlAttribute or a derived type.</summary>
    internal static string @XmlNeedAttributeHere => GetResourceString("XmlNeedAttributeHere");
    /// <summary>This element was named '{0}' from namespace '{1}' but should have been named '{2}' from namespace '{3}'.</summary>
    internal static string @XmlElementNameMismatch => GetResourceString("XmlElementNameMismatch");
    /// <summary>The default value type, {0}, is unsupported.</summary>
    internal static string @XmlUnsupportedDefaultType => GetResourceString("XmlUnsupportedDefaultType");
    /// <summary>The formatter {0} cannot be used for default values.</summary>
    internal static string @XmlUnsupportedDefaultValue => GetResourceString("XmlUnsupportedDefaultValue");
    /// <summary>Value '{0}' cannot be converted to {1}.</summary>
    internal static string @XmlInvalidDefaultValue => GetResourceString("XmlInvalidDefaultValue");
    /// <summary>Enum {0} cannot be converted to {1}.</summary>
    internal static string @XmlInvalidDefaultEnumValue => GetResourceString("XmlInvalidDefaultEnumValue");
    /// <summary>{0} was not expected.</summary>
    internal static string @XmlUnknownNode => GetResourceString("XmlUnknownNode");
    /// <summary>Instance validation error: '{0}' is not a valid value for {1}.</summary>
    internal static string @XmlUnknownConstant => GetResourceString("XmlUnknownConstant");
    /// <summary>There is an error in the XML document.</summary>
    internal static string @XmlSerializeError => GetResourceString("XmlSerializeError");
    /// <summary>There is an error in XML document ({0}, {1}).</summary>
    internal static string @XmlSerializeErrorDetails => GetResourceString("XmlSerializeErrorDetails");
    /// <summary>There are more then one schema with targetNamespace='{0}'.</summary>
    internal static string @XmlSchemaDuplicateNamespace => GetResourceString("XmlSchemaDuplicateNamespace");
    /// <summary>Cannot add schema to compiled schemas collection.</summary>
    internal static string @XmlSchemaCompiled => GetResourceString("XmlSchemaCompiled");
    /// <summary>SOAP-ENC:arrayType with multidimensional array found at {0}. Only single-dimensional arrays are supported. Consider using an array of arrays instead.</summary>
    internal static string @XmlInvalidArrayDimentions => GetResourceString("XmlInvalidArrayDimentions");
    /// <summary>The SOAP-ENC:arrayType references type is named '{0}'; a type named '{1}' was expected at {2}.</summary>
    internal static string @XmlInvalidArrayTypeName => GetResourceString("XmlInvalidArrayTypeName");
    /// <summary>The SOAP-ENC:arrayType references type is from namespace '{0}'; the namespace '{1}' was expected at {2}.</summary>
    internal static string @XmlInvalidArrayTypeNamespace => GetResourceString("XmlInvalidArrayTypeNamespace");
    /// <summary>SOAP-ENC:arrayType was missing at {0}.</summary>
    internal static string @XmlMissingArrayType => GetResourceString("XmlMissingArrayType");
    /// <summary>SOAP-ENC:arrayType was empty at {0}.</summary>
    internal static string @XmlEmptyArrayType => GetResourceString("XmlEmptyArrayType");
    /// <summary>SOAP-ENC:arrayType must end with a ']' character.</summary>
    internal static string @XmlInvalidArraySyntax => GetResourceString("XmlInvalidArraySyntax");
    /// <summary>Invalid wsd:arrayType syntax: '{0}'.</summary>
    internal static string @XmlInvalidArrayTypeSyntax => GetResourceString("XmlInvalidArrayTypeSyntax");
    /// <summary>SOAP-ENC:arrayType has mismatched brackets.</summary>
    internal static string @XmlMismatchedArrayBrackets => GetResourceString("XmlMismatchedArrayBrackets");
    /// <summary>SOAP-ENC:arrayType could not handle '{1}' as the length of the array.</summary>
    internal static string @XmlInvalidArrayLength => GetResourceString("XmlInvalidArrayLength");
    /// <summary>The referenced element with ID '{0}' is located outside the current document and cannot be retrieved.</summary>
    internal static string @XmlMissingHref => GetResourceString("XmlMissingHref");
    /// <summary>The referenced element with ID '{0}' was not found in the document.</summary>
    internal static string @XmlInvalidHref => GetResourceString("XmlInvalidHref");
    /// <summary>The specified type was not recognized: name='{0}', namespace='{1}', at {2}.</summary>
    internal static string @XmlUnknownType => GetResourceString("XmlUnknownType");
    /// <summary>The specified type is abstract: name='{0}', namespace='{1}', at {2}.</summary>
    internal static string @XmlAbstractType => GetResourceString("XmlAbstractType");
    /// <summary>Exported mappings must come from the same importer.</summary>
    internal static string @XmlMappingsScopeMismatch => GetResourceString("XmlMappingsScopeMismatch");
    /// <summary>The XML element '{0}' from namespace '{1}' references a method and a type. Change the method's message name using WebMethodAttribute or change the type's root element using the XmlRootAttribute.</summary>
    internal static string @XmlMethodTypeNameConflict => GetResourceString("XmlMethodTypeNameConflict");
    /// <summary>The top XML element '{0}' from namespace '{1}' references distinct types {2} and {3}. Use XML attributes to specify another XML name or namespace for the element or types.</summary>
    internal static string @XmlCannotReconcileAccessor => GetResourceString("XmlCannotReconcileAccessor");
    /// <summary>The global XML attribute '{0}' from namespace '{1}' references distinct types {2} and {3}. Use XML attributes to specify another XML name or namespace for the attribute or types.</summary>
    internal static string @XmlCannotReconcileAttributeAccessor => GetResourceString("XmlCannotReconcileAttributeAccessor");
    /// <summary>The global XML item '{0}' from namespace '{1}' has mismatch default value attributes: '{2}' and '{3}' and cannot be mapped to the same schema item. Use XML attributes to specify another XML name or namespace for one of the items, or make sure that the defa ...</summary>
    internal static string @XmlCannotReconcileAccessorDefault => GetResourceString("XmlCannotReconcileAccessorDefault");
    /// <summary>XmlRoot and XmlType attributes may not be specified for the type {0}.</summary>
    internal static string @XmlInvalidTypeAttributes => GetResourceString("XmlInvalidTypeAttributes");
    /// <summary>XML attributes may not be specified for the type {0}.</summary>
    internal static string @XmlInvalidAttributeUse => GetResourceString("XmlInvalidAttributeUse");
    /// <summary>Types '{0}' and '{1}' both use the XML type name, '{2}', from namespace '{3}'. Use XML attributes to specify a unique XML name and/or namespace for the type.</summary>
    internal static string @XmlTypesDuplicate => GetResourceString("XmlTypesDuplicate");
    /// <summary>An array of type {0} may not be used with XmlArrayType.Soap.</summary>
    internal static string @XmlInvalidSoapArray => GetResourceString("XmlInvalidSoapArray");
    /// <summary>The type {0} may not be exported to a schema because the IncludeInSchema property of the XmlType attribute is 'false'.</summary>
    internal static string @XmlCannotIncludeInSchema => GetResourceString("XmlCannotIncludeInSchema");
    /// <summary>The type {0} may not be used in this context. To use {0} as a parameter, return type, or member of a class or struct, the parameter, return type, or member must be declared as type {0} (it cannot be object). Objects of type {0} may not be used in un-typed  ...</summary>
    internal static string @XmlInvalidSerializable => GetResourceString("XmlInvalidSerializable");
    /// <summary>The type {0} may not be used in this context.</summary>
    internal static string @XmlInvalidUseOfType => GetResourceString("XmlInvalidUseOfType");
    /// <summary>The type {0} was not expected. Use the XmlInclude or SoapInclude attribute to specify types that are not known statically.</summary>
    internal static string @XmlUnxpectedType => GetResourceString("XmlUnxpectedType");
    /// <summary>The XML element '{0}' from namespace '{1}' was not expected. The XML element name and namespace must match those provided via XmlAnyElementAttribute(s).</summary>
    internal static string @XmlUnknownAnyElement => GetResourceString("XmlUnknownAnyElement");
    /// <summary>{0}. {1} already has attributes.</summary>
    internal static string @XmlMultipleAttributeOverrides => GetResourceString("XmlMultipleAttributeOverrides");
    /// <summary>Only SoapEnum may be used on enum constants.</summary>
    internal static string @XmlInvalidEnumAttribute => GetResourceString("XmlInvalidEnumAttribute");
    /// <summary>The return value must be the first member.</summary>
    internal static string @XmlInvalidReturnPosition => GetResourceString("XmlInvalidReturnPosition");
    /// <summary>Only SoapElementAttribute or SoapAttributeAttribute may be used on members.</summary>
    internal static string @XmlInvalidElementAttribute => GetResourceString("XmlInvalidElementAttribute");
    /// <summary>The type Void is not valid in this context.</summary>
    internal static string @XmlInvalidVoid => GetResourceString("XmlInvalidVoid");
    /// <summary>Invalid content {0}.</summary>
    internal static string @XmlInvalidContent => GetResourceString("XmlInvalidContent");
    /// <summary>{0} may not be used on parameters or return values when they are not wrapped.</summary>
    internal static string @XmlInvalidAttributeType => GetResourceString("XmlInvalidAttributeType");
    /// <summary>Type {0} cannot derive from {1} because it already has base type {2}.</summary>
    internal static string @XmlInvalidBaseType => GetResourceString("XmlInvalidBaseType");
    /// <summary>Identifier '{0}' is not CLS-compliant.</summary>
    internal static string @XmlInvalidIdentifier => GetResourceString("XmlInvalidIdentifier");
    /// <summary>There was an error generating the XML document.</summary>
    internal static string @XmlGenError => GetResourceString("XmlGenError");
    /// <summary>Invalid namespace attribute: xmlns:{0}="".</summary>
    internal static string @XmlInvalidXmlns => GetResourceString("XmlInvalidXmlns");
    /// <summary>A circular reference was detected while serializing an object of type {0}.</summary>
    internal static string @XmlCircularReference => GetResourceString("XmlCircularReference");
    /// <summary>A circular type reference was detected in anonymous type '{0}'.  Please change '{0}' to be a named type by setting {1}={2} in the type definition.</summary>
    internal static string @XmlCircularReference2 => GetResourceString("XmlCircularReference2");
    /// <summary>Illegal type derivation: Type '{0}' derives from anonymous type '{1}'. Please change '{1}' to be a named type by setting {2}={3} in the type definition.</summary>
    internal static string @XmlAnonymousBaseType => GetResourceString("XmlAnonymousBaseType");
    /// <summary>Missing schema targetNamespace="{0}".</summary>
    internal static string @XmlMissingSchema => GetResourceString("XmlMissingSchema");
    /// <summary>Cannot serialize object of type '{0}'. The object does not have serializable members.</summary>
    internal static string @XmlNoSerializableMembers => GetResourceString("XmlNoSerializableMembers");
    /// <summary>Error: Type '{0}' could not be imported because it redefines inherited member '{1}' with a different type. '{1}' is declared as type '{3}' on '{0}', but as type '{2}' on base class '{4}'.</summary>
    internal static string @XmlIllegalOverride => GetResourceString("XmlIllegalOverride");
    /// <summary>Could not deserialize {0}. Parameterless constructor is required for collections and enumerators.</summary>
    internal static string @XmlReadOnlyCollection => GetResourceString("XmlReadOnlyCollection");
    /// <summary>Cannot serialize {0}. Nested structs are not supported with encoded SOAP.</summary>
    internal static string @XmlRpcNestedValueType => GetResourceString("XmlRpcNestedValueType");
    /// <summary>Cannot serialize {0}. References in structs are not supported with encoded SOAP.</summary>
    internal static string @XmlRpcRefsInValueType => GetResourceString("XmlRpcRefsInValueType");
    /// <summary>Cannot serialize {0}. Arrays of structs are not supported with encoded SOAP.</summary>
    internal static string @XmlRpcArrayOfValueTypes => GetResourceString("XmlRpcArrayOfValueTypes");
    /// <summary>The XML element '{0}' from namespace '{1}' is already present in the current scope. Use XML attributes to specify another XML name or namespace for the element.</summary>
    internal static string @XmlDuplicateElementName => GetResourceString("XmlDuplicateElementName");
    /// <summary>The XML attribute '{0}' from namespace '{1}' is already present in the current scope. Use XML attributes to specify another XML name or namespace for the attribute.</summary>
    internal static string @XmlDuplicateAttributeName => GetResourceString("XmlDuplicateAttributeName");
    /// <summary>Element '{0}' from namespace '{1}' is not a complex type and cannot be used as a {2}.</summary>
    internal static string @XmlBadBaseElement => GetResourceString("XmlBadBaseElement");
    /// <summary>Type '{0}' from namespace '{1}' is not a complex type and cannot be used as a {2}.</summary>
    internal static string @XmlBadBaseType => GetResourceString("XmlBadBaseType");
    /// <summary>Namespace prefix '{0}' is not defined.</summary>
    internal static string @XmlUndefinedAlias => GetResourceString("XmlUndefinedAlias");
    /// <summary>Type of choice identifier '{0}' is inconsistent with type of '{1}'. Please use {2}.</summary>
    internal static string @XmlChoiceIdentifierType => GetResourceString("XmlChoiceIdentifierType");
    /// <summary>Type of choice identifier '{0}' is inconsistent with type of '{1}'. Please use array of {2}.</summary>
    internal static string @XmlChoiceIdentifierArrayType => GetResourceString("XmlChoiceIdentifierArrayType");
    /// <summary>Choice identifier '{0}' must be an enum.</summary>
    internal static string @XmlChoiceIdentifierTypeEnum => GetResourceString("XmlChoiceIdentifierTypeEnum");
    /// <summary>Missing '{0}' member needed for serialization of choice '{1}'.</summary>
    internal static string @XmlChoiceIdentiferMemberMissing => GetResourceString("XmlChoiceIdentiferMemberMissing");
    /// <summary>Ambiguous choice identifier. There are several members named '{0}'.</summary>
    internal static string @XmlChoiceIdentiferAmbiguous => GetResourceString("XmlChoiceIdentiferAmbiguous");
    /// <summary>You need to add {0} to the '{1}' member.</summary>
    internal static string @XmlChoiceIdentiferMissing => GetResourceString("XmlChoiceIdentiferMissing");
    /// <summary>Type {0} is missing enumeration value '{1}' for element '{2}' from namespace '{3}'.</summary>
    internal static string @XmlChoiceMissingValue => GetResourceString("XmlChoiceMissingValue");
    /// <summary>Type {0} is missing enumeration value '##any:' corresponding to XmlAnyElementAttribute.</summary>
    internal static string @XmlChoiceMissingAnyValue => GetResourceString("XmlChoiceMissingAnyValue");
    /// <summary>Value of {0} mismatches the type of {1}; you need to set it to {2}.</summary>
    internal static string @XmlChoiceMismatchChoiceException => GetResourceString("XmlChoiceMismatchChoiceException");
    /// <summary>Ambiguous types specified for member '{0}'.  Items '{1}' and '{2}' have the same type.  Please consider using {3} with {4} instead.</summary>
    internal static string @XmlArrayItemAmbiguousTypes => GetResourceString("XmlArrayItemAmbiguousTypes");
    /// <summary>Cannot serialize interface {0}.</summary>
    internal static string @XmlUnsupportedInterface => GetResourceString("XmlUnsupportedInterface");
    /// <summary>Cannot serialize member {0} of type {1} because it is an interface.</summary>
    internal static string @XmlUnsupportedInterfaceDetails => GetResourceString("XmlUnsupportedInterfaceDetails");
    /// <summary>Cannot serialize object of type {0}. Multidimensional arrays are not supported.</summary>
    internal static string @XmlUnsupportedRank => GetResourceString("XmlUnsupportedRank");
    /// <summary>Using {0} as a base type for a class is not supported by XmlSerializer.</summary>
    internal static string @XmlUnsupportedInheritance => GetResourceString("XmlUnsupportedInheritance");
    /// <summary>Cannot serialize object of type '{0}' because it has multiple XmlText attributes. Consider using an array of strings with XmlTextAttribute for serialization of a mixed complex type.</summary>
    internal static string @XmlIllegalMultipleText => GetResourceString("XmlIllegalMultipleText");
    /// <summary>XmlText may not be used on multiple parameters or return values.</summary>
    internal static string @XmlIllegalMultipleTextMembers => GetResourceString("XmlIllegalMultipleTextMembers");
    /// <summary>Member '{0}' cannot be encoded using the XmlText attribute. You may use the XmlText attribute to encode primitives, enumerations, arrays of strings, or arrays of XmlNode.</summary>
    internal static string @XmlIllegalArrayTextAttribute => GetResourceString("XmlIllegalArrayTextAttribute");
    /// <summary>Cannot serialize object of type '{0}'. Consider changing type of XmlText member '{0}.{1}' from {2} to string or string array.</summary>
    internal static string @XmlIllegalTypedTextAttribute => GetResourceString("XmlIllegalTypedTextAttribute");
    /// <summary>Cannot serialize object of type '{0}'. Base type '{1}' has simpleContent and can only be extended by adding XmlAttribute elements. Please consider changing XmlText member of the base class to string array.</summary>
    internal static string @XmlIllegalSimpleContentExtension => GetResourceString("XmlIllegalSimpleContentExtension");
    /// <summary>Cannot assign object of type {0} to an object of type {1}.</summary>
    internal static string @XmlInvalidCast => GetResourceString("XmlInvalidCast");
    /// <summary>Cannot assign object of type {0} to an object of type {1}. The error occurred while reading node with id='{2}'.</summary>
    internal static string @XmlInvalidCastWithId => GetResourceString("XmlInvalidCastWithId");
    /// <summary>Invalid reference id='{0}'. Object of type {1} cannot be stored in an array of this type. Details: array index={2}.</summary>
    internal static string @XmlInvalidArrayRef => GetResourceString("XmlInvalidArrayRef");
    /// <summary>Cannot assign null value to an object of type {1}.</summary>
    internal static string @XmlInvalidNullCast => GetResourceString("XmlInvalidNullCast");
    /// <summary>Cannot serialize object of type '{0}' because it has multiple XmlNamespaceDeclarations attributes.</summary>
    internal static string @XmlMultipleXmlns => GetResourceString("XmlMultipleXmlns");
    /// <summary>XmlNamespaceDeclarations may not be used on multiple parameters or return values.</summary>
    internal static string @XmlMultipleXmlnsMembers => GetResourceString("XmlMultipleXmlnsMembers");
    /// <summary>Cannot use XmlNamespaceDeclarations attribute on member '{0}' of type {1}.  This attribute is only valid on members of type {2}.</summary>
    internal static string @XmlXmlnsInvalidType => GetResourceString("XmlXmlnsInvalidType");
    /// <summary>XmlNamespaceDeclarations attribute cannot be used in conjunction with any other custom attributes.</summary>
    internal static string @XmlSoleXmlnsAttribute => GetResourceString("XmlSoleXmlnsAttribute");
    /// <summary>The type '{0}' cannot be serialized because its parameterless constructor is decorated with declarative security permission attributes. Consider using imperative asserts or demands in the constructor.</summary>
    internal static string @XmlConstructorHasSecurityAttributes => GetResourceString("XmlConstructorHasSecurityAttributes");
    /// <summary>Invalid or missing value of the choice identifier '{1}' of type '{0}[]'.</summary>
    internal static string @XmlInvalidChoiceIdentifierValue => GetResourceString("XmlInvalidChoiceIdentifierValue");
    /// <summary>The element '{0}' has been attributed with duplicate XmlAnyElementAttribute(Name="{1}", Namespace="{2}").</summary>
    internal static string @XmlAnyElementDuplicate => GetResourceString("XmlAnyElementDuplicate");
    /// <summary>Enum values in the XmlChoiceIdentifier '{0}' have to be unique.  Value '{1}' already present.</summary>
    internal static string @XmlChoiceIdDuplicate => GetResourceString("XmlChoiceIdDuplicate");
    /// <summary>Value '{0}' of the choice identifier '{1}' does not match element '{2}' from namespace '{3}'.</summary>
    internal static string @XmlChoiceIdentifierMismatch => GetResourceString("XmlChoiceIdentifierMismatch");
    /// <summary>Cannot import schema for type '{0}' from namespace '{1}'. Redefine not supported.</summary>
    internal static string @XmlUnsupportedRedefine => GetResourceString("XmlUnsupportedRedefine");
    /// <summary>The XML element named '{0}' from namespace '{1}' is already present in the current scope.</summary>
    internal static string @XmlDuplicateElementInScope => GetResourceString("XmlDuplicateElementInScope");
    /// <summary>The XML element named '{0}' from namespace '{1}' is already present in the current scope. Elements with the same name in the same scope must have the same type.</summary>
    internal static string @XmlDuplicateElementInScope1 => GetResourceString("XmlDuplicateElementInScope1");
    /// <summary>One or more assemblies referenced by the XmlSerializer cannot be called from partially trusted code.</summary>
    internal static string @XmlNoPartialTrust => GetResourceString("XmlNoPartialTrust");
    /// <summary>The encoding style '{0}' is not valid for this call because this XmlSerializer instance does not support encoding. Use the SoapReflectionImporter to initialize an XmlSerializer that supports encoding.</summary>
    internal static string @XmlInvalidEncodingNotEncoded1 => GetResourceString("XmlInvalidEncodingNotEncoded1");
    /// <summary>The encoding style '{0}' is not valid for this call. Valid values are '{1}' for SOAP 1.1 encoding or '{2}' for SOAP 1.2 encoding.</summary>
    internal static string @XmlInvalidEncoding3 => GetResourceString("XmlInvalidEncoding3");
    /// <summary>Member '{0}' of type {1} cannot be serialized.  Members with names ending on 'Specified' suffix have special meaning to the XmlSerializer: they control serialization of optional ValueType members and have to be of type {2}.</summary>
    internal static string @XmlInvalidSpecifiedType => GetResourceString("XmlInvalidSpecifiedType");
    /// <summary>Type {0} is not supported because it has unbound generic parameters.  Only instantiated generic types can be serialized.</summary>
    internal static string @XmlUnsupportedOpenGenericType => GetResourceString("XmlUnsupportedOpenGenericType");
    /// <summary>Warning: Cannot share {0} named '{1}' from '{2}' namespace. Several mismatched schema declarations were found.</summary>
    internal static string @XmlMismatchSchemaObjects => GetResourceString("XmlMismatchSchemaObjects");
    /// <summary>Type '{0}' from targetNamespace='{1}' has invalid definition: Circular type reference.</summary>
    internal static string @XmlCircularTypeReference => GetResourceString("XmlCircularTypeReference");
    /// <summary>Group '{0}' from targetNamespace='{1}' has invalid definition: Circular group reference.</summary>
    internal static string @XmlCircularGroupReference => GetResourceString("XmlCircularGroupReference");
    /// <summary>{0}='{1}' is not supported with rpc\literal SOAP. The wrapper element has to be unqualified.</summary>
    internal static string @XmlRpcLitElementNamespace => GetResourceString("XmlRpcLitElementNamespace");
    /// <summary>{0}='{1}' is not supported with rpc\literal SOAP. The wrapper element cannot be nullable.</summary>
    internal static string @XmlRpcLitElementNullable => GetResourceString("XmlRpcLitElementNullable");
    /// <summary>Multiple accessors are not supported with rpc\literal SOAP, you may use the following attributes: XmlArray, XmlArrayItem, or single XmlElement.</summary>
    internal static string @XmlRpcLitElements => GetResourceString("XmlRpcLitElements");
    /// <summary>Input or output values of an rpc\literal method cannot have maxOccurs &gt; 1. Provide a wrapper element for '{0}' by using XmlArray or XmlArrayItem instead of XmlElement attribute.</summary>
    internal static string @XmlRpcLitArrayElement => GetResourceString("XmlRpcLitArrayElement");
    /// <summary>XmlAttribute and XmlAnyAttribute cannot be used with rpc\literal SOAP, you may use the following attributes: XmlArray, XmlArrayItem, or single XmlElement.</summary>
    internal static string @XmlRpcLitAttributeAttributes => GetResourceString("XmlRpcLitAttributeAttributes");
    /// <summary>XmlText, XmlAnyElement, or XmlChoiceIdentifier cannot be used with rpc\literal SOAP, you may use the following attributes: XmlArray, XmlArrayItem, or single XmlElement.</summary>
    internal static string @XmlRpcLitAttributes => GetResourceString("XmlRpcLitAttributes");
    /// <summary>Explicit sequencing may not be used on parameters or return values.  Please remove {0} property from custom attributes.</summary>
    internal static string @XmlSequenceMembers => GetResourceString("XmlSequenceMembers");
    /// <summary>Input or output values of an rpc\literal method cannot have an XmlNamespaceDeclarations attribute (member '{0}').</summary>
    internal static string @XmlRpcLitXmlns => GetResourceString("XmlRpcLitXmlns");
    /// <summary>Illegal namespace declaration xmlns:{0}='{1}'. Namespace alias '{0}' already defined in the current scope.</summary>
    internal static string @XmlDuplicateNs => GetResourceString("XmlDuplicateNs");
    /// <summary>Cannot include anonymous type '{0}'.</summary>
    internal static string @XmlAnonymousInclude => GetResourceString("XmlAnonymousInclude");
    /// <summary>Schema attribute schemaLocation='{1}' is not supported on objects of type {0}.  Please set {0}.Schema property.</summary>
    internal static string @XmlSchemaIncludeLocation => GetResourceString("XmlSchemaIncludeLocation");
    /// <summary>Schema type information provided by {0} is invalid: {1}</summary>
    internal static string @XmlSerializableSchemaError => GetResourceString("XmlSerializableSchemaError");
    /// <summary>'{0}' is an invalid language identifier.</summary>
    internal static string @XmlGetSchemaMethodName => GetResourceString("XmlGetSchemaMethodName");
    /// <summary>You must implement public static {0}({1}) method on {2}.</summary>
    internal static string @XmlGetSchemaMethodMissing => GetResourceString("XmlGetSchemaMethodMissing");
    /// <summary>Method {0}.{1}() specified by {2} has invalid signature: return type must be compatible with {3}.</summary>
    internal static string @XmlGetSchemaMethodReturnType => GetResourceString("XmlGetSchemaMethodReturnType");
    /// <summary>{0}.{1}() must return a valid type name.</summary>
    internal static string @XmlGetSchemaEmptyTypeName => GetResourceString("XmlGetSchemaEmptyTypeName");
    /// <summary>{0}.{1}() must return a valid type name. Type '{2}' cannot be found in the targetNamespace='{3}'.</summary>
    internal static string @XmlGetSchemaTypeMissing => GetResourceString("XmlGetSchemaTypeMissing");
    /// <summary>Multiple schemas with targetNamespace='{0}' returned by {1}.{2}().  Please use only the main (parent) schema, and add the others to the schema Includes.</summary>
    internal static string @XmlGetSchemaInclude => GetResourceString("XmlGetSchemaInclude");
    /// <summary>Only XmlRoot attribute may be specified for the type {0}. Please use {1} to specify schema type.</summary>
    internal static string @XmlSerializableAttributes => GetResourceString("XmlSerializableAttributes");
    /// <summary>Cannot merge schemas with targetNamespace='{0}'. Several mismatched declarations were found: {1}</summary>
    internal static string @XmlSerializableMergeItem => GetResourceString("XmlSerializableMergeItem");
    /// <summary>Type '{0}' from namespace '{1}' declared as derivation of type '{2}' from namespace '{3}, but corresponding CLR types are not compatible.  Cannot convert type '{4}' to '{5}'.</summary>
    internal static string @XmlSerializableBadDerivation => GetResourceString("XmlSerializableBadDerivation");
    /// <summary>Type '{0}' from namespace '{1}' does not have corresponding IXmlSerializable type. Please consider adding {2} to '{3}'.</summary>
    internal static string @XmlSerializableMissingClrType => GetResourceString("XmlSerializableMissingClrType");
    /// <summary>Circular reference in derivation of IXmlSerializable type '{0}'.</summary>
    internal static string @XmlCircularDerivation => GetResourceString("XmlCircularDerivation");
    /// <summary>This mapping was not crated by reflection importer and cannot be used in this context.</summary>
    internal static string @XmlMelformMapping => GetResourceString("XmlMelformMapping");
    /// <summary>Schema with targetNamespace='{0}' has invalid syntax. {1} Line {2}, position {3}.</summary>
    internal static string @XmlSchemaSyntaxErrorDetails => GetResourceString("XmlSchemaSyntaxErrorDetails");
    /// <summary>Element reference '{0}' declared in schema type '{1}' from namespace '{2}'.</summary>
    internal static string @XmlSchemaElementReference => GetResourceString("XmlSchemaElementReference");
    /// <summary>Attribute reference '{0}' declared in schema type '{1}' from namespace '{2}'.</summary>
    internal static string @XmlSchemaAttributeReference => GetResourceString("XmlSchemaAttributeReference");
    /// <summary>Schema item '{1}' from namespace '{0}'. {2}</summary>
    internal static string @XmlSchemaItem => GetResourceString("XmlSchemaItem");
    /// <summary>Schema item '{1}' named '{2}' from namespace '{0}'. {3}</summary>
    internal static string @XmlSchemaNamedItem => GetResourceString("XmlSchemaNamedItem");
    /// <summary>Check content definition of schema type '{0}' from namespace '{1}'. {2}</summary>
    internal static string @XmlSchemaContentDef => GetResourceString("XmlSchemaContentDef");
    /// <summary>Schema with targetNamespace='{0}' has invalid syntax. {1}</summary>
    internal static string @XmlSchema => GetResourceString("XmlSchema");
    /// <summary>Cannot reconcile schema for '{0}'. Please use [XmlRoot] attribute to change default name or namespace of the top-level element to avoid duplicate element declarations: element name='{1}' namespace='{2}'.</summary>
    internal static string @XmlSerializableRootDupName => GetResourceString("XmlSerializableRootDupName");
    /// <summary>Type '{0}' is not serializable.</summary>
    internal static string @XmlNotSerializable => GetResourceString("XmlNotSerializable");
    /// <summary>Type '{0}' is from an AssemblyLoadContext which is incompatible with that which contains this XmlSerializer.</summary>
    internal static string @XmlTypeInBadLoadContext => GetResourceString("XmlTypeInBadLoadContext");
    /// <summary>Invalid XmlSerializerAssemblyAttribute usage. Please use {0} property or {1} property.</summary>
    internal static string @XmlPregenInvalidXmlSerializerAssemblyAttribute => GetResourceString("XmlPregenInvalidXmlSerializerAssemblyAttribute");
    /// <summary>Inconsistent sequencing: if used on one of the class's members, the '{0}' property is required on all particle-like members, please explicitly set '{0}' using XmlElement, XmlAnyElement or XmlArray custom attribute on class member '{1}'.</summary>
    internal static string @XmlSequenceInconsistent => GetResourceString("XmlSequenceInconsistent");
    /// <summary>'{1}' values must be unique within the same scope. Value '{0}' is in use. Please change '{1}' property on '{2}'.</summary>
    internal static string @XmlSequenceUnique => GetResourceString("XmlSequenceUnique");
    /// <summary>There was an error processing type '{0}'. Type member '{1}' declared in '{2}' is missing required '{3}' property. If one class in the class hierarchy uses explicit sequencing feature ({3}), then its base class and all derived classes have to do the same.</summary>
    internal static string @XmlSequenceHierarchy => GetResourceString("XmlSequenceHierarchy");
    /// <summary>If multiple custom attributes specified on a single member only one of them have to have explicit '{0}' property, however if more that one attribute has the explicit '{0}', all values have to match.</summary>
    internal static string @XmlSequenceMatch => GetResourceString("XmlSequenceMatch");
    /// <summary>Negative values are prohibited.</summary>
    internal static string @XmlDisallowNegativeValues => GetResourceString("XmlDisallowNegativeValues");
    /// <summary>This is an unexpected token. The expected token is '{0}'.</summary>
    internal static string @Xml_UnexpectedToken => GetResourceString("Xml_UnexpectedToken");
    /// <summary>The '{0}' attribute has an invalid value according to its data type.</summary>
    internal static string @Sch_AttributeValueDataType => GetResourceString("Sch_AttributeValueDataType");
    /// <summary>The '{0}' element has an invalid value according to its data type.</summary>
    internal static string @Sch_ElementValueDataType => GetResourceString("Sch_ElementValueDataType");
    /// <summary>Internal error.</summary>
    internal static string @XmlInternalError => GetResourceString("XmlInternalError");
    /// <summary>Internal error: {0}.</summary>
    internal static string @XmlInternalErrorDetails => GetResourceString("XmlInternalErrorDetails");
    /// <summary>Internal error: missing generated method for {0}.</summary>
    internal static string @XmlInternalErrorMethod => GetResourceString("XmlInternalErrorMethod");
    /// <summary>Only TypeKind.Root can be set for typeof(object) which is never value type.</summary>
    internal static string @Arg_NeverValueType => GetResourceString("Arg_NeverValueType");
    /// <summary>Internal error: deserialization failed to advance over underlying stream.</summary>
    internal static string @XmlInternalErrorReaderAdvance => GetResourceString("XmlInternalErrorReaderAdvance");
    /// <summary>Invalid byte was found at index {0}.</summary>
    internal static string @Enc_InvalidByteInEncoding => GetResourceString("Enc_InvalidByteInEncoding");
    /// <summary>The XmlReader passed in to construct this XmlValidatingReaderImpl must be an instance of a System.Xml.XmlTextReader.</summary>
    internal static string @Arg_ExpectingXmlTextReader => GetResourceString("Arg_ExpectingXmlTextReader");
    /// <summary>Cannot create node of type {0}.</summary>
    internal static string @Arg_CannotCreateNode => GetResourceString("Arg_CannotCreateNode");
    /// <summary>Type is incompatible.</summary>
    internal static string @Arg_IncompatibleParamType => GetResourceString("Arg_IncompatibleParamType");
    /// <summary>Cannot open '{0}'. The Uri parameter must be a file system relative or absolute path.</summary>
    internal static string @Xml_SystemPathResolverCannotOpenUri => GetResourceString("Xml_SystemPathResolverCannotOpenUri");
    /// <summary>--- End of inner exception stack trace ---</summary>
    internal static string @Xml_EndOfInnerExceptionStack => GetResourceString("Xml_EndOfInnerExceptionStack");
    /// <summary>String literal was not closed.</summary>
    internal static string @XPath_UnclosedString => GetResourceString("XPath_UnclosedString");
    /// <summary>Scientific notation is not allowed.</summary>
    internal static string @XPath_ScientificNotation => GetResourceString("XPath_ScientificNotation");
    /// <summary>Unexpected token '{0}' in the expression.</summary>
    internal static string @XPath_UnexpectedToken => GetResourceString("XPath_UnexpectedToken");
    /// <summary>Expected a node test, found '{0}'.</summary>
    internal static string @XPath_NodeTestExpected => GetResourceString("XPath_NodeTestExpected");
    /// <summary>Expected end of the expression, found '{0}'.</summary>
    internal static string @XPath_EofExpected => GetResourceString("XPath_EofExpected");
    /// <summary>Expected token '{0}', found '{1}'.</summary>
    internal static string @XPath_TokenExpected => GetResourceString("XPath_TokenExpected");
    /// <summary>Only 'child' and 'attribute' axes are allowed in a pattern outside predicates.</summary>
    internal static string @XPath_InvalidAxisInPattern => GetResourceString("XPath_InvalidAxisInPattern");
    /// <summary>Abbreviated step '.' cannot be followed by a predicate. Use the full form 'self::node()[predicate]' instead.</summary>
    internal static string @XPath_PredicateAfterDot => GetResourceString("XPath_PredicateAfterDot");
    /// <summary>Abbreviated step '..' cannot be followed by a predicate. Use the full form 'parent::node()[predicate]' instead.</summary>
    internal static string @XPath_PredicateAfterDotDot => GetResourceString("XPath_PredicateAfterDotDot");
    /// <summary>Function '{0}()' must have {1} argument(s).</summary>
    internal static string @XPath_NArgsExpected => GetResourceString("XPath_NArgsExpected");
    /// <summary>Function '{0}()' must have {1} or {2} argument(s).</summary>
    internal static string @XPath_NOrMArgsExpected => GetResourceString("XPath_NOrMArgsExpected");
    /// <summary>Function '{0}()' must have at least {1} argument(s).</summary>
    internal static string @XPath_AtLeastNArgsExpected => GetResourceString("XPath_AtLeastNArgsExpected");
    /// <summary>Function '{0}()' must have no more than {2} arguments.</summary>
    internal static string @XPath_AtMostMArgsExpected => GetResourceString("XPath_AtMostMArgsExpected");
    /// <summary>Argument {1} of function '{0}()' cannot be converted to a node-set.</summary>
    internal static string @XPath_NodeSetArgumentExpected => GetResourceString("XPath_NodeSetArgumentExpected");
    /// <summary>Expression must evaluate to a node-set.</summary>
    internal static string @XPath_NodeSetExpected => GetResourceString("XPath_NodeSetExpected");
    /// <summary>To use a result tree fragment in a path expression, first convert it to a node-set using the msxsl:node-set() function.</summary>
    internal static string @XPath_RtfInPathExpr => GetResourceString("XPath_RtfInPathExpr");
    /// <summary>Warning as Error: {0}</summary>
    internal static string @Xslt_WarningAsError => GetResourceString("Xslt_WarningAsError");
    /// <summary>The stylesheet is too complex.</summary>
    internal static string @Xslt_InputTooComplex => GetResourceString("Xslt_InputTooComplex");
    /// <summary>Cannot load the stylesheet object referenced by URI '{0}', because the provided XmlResolver returned an object of type '{1}'. One of Stream, XmlReader, and IXPathNavigable types was expected.</summary>
    internal static string @Xslt_CannotLoadStylesheet => GetResourceString("Xslt_CannotLoadStylesheet");
    /// <summary>Stylesheet must start either with an 'xsl:stylesheet' or an 'xsl:transform' element, or with a literal result element that has an 'xsl:version' attribute, where prefix 'xsl' denotes the 'http://www.w3.org/1999/XSL/Transform' namespace.</summary>
    internal static string @Xslt_WrongStylesheetElement => GetResourceString("Xslt_WrongStylesheetElement");
    /// <summary>The 'http://www.w3.org/TR/WD-xsl' namespace is no longer supported.</summary>
    internal static string @Xslt_WdXslNamespace => GetResourceString("Xslt_WdXslNamespace");
    /// <summary>'{0}' element children must precede all other children of the '{1}' element.</summary>
    internal static string @Xslt_NotAtTop => GetResourceString("Xslt_NotAtTop");
    /// <summary>'{0}' cannot be a child of the '{1}' element.</summary>
    internal static string @Xslt_UnexpectedElement => GetResourceString("Xslt_UnexpectedElement");
    /// <summary>Top-level element '{0}' may not have a null namespace URI.</summary>
    internal static string @Xslt_NullNsAtTopLevel => GetResourceString("Xslt_NullNsAtTopLevel");
    /// <summary>'{0}' element cannot have text node children.</summary>
    internal static string @Xslt_TextNodesNotAllowed => GetResourceString("Xslt_TextNodesNotAllowed");
    /// <summary>The contents of '{0}' must be empty.</summary>
    internal static string @Xslt_NotEmptyContents => GetResourceString("Xslt_NotEmptyContents");
    /// <summary>'{0}' is an invalid attribute for the '{1}' element.</summary>
    internal static string @Xslt_InvalidAttribute => GetResourceString("Xslt_InvalidAttribute");
    /// <summary>Missing mandatory attribute '{0}'.</summary>
    internal static string @Xslt_MissingAttribute => GetResourceString("Xslt_MissingAttribute");
    /// <summary>'{1}' is an invalid value for the '{0}' attribute.</summary>
    internal static string @Xslt_InvalidAttrValue => GetResourceString("Xslt_InvalidAttrValue");
    /// <summary>The value of the '{0}' attribute must be '{1}' or '{2}'.</summary>
    internal static string @Xslt_BistateAttribute => GetResourceString("Xslt_BistateAttribute");
    /// <summary>The value of the '{0}' attribute must be a single character.</summary>
    internal static string @Xslt_CharAttribute => GetResourceString("Xslt_CharAttribute");
    /// <summary>Stylesheet '{0}' cannot directly or indirectly include or import itself.</summary>
    internal static string @Xslt_CircularInclude => GetResourceString("Xslt_CircularInclude");
    /// <summary>The right curly brace in an attribute value template '{0}' outside an expression must be doubled.</summary>
    internal static string @Xslt_SingleRightBraceInAvt => GetResourceString("Xslt_SingleRightBraceInAvt");
    /// <summary>The variable or parameter '{0}' cannot have both a 'select' attribute and non-empty content.</summary>
    internal static string @Xslt_VariableCntSel2 => GetResourceString("Xslt_VariableCntSel2");
    /// <summary>'xsl:key' has a 'use' attribute and has non-empty content, or it has empty content and no 'use' attribute.</summary>
    internal static string @Xslt_KeyCntUse => GetResourceString("Xslt_KeyCntUse");
    /// <summary>'{0}' is a duplicate template name.</summary>
    internal static string @Xslt_DupTemplateName => GetResourceString("Xslt_DupTemplateName");
    /// <summary>'xsl:template' must have either a 'match' attribute or a 'name' attribute, or both.</summary>
    internal static string @Xslt_BothMatchNameAbsent => GetResourceString("Xslt_BothMatchNameAbsent");
    /// <summary>The variable or parameter '{0}' is either not defined or it is out of scope.</summary>
    internal static string @Xslt_InvalidVariable => GetResourceString("Xslt_InvalidVariable");
    /// <summary>The variable or parameter '{0}' was duplicated with the same import precedence.</summary>
    internal static string @Xslt_DupGlobalVariable => GetResourceString("Xslt_DupGlobalVariable");
    /// <summary>The variable or parameter '{0}' was duplicated within the same scope.</summary>
    internal static string @Xslt_DupLocalVariable => GetResourceString("Xslt_DupLocalVariable");
    /// <summary>Namespace URI '{0}' is declared to be an alias for multiple different namespace URIs with the same import precedence.</summary>
    internal static string @Xslt_DupNsAlias => GetResourceString("Xslt_DupNsAlias");
    /// <summary>The value of the '{0}' attribute cannot be empty.</summary>
    internal static string @Xslt_EmptyAttrValue => GetResourceString("Xslt_EmptyAttrValue");
    /// <summary>The value of the '{0}' attribute cannot be empty. Use '#default' to specify the default namespace.</summary>
    internal static string @Xslt_EmptyNsAlias => GetResourceString("Xslt_EmptyNsAlias");
    /// <summary>'{0}()' is an unknown XSLT function.</summary>
    internal static string @Xslt_UnknownXsltFunction => GetResourceString("Xslt_UnknownXsltFunction");
    /// <summary>'{0}()' is an unsupported XSLT function.</summary>
    internal static string @Xslt_UnsupportedXsltFunction => GetResourceString("Xslt_UnsupportedXsltFunction");
    /// <summary>A reference to attribute set '{0}' cannot be resolved. An 'xsl:attribute-set' of this name must be declared at the top level of the stylesheet.</summary>
    internal static string @Xslt_NoAttributeSet => GetResourceString("Xslt_NoAttributeSet");
    /// <summary>A reference to key '{0}' cannot be resolved. An 'xsl:key' of this name must be declared at the top level of the stylesheet.</summary>
    internal static string @Xslt_UndefinedKey => GetResourceString("Xslt_UndefinedKey");
    /// <summary>Circular reference in the definition of attribute set '{0}'.</summary>
    internal static string @Xslt_CircularAttributeSet => GetResourceString("Xslt_CircularAttributeSet");
    /// <summary>The named template '{0}' does not exist.</summary>
    internal static string @Xslt_InvalidCallTemplate => GetResourceString("Xslt_InvalidCallTemplate");
    /// <summary>Prefix '{0}' is not defined.</summary>
    internal static string @Xslt_InvalidPrefix => GetResourceString("Xslt_InvalidPrefix");
    /// <summary>Script block cannot implement the XSLT namespace.</summary>
    internal static string @Xslt_ScriptXsltNamespace => GetResourceString("Xslt_ScriptXsltNamespace");
    /// <summary>Scripting language '{0}' is not supported.</summary>
    internal static string @Xslt_ScriptInvalidLanguage => GetResourceString("Xslt_ScriptInvalidLanguage");
    /// <summary>All script blocks implementing the namespace '{0}' must use the same language.</summary>
    internal static string @Xslt_ScriptMixedLanguages => GetResourceString("Xslt_ScriptMixedLanguages");
    /// <summary>Cannot have both an extension object and a script implementing the same namespace '{0}'.</summary>
    internal static string @Xslt_ScriptAndExtensionClash => GetResourceString("Xslt_ScriptAndExtensionClash");
    /// <summary>Decimal format '{0}' is not defined.</summary>
    internal static string @Xslt_NoDecimalFormat => GetResourceString("Xslt_NoDecimalFormat");
    /// <summary>The '{0}' and '{1}' attributes of 'xsl:decimal-format' must have distinct values.</summary>
    internal static string @Xslt_DecimalFormatSignsNotDistinct => GetResourceString("Xslt_DecimalFormatSignsNotDistinct");
    /// <summary>The '{0}' attribute of 'xsl:decimal-format' cannot be redefined with a value of '{1}'.</summary>
    internal static string @Xslt_DecimalFormatRedefined => GetResourceString("Xslt_DecimalFormatRedefined");
    /// <summary>'{0}' is not a recognized extension element.</summary>
    internal static string @Xslt_UnknownExtensionElement => GetResourceString("Xslt_UnknownExtensionElement");
    /// <summary>An 'xsl:template' element without a 'match' attribute cannot have a 'mode' attribute.</summary>
    internal static string @Xslt_ModeWithoutMatch => GetResourceString("Xslt_ModeWithoutMatch");
    /// <summary>List of modes in 'xsl:template' element can't be empty.</summary>
    internal static string @Xslt_ModeListEmpty => GetResourceString("Xslt_ModeListEmpty");
    /// <summary>List of modes in 'xsl:template' element can't contain duplicates ('{0}').</summary>
    internal static string @Xslt_ModeListDup => GetResourceString("Xslt_ModeListDup");
    /// <summary>List of modes in 'xsl:template' element can't contain token '#all' together with any other value.</summary>
    internal static string @Xslt_ModeListAll => GetResourceString("Xslt_ModeListAll");
    /// <summary>An 'xsl:template' element without a 'match' attribute cannot have a 'priority' attribute.</summary>
    internal static string @Xslt_PriorityWithoutMatch => GetResourceString("Xslt_PriorityWithoutMatch");
    /// <summary>An 'xsl:apply-imports' element can only occur within an 'xsl:template' element with a 'match' attribute, and cannot occur within an 'xsl:for-each' element.</summary>
    internal static string @Xslt_InvalidApplyImports => GetResourceString("Xslt_InvalidApplyImports");
    /// <summary>Value of parameter '{0}' cannot be specified more than once within a single 'xsl:call-template' or 'xsl:apply-templates' element.</summary>
    internal static string @Xslt_DuplicateWithParam => GetResourceString("Xslt_DuplicateWithParam");
    /// <summary>Elements and attributes cannot belong to the reserved namespace '{0}'.</summary>
    internal static string @Xslt_ReservedNS => GetResourceString("Xslt_ReservedNS");
    /// <summary>An attribute with a local name 'xmlns' and a null namespace URI cannot be created.</summary>
    internal static string @Xslt_XmlnsAttr => GetResourceString("Xslt_XmlnsAttr");
    /// <summary>An 'xsl:choose' element must have at least one 'xsl:when' child.</summary>
    internal static string @Xslt_NoWhen => GetResourceString("Xslt_NoWhen");
    /// <summary>'xsl:when' must precede the 'xsl:otherwise' element.</summary>
    internal static string @Xslt_WhenAfterOtherwise => GetResourceString("Xslt_WhenAfterOtherwise");
    /// <summary>An 'xsl:choose' element can have only one 'xsl:otherwise' child.</summary>
    internal static string @Xslt_DupOtherwise => GetResourceString("Xslt_DupOtherwise");
    /// <summary>Attribute '{0}' of 'xsl:output' cannot be defined more than once with the same import precedence.</summary>
    internal static string @Xslt_AttributeRedefinition => GetResourceString("Xslt_AttributeRedefinition");
    /// <summary>'{0}' is not a supported output method. Supported methods are 'xml', 'html', and 'text'.</summary>
    internal static string @Xslt_InvalidMethod => GetResourceString("Xslt_InvalidMethod");
    /// <summary>'{0}' is not a supported encoding name.</summary>
    internal static string @Xslt_InvalidEncoding => GetResourceString("Xslt_InvalidEncoding");
    /// <summary>'{0}' is not a supported language identifier.</summary>
    internal static string @Xslt_InvalidLanguage => GetResourceString("Xslt_InvalidLanguage");
    /// <summary>String comparison option(s) '{0}' are either invalid or cannot be used together.</summary>
    internal static string @Xslt_InvalidCompareOption => GetResourceString("Xslt_InvalidCompareOption");
    /// <summary>The 'key()' function cannot be used in 'use' and 'match' attributes of 'xsl:key' element.</summary>
    internal static string @Xslt_KeyNotAllowed => GetResourceString("Xslt_KeyNotAllowed");
    /// <summary>Variables cannot be used within this expression.</summary>
    internal static string @Xslt_VariablesNotAllowed => GetResourceString("Xslt_VariablesNotAllowed");
    /// <summary>The 'current()' function cannot be used in a pattern.</summary>
    internal static string @Xslt_CurrentNotAllowed => GetResourceString("Xslt_CurrentNotAllowed");
    /// <summary>Execution of the 'document()' function was prohibited. Use the XsltSettings.EnableDocumentFunction property to enable it.</summary>
    internal static string @Xslt_DocumentFuncProhibited => GetResourceString("Xslt_DocumentFuncProhibited");
    /// <summary>Execution of scripts was prohibited. Use the XsltSettings.EnableScript property to enable it.</summary>
    internal static string @Xslt_ScriptsProhibited => GetResourceString("Xslt_ScriptsProhibited");
    /// <summary>Extension functions cannot return null values.</summary>
    internal static string @Xslt_ItemNull => GetResourceString("Xslt_ItemNull");
    /// <summary>Cannot convert a node-set which contains zero nodes or more than one node to a single node.</summary>
    internal static string @Xslt_NodeSetNotNode => GetResourceString("Xslt_NodeSetNotNode");
    /// <summary>Extension function parameters or return values which have Clr type '{0}' are not supported.</summary>
    internal static string @Xslt_UnsupportedClrType => GetResourceString("Xslt_UnsupportedClrType");
    /// <summary>'{0}' is not yet implemented.</summary>
    internal static string @Xslt_NotYetImplemented => GetResourceString("Xslt_NotYetImplemented");
    /// <summary>'{0}' declaration is not permitted in non-schema aware processor.</summary>
    internal static string @Xslt_SchemaDeclaration => GetResourceString("Xslt_SchemaDeclaration");
    /// <summary>Attribute '{0}' is not permitted in basic XSLT processor (http://www.w3.org/TR/xslt20/#dt-basic-xslt-processor).</summary>
    internal static string @Xslt_SchemaAttribute => GetResourceString("Xslt_SchemaAttribute");
    /// <summary>Value '{1}' of attribute '{0}' is not permitted in basic XSLT processor (http://www.w3.org/TR/xslt20/#dt-basic-xslt-processor).</summary>
    internal static string @Xslt_SchemaAttributeValue => GetResourceString("Xslt_SchemaAttributeValue");
    /// <summary>The element '{0}' cannot have both a 'select' attribute and non-empty content.</summary>
    internal static string @Xslt_ElementCntSel => GetResourceString("Xslt_ElementCntSel");
    /// <summary>The element 'xsl:perform-sort' cannot have 'select' attribute any content other than 'xsl:sort' and 'xsl:fallback' instructions.</summary>
    internal static string @Xslt_PerformSortCntSel => GetResourceString("Xslt_PerformSortCntSel");
    /// <summary>Mandatory parameter '{0}' must be empty and must not have a 'select' attribute.</summary>
    internal static string @Xslt_RequiredAndSelect => GetResourceString("Xslt_RequiredAndSelect");
    /// <summary>Element '{0}' must have either 'select' attribute or non-empty content.</summary>
    internal static string @Xslt_NoSelectNoContent => GetResourceString("Xslt_NoSelectNoContent");
    /// <summary>Stylesheet or function parameter '{0}' cannot have attribute 'tunnel'.</summary>
    internal static string @Xslt_NonTemplateTunnel => GetResourceString("Xslt_NonTemplateTunnel");
    /// <summary>The 'required' attribute must not be specified for parameter '{0}'. Function parameters are always mandatory.</summary>
    internal static string @Xslt_RequiredOnFunction => GetResourceString("Xslt_RequiredOnFunction");
    /// <summary>Value '#default' is used within the 'exclude-result-prefixes' attribute and the parent element of this attribute has no default namespace.</summary>
    internal static string @Xslt_ExcludeDefault => GetResourceString("Xslt_ExcludeDefault");
    /// <summary>The value of an 'default-collation' attribute contains no recognized collation URI.</summary>
    internal static string @Xslt_CollationSyntax => GetResourceString("Xslt_CollationSyntax");
    /// <summary>'xsl:analyze-string' cannot have second child with name '{0}'.</summary>
    internal static string @Xslt_AnalyzeStringDupChild => GetResourceString("Xslt_AnalyzeStringDupChild");
    /// <summary>When both 'xsl:matching-string' and 'xsl:non-matching-string' elements are present, 'xsl:matching-string' element must come first.</summary>
    internal static string @Xslt_AnalyzeStringChildOrder => GetResourceString("Xslt_AnalyzeStringChildOrder");
    /// <summary>'xsl:analyze-string' must contain either 'xsl:matching-string' or 'xsl:non-matching-string' elements or both.</summary>
    internal static string @Xslt_AnalyzeStringEmpty => GetResourceString("Xslt_AnalyzeStringEmpty");
    /// <summary>Only the first 'xsl:sort' element may have 'stable' attribute.</summary>
    internal static string @Xslt_SortStable => GetResourceString("Xslt_SortStable");
    /// <summary>It is an error if there is a stylesheet module in the stylesheet that specifies 'input-type-annotations'="strip" and another stylesheet module that specifies 'input-type-annotations'="preserve".</summary>
    internal static string @Xslt_InputTypeAnnotations => GetResourceString("Xslt_InputTypeAnnotations");
    /// <summary>Collation option '{0}' is invalid. Options must have the following format: &lt;option-name&gt;=&lt;option-value&gt;.</summary>
    internal static string @Coll_BadOptFormat => GetResourceString("Coll_BadOptFormat");
    /// <summary>The collation '{0}' is not supported.</summary>
    internal static string @Coll_Unsupported => GetResourceString("Coll_Unsupported");
    /// <summary>Collation language '{0}' is not supported.</summary>
    internal static string @Coll_UnsupportedLanguage => GetResourceString("Coll_UnsupportedLanguage");
    /// <summary>Unsupported option '{0}' in collation.</summary>
    internal static string @Coll_UnsupportedOpt => GetResourceString("Coll_UnsupportedOpt");
    /// <summary>Collation option '{0}' cannot have the value '{1}'.</summary>
    internal static string @Coll_UnsupportedOptVal => GetResourceString("Coll_UnsupportedOptVal");
    /// <summary>Unsupported sort option '{0}' in collation.</summary>
    internal static string @Coll_UnsupportedSortOpt => GetResourceString("Coll_UnsupportedSortOpt");
    /// <summary>QIL Validation Error! '{0}'.</summary>
    internal static string @Qil_Validation => GetResourceString("Qil_Validation");
    /// <summary>Functions may not have more than 65535 parameters.</summary>
    internal static string @XmlIl_TooManyParameters => GetResourceString("XmlIl_TooManyParameters");
    /// <summary>An item of type '{0}' cannot be constructed within a node of type '{1}'.</summary>
    internal static string @XmlIl_BadXmlState => GetResourceString("XmlIl_BadXmlState");
    /// <summary>Attribute and namespace nodes cannot be added to the parent element after a text, comment, pi, or sub-element node has already been added.</summary>
    internal static string @XmlIl_BadXmlStateAttr => GetResourceString("XmlIl_BadXmlStateAttr");
    /// <summary>Namespace nodes cannot be added to the parent element after an attribute node has already been added.</summary>
    internal static string @XmlIl_NmspAfterAttr => GetResourceString("XmlIl_NmspAfterAttr");
    /// <summary>Cannot construct namespace declaration xmlns{0}{1}='{2}'. Prefix '{1}' is already mapped to namespace '{3}'.</summary>
    internal static string @XmlIl_NmspConflict => GetResourceString("XmlIl_NmspConflict");
    /// <summary>Cannot query the data source object referenced by URI '{0}', because the provided XmlResolver returned an object of type '{1}'. Only Stream, XmlReader, and IXPathNavigable data source objects are currently supported.</summary>
    internal static string @XmlIl_CantResolveEntity => GetResourceString("XmlIl_CantResolveEntity");
    /// <summary>Query requires a default data source, but no default was supplied to the query engine.</summary>
    internal static string @XmlIl_NoDefaultDocument => GetResourceString("XmlIl_NoDefaultDocument");
    /// <summary>Data source '{0}' cannot be located.</summary>
    internal static string @XmlIl_UnknownDocument => GetResourceString("XmlIl_UnknownDocument");
    /// <summary>Supplied XsltArgumentList does not contain a parameter with local name '{0}' and namespace '{1}'.</summary>
    internal static string @XmlIl_UnknownParam => GetResourceString("XmlIl_UnknownParam");
    /// <summary>Cannot find a script or an extension object associated with namespace '{0}'.</summary>
    internal static string @XmlIl_UnknownExtObj => GetResourceString("XmlIl_UnknownExtObj");
    /// <summary>Whitespace cannot be stripped from input documents that have already been loaded. Provide the input document as an XmlReader instead.</summary>
    internal static string @XmlIl_CantStripNav => GetResourceString("XmlIl_CantStripNav");
    /// <summary>An error occurred during a call to extension function '{0}'. See InnerException for a complete description of the error.</summary>
    internal static string @XmlIl_ExtensionError => GetResourceString("XmlIl_ExtensionError");
    /// <summary>XmlWriter cannot process the sequence returned by the query, because it contains an attribute or namespace node.</summary>
    internal static string @XmlIl_TopLevelAttrNmsp => GetResourceString("XmlIl_TopLevelAttrNmsp");
    /// <summary>Extension object '{0}' does not contain a matching '{1}' method that has {2} parameter(s).</summary>
    internal static string @XmlIl_NoExtensionMethod => GetResourceString("XmlIl_NoExtensionMethod");
    /// <summary>Ambiguous method call. Extension object '{0}' contains multiple '{1}' methods that have {2} parameter(s).</summary>
    internal static string @XmlIl_AmbiguousExtensionMethod => GetResourceString("XmlIl_AmbiguousExtensionMethod");
    /// <summary>Method '{1}' of extension object '{0}' cannot be called because it is not public.</summary>
    internal static string @XmlIl_NonPublicExtensionMethod => GetResourceString("XmlIl_NonPublicExtensionMethod");
    /// <summary>Method '{1}' of extension object '{0}' cannot be called because it is generic.</summary>
    internal static string @XmlIl_GenericExtensionMethod => GetResourceString("XmlIl_GenericExtensionMethod");
    /// <summary>Method '{1}' of extension object '{0}' cannot be called because it has one or more ByRef parameters.</summary>
    internal static string @XmlIl_ByRefType => GetResourceString("XmlIl_ByRefType");
    /// <summary>An error occurred while loading document '{0}'. See InnerException for a complete description of the error.</summary>
    internal static string @XmlIl_DocumentLoadError => GetResourceString("XmlIl_DocumentLoadError");
    /// <summary>XSLT compile error at {0}({1},{2}). See InnerException for details.</summary>
    internal static string @Xslt_CompileError => GetResourceString("Xslt_CompileError");
    /// <summary>XSLT compile error.</summary>
    internal static string @Xslt_CompileError2 => GetResourceString("Xslt_CompileError2");
    /// <summary>'{0}()' is an unsupported XSLT function.</summary>
    internal static string @Xslt_UnsuppFunction => GetResourceString("Xslt_UnsuppFunction");
    /// <summary>'xsl:import' instructions must precede all other element children of an 'xsl:stylesheet' element.</summary>
    internal static string @Xslt_NotFirstImport => GetResourceString("Xslt_NotFirstImport");
    /// <summary>'{0}' cannot be a child of the '{1}' element.</summary>
    internal static string @Xslt_UnexpectedKeyword => GetResourceString("Xslt_UnexpectedKeyword");
    /// <summary>The contents of '{0}' are invalid.</summary>
    internal static string @Xslt_InvalidContents => GetResourceString("Xslt_InvalidContents");
    /// <summary>Cannot resolve the referenced document '{0}'.</summary>
    internal static string @Xslt_CantResolve => GetResourceString("Xslt_CantResolve");
    /// <summary>Right curly brace in the attribute value template '{0}' must be doubled.</summary>
    internal static string @Xslt_SingleRightAvt => GetResourceString("Xslt_SingleRightAvt");
    /// <summary>The braces are not closed in AVT expression '{0}'.</summary>
    internal static string @Xslt_OpenBracesAvt => GetResourceString("Xslt_OpenBracesAvt");
    /// <summary>The literal in AVT expression is not correctly closed '{0}'.</summary>
    internal static string @Xslt_OpenLiteralAvt => GetResourceString("Xslt_OpenLiteralAvt");
    /// <summary>AVT cannot be nested in AVT '{0}'.</summary>
    internal static string @Xslt_NestedAvt => GetResourceString("Xslt_NestedAvt");
    /// <summary>XPath Expression in AVT cannot be empty: '{0}'.</summary>
    internal static string @Xslt_EmptyAvtExpr => GetResourceString("Xslt_EmptyAvtExpr");
    /// <summary>'{0}' is an invalid XPath expression.</summary>
    internal static string @Xslt_InvalidXPath => GetResourceString("Xslt_InvalidXPath");
    /// <summary>'{0}' is an invalid QName.</summary>
    internal static string @Xslt_InvalidQName => GetResourceString("Xslt_InvalidQName");
    /// <summary>The 'xsl:template' instruction must have the 'match' and/or 'name' attribute present.</summary>
    internal static string @Xslt_TemplateNoAttrib => GetResourceString("Xslt_TemplateNoAttrib");
    /// <summary>Variable or parameter '{0}' was duplicated within the same scope.</summary>
    internal static string @Xslt_DupVarName => GetResourceString("Xslt_DupVarName");
    /// <summary>XSLT function '{0}()' has the wrong number of arguments.</summary>
    internal static string @Xslt_WrongNumberArgs => GetResourceString("Xslt_WrongNumberArgs");
    /// <summary>Cannot convert the operand to a node-set.</summary>
    internal static string @Xslt_NoNodeSetConversion => GetResourceString("Xslt_NoNodeSetConversion");
    /// <summary>Cannot convert the operand to 'Result tree fragment'.</summary>
    internal static string @Xslt_NoNavigatorConversion => GetResourceString("Xslt_NoNavigatorConversion");
    /// <summary>Format cannot be empty.</summary>
    internal static string @Xslt_InvalidFormat => GetResourceString("Xslt_InvalidFormat");
    /// <summary>Format '{0}' cannot have digit symbol after zero digit symbol before a decimal point.</summary>
    internal static string @Xslt_InvalidFormat1 => GetResourceString("Xslt_InvalidFormat1");
    /// <summary>Format '{0}' cannot have zero digit symbol after digit symbol after decimal point.</summary>
    internal static string @Xslt_InvalidFormat2 => GetResourceString("Xslt_InvalidFormat2");
    /// <summary>Format '{0}' has two pattern separators.</summary>
    internal static string @Xslt_InvalidFormat3 => GetResourceString("Xslt_InvalidFormat3");
    /// <summary>Format '{0}' cannot have two decimal separators.</summary>
    internal static string @Xslt_InvalidFormat5 => GetResourceString("Xslt_InvalidFormat5");
    /// <summary>Format string should have at least one digit or zero digit.</summary>
    internal static string @Xslt_InvalidFormat8 => GetResourceString("Xslt_InvalidFormat8");
    /// <summary>Cannot find the script or external object that implements prefix '{0}'.</summary>
    internal static string @Xslt_ScriptInvalidPrefix => GetResourceString("Xslt_ScriptInvalidPrefix");
    /// <summary>Namespace '{0}' has a duplicate implementation.</summary>
    internal static string @Xslt_ScriptDub => GetResourceString("Xslt_ScriptDub");
    /// <summary>The 'msxsl:script' element cannot be empty.</summary>
    internal static string @Xslt_ScriptEmpty => GetResourceString("Xslt_ScriptEmpty");
    /// <summary>Decimal format '{0}' has a duplicate declaration.</summary>
    internal static string @Xslt_DupDecimalFormat => GetResourceString("Xslt_DupDecimalFormat");
    /// <summary>Circular reference in the definition of variable '{0}'.</summary>
    internal static string @Xslt_CircularReference => GetResourceString("Xslt_CircularReference");
    /// <summary>Extension namespace cannot be 'null' or an XSLT namespace URI.</summary>
    internal static string @Xslt_InvalidExtensionNamespace => GetResourceString("Xslt_InvalidExtensionNamespace");
    /// <summary>An 'xsl:template' element without a 'match' attribute cannot have a 'mode' attribute.</summary>
    internal static string @Xslt_InvalidModeAttribute => GetResourceString("Xslt_InvalidModeAttribute");
    /// <summary>There are multiple root elements in the output XML.</summary>
    internal static string @Xslt_MultipleRoots => GetResourceString("Xslt_MultipleRoots");
    /// <summary>The 'xsl:apply-imports' instruction cannot be included within the content of an 'xsl:for-each' instruction or within an 'xsl:template' instruction without the 'match' attribute.</summary>
    internal static string @Xslt_ApplyImports => GetResourceString("Xslt_ApplyImports");
    /// <summary>Transform terminated: '{0}'.</summary>
    internal static string @Xslt_Terminate => GetResourceString("Xslt_Terminate");
    /// <summary>'{0}' is an invalid XSLT pattern.</summary>
    internal static string @Xslt_InvalidPattern => GetResourceString("Xslt_InvalidPattern");
    /// <summary>Char is not a valid schema primitive and should be treated as int in DataContract</summary>
    internal static string @XmlInvalidCharSchemaPrimitive => GetResourceString("XmlInvalidCharSchemaPrimitive");
    /// <summary>Internal Error: Unrecognized constant type {0}.</summary>
    internal static string @UnknownConstantType => GetResourceString("UnknownConstantType");
    /// <summary>Array of type {0} is not supported.</summary>
    internal static string @ArrayTypeIsNotSupported => GetResourceString("ArrayTypeIsNotSupported");
    /// <summary>Type '{0}' cannot be serialized by XmlSerializer, serialization code for the type is missing. Consult the SDK documentation for adding it as a root serialization type. https://go.microsoft.com/fwlink/?LinkId=613136</summary>
    internal static string @Xml_MissingSerializationCodeException => GetResourceString("Xml_MissingSerializationCodeException");
    /// <summary>Uppercase-First sorting option is not supported.</summary>
    internal static string @Xslt_UpperCaseFirstNotSupported => GetResourceString("Xslt_UpperCaseFirstNotSupported");
    /// <summary>Cannot pre-generate serialization code for type '{0}'. Pre-generation of serialization assemblies is not supported for dynamic types. Save the assembly and load it from disk to use it with XmlSerialization.</summary>
    internal static string @XmlPregenTypeDynamic => GetResourceString("XmlPregenTypeDynamic");
    /// <summary>Cannot pre-generate serializer for multiple assemblies. Type '{0}' does not belong to assembly {1}.</summary>
    internal static string @XmlPregenOrphanType => GetResourceString("XmlPregenOrphanType");
    /// <summary>Cannot generate serialization code {0} because the code file already exists. Use /{1} to force an overwrite of the existing file.</summary>
    internal static string @ErrSerializerExists => GetResourceString("ErrSerializerExists");
    /// <summary>Cannot generate serialization code '{0}' because a directory with the same name already exists.</summary>
    internal static string @ErrDirectoryExists => GetResourceString("ErrDirectoryExists");
    /// <summary>Cannot generate serialization code because directory {0} doesn't exist.</summary>
    internal static string @ErrDirectoryNotExists => GetResourceString("ErrDirectoryNotExists");
    /// <summary>Ignoring invalid command line argument: '{0}'.</summary>
    internal static string @ErrInvalidArgument => GetResourceString("ErrInvalidArgument");
    /// <summary>Warning: {0}.</summary>
    internal static string @Warning => GetResourceString("Warning");
    /// <summary>Missing required command-line argument: {0}.</summary>
    internal static string @ErrMissingRequiredArgument => GetResourceString("ErrMissingRequiredArgument");
    /// <summary>The name of the source assembly.</summary>
    internal static string @ErrAssembly => GetResourceString("ErrAssembly");
    /// <summary>Generated serialization code for assembly {0} --&gt; '{1}'.</summary>
    internal static string @InfoGeneratedFile => GetResourceString("InfoGeneratedFile");
    /// <summary>Serialization Code File Name: {0}.</summary>
    internal static string @InfoFileName => GetResourceString("InfoFileName");
    /// <summary>Sgen utility failed to pregenerate serialization code for {0}.</summary>
    internal static string @ErrGenerationFailed => GetResourceString("ErrGenerationFailed");
    /// <summary>Error: {0}.</summary>
    internal static string @ErrorDetails => GetResourceString("ErrorDetails");
    /// <summary>Type '{0}' was not found in the assembly '{1}'.</summary>
    internal static string @ErrLoadType => GetResourceString("ErrLoadType");
    /// <summary>Access to directory {0} is denied.  The process under which XmlSerializer is running does not have sufficient permission to access the directory.</summary>
    internal static string @DirectoryAccessDenied => GetResourceString("DirectoryAccessDenied");
    /// <summary>File or assembly name '{0}', or one of its dependencies, was not found.</summary>
    internal static string @ErrLoadAssembly => GetResourceString("ErrLoadAssembly");
    /// <summary>Assembly '{0}' does not contain any types that can be serialized using XmlSerializer.</summary>
    internal static string @InfoNoSerializableTypes => GetResourceString("InfoNoSerializableTypes");
    /// <summary>Ignoring '{0}'.</summary>
    internal static string @InfoIgnoreType => GetResourceString("InfoIgnoreType");
    /// <summary>"Fail to load assembly {0} or {0} doesn't exist under PreGen Mode.</summary>
    internal static string @FailLoadAssemblyUnderPregenMode => GetResourceString("FailLoadAssemblyUnderPregenMode");
    /// <summary>Generates serialization code for use with XmlSerializer.
    /// The utility allows developers to pre-generate code for serialization
    /// building and deploying the assemblies with the application.</summary>
    internal static string @HelpDescription => GetResourceString("HelpDescription");
    /// <summary>Usage: dotnet {0} [--assembly &lt;assembly file path&gt;] [--type &lt;type name&gt;]</summary>
    internal static string @HelpUsage => GetResourceString("HelpUsage");
    /// <summary>Developer options:</summary>
    internal static string @HelpDevOptions => GetResourceString("HelpDevOptions");
    /// <summary>{0}|{1}   Assembly location or display name.</summary>
    internal static string @HelpAssembly => GetResourceString("HelpAssembly");
    /// <summary>{0}          Generate code for serialization/deserialization of the specified type from the input assembly.</summary>
    internal static string @HelpType => GetResourceString("HelpType");
    /// <summary>{0}         Forces overwrite of a previously generated assembly.</summary>
    internal static string @HelpForce => GetResourceString("HelpForce");
    /// <summary>{0}    Generate serialization code only for proxy classes and web method parameters.</summary>
    internal static string @HelpProxy => GetResourceString("HelpProxy");
    /// <summary>{0}|{1}        Output directory name (default: target assembly location).</summary>
    internal static string @HelpOut => GetResourceString("HelpOut");
    /// <summary>Miscellaneous options:</summary>
    internal static string @HelpMiscOptions => GetResourceString("HelpMiscOptions");
    /// <summary>{0}|{1}       Show help.</summary>
    internal static string @HelpHelp => GetResourceString("HelpHelp");
    /// <summary>If you would like more help, please type "sgen {0}".</summary>
    internal static string @MoreHelp => GetResourceString("MoreHelp");
    /// <summary>Method 'System.Xml.Serialization.XmlSerializer.GenerateSerializer' was not found. This is likely because you are using an older version of the framework. Please update to .NET Core v2.1 or later.</summary>
    internal static string @GenerateSerializerNotFound => GetResourceString("GenerateSerializerNotFound");
    /// <summary>Pre-generated serializer '{0}' has expired. You need to re-generate serializer for '{1}'</summary>
    internal static string @event_XmlSerializerExpired => GetResourceString("event_XmlSerializerExpired");
    /// <summary>Compiling JScript/CSharp scripts is not supported</summary>
    internal static string @CompilingScriptsNotSupported => GetResourceString("CompilingScriptsNotSupported");
    /// <summary>Importing {0} ({1}/{2})</summary>
    internal static string @ImportInfo => GetResourceString("ImportInfo");

  }
}
