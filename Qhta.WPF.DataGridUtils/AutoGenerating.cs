namespace Qhta.WPF.DataGridUtils;

/// <summary>
/// Utility class that helps to autogenerate <see cref="DataGridContentBoundColumn"/>
/// </summary>
public static class AutoGenerating
{
  /// <summary>
  /// Creates <see cref="DataGridContentBoundColumn"/> for ItemsSource thas have DataGridColumnAttribute (defined in Qhta.MVVM)
  /// 
  /// </summary>
  /// <param name="sender"></param>
  /// <param name="args"></param>
  public static void UseDataGridColumnAttribute(object sender, DataGridAutoGeneratingColumnEventArgs args)
  {
    var dataGrid = sender as DataGrid;
    if (dataGrid != null)
    {
      var items = dataGrid.ItemsSource;
      if (items != null)
      {
        var itemsType = items.GetType();
        if (itemsType.IsEnumerable(out var itemType))
        {
          var prop = itemType.GetProperty(args.PropertyName);
          if (prop != null)
          {
            var dataGridColumnAttr = prop.GetCustomAttribute<DataGridColumnAttribute>();
            if (dataGridColumnAttr != null && dataGridColumnAttr.IsAutoGenerated && args.Column is DataGridBoundColumn oldColumn)
            {
              var dataGridColumnDef = new DataGridColumnDef(oldColumn.Binding)
              {
                CanUserReorder = dataGridColumnAttr.CanUserReorder,
                CanUserResize = dataGridColumnAttr.CanUserResize,
                CanUserSort = dataGridColumnAttr.CanUserSort,
                ClipboardContentPath = dataGridColumnAttr.ClipboardContentPath,
                DisplayIndex = dataGridColumnAttr.DisplayIndex,
                Header = dataGridColumnAttr.Header ?? oldColumn.Header,
                HeaderStringFormat = dataGridColumnAttr.HeaderStringFormat ?? oldColumn.HeaderStringFormat,
                HeaderTemplate = args.Column.HeaderTemplate,
                IsReadOnly = dataGridColumnAttr.IsReadOnly,
                MaxWidth = dataGridColumnAttr.MaxWidth,
                MinWidth = dataGridColumnAttr.MinWidth,
                SortDirection = dataGridColumnAttr.SortDirection,
                SortMemberPath = dataGridColumnAttr.SortMemberPath,
                Visibility = dataGridColumnAttr.Visibility,
                Width = dataGridColumnAttr.Width,
              };
              if (dataGridColumnAttr.ResourceHeaderTemplateKey != null)
                dataGridColumnDef.HeaderTemplate = (DataTemplate)dataGrid.FindResource(dataGridColumnAttr.ResourceHeaderTemplateKey);
              DataTemplate? dataTemplate = null;
              if (dataGridColumnAttr.ResourceDataTemplateKey != null)
                dataTemplate = (DataTemplate)dataGrid.FindResource(dataGridColumnAttr.ResourceDataTemplateKey);
              DataTemplate? dataEditingTemplate = null;
              if (dataGridColumnAttr.ResourceDataEditingTemplateKey != null)
                dataEditingTemplate = (DataTemplate)dataGrid.FindResource(dataGridColumnAttr.ResourceDataEditingTemplateKey);
              if (dataTemplate!=null)
                args.Column = CreateColumn(dataGridColumnDef, dataTemplate, dataEditingTemplate);
              else
                FormatColumn(oldColumn, dataGridColumnDef);
            }
            else
              args.Cancel = true;
          }
        }
      }
    }
  }

  private static DataGridContentBoundColumn CreateColumn(DataGridColumnDef dataGridColumnData, DataTemplate contentTemplate,
    DataTemplate? contentEditingTemplate = null)
  {
    var newColumn = new DataGridContentBoundColumn();
    var aBinding = dataGridColumnData.Binding as Binding;
    newColumn.Binding = dataGridColumnData.Binding;
    newColumn.ContentTemplate = contentTemplate;
    if (contentEditingTemplate != null) 
      newColumn.ContentEditingTemplate = contentEditingTemplate;
    newColumn.Header = dataGridColumnData.Header;
    newColumn.SortMemberPath = dataGridColumnData.SortMemberPath;
    newColumn.ClipboardContentBinding =
        new Binding
        {
          Source = aBinding?.Source,
          Path = new PropertyPath(dataGridColumnData.ClipboardContentPath),
        };
    newColumn.CopyingCellClipboardContent += Col_CopyingCellClipboardContent;
    return newColumn;
  }

  private static void FormatColumn(DataGridColumn column, DataGridColumnDef dataGridColumnData)
  {
    if (dataGridColumnData.HeaderStringFormat != null)
      column.HeaderStringFormat = dataGridColumnData.HeaderStringFormat;
    var b = dataGridColumnData.IsReadOnly;
    if (b == true)
      column.IsReadOnly = (bool)b;
    column.MaxWidth = dataGridColumnData.MaxWidth;
    column.MinWidth = dataGridColumnData.MinWidth;
    var d = dataGridColumnData.Width;
    if (!double.IsNaN(d))
      column.Width = (double)d;
    column.CanUserReorder = dataGridColumnData.CanUserReorder;
    column.CanUserResize = dataGridColumnData.CanUserResize;
    column.CanUserSort = dataGridColumnData.CanUserSort;
    column.SortMemberPath = dataGridColumnData.SortMemberPath;
    column.SortDirection = dataGridColumnData.SortDirection;
    var s = dataGridColumnData.ClipboardContentPath;
    if (s != null)
      column.ClipboardContentBinding = new Binding(s);
    var n = dataGridColumnData.DisplayIndex;
    if (n >= 0)
      column.DisplayIndex = n;
    n = (int)Convert.ChangeType(dataGridColumnData.Visibility, typeof(int));
    column.Visibility = (System.Windows.Visibility)Enum.ToObject(typeof(System.Windows.Visibility), n);
  }

  private static void Col_CopyingCellClipboardContent(object? sender, DataGridCellClipboardEventArgs e)
  {
    var column = sender as DataGridContentBoundColumn;
    if (column != null)
    {
      var obj = e.Item;
      if (obj != null)
      {
        var binding = (column.ClipboardContentBinding as Binding);
        if (binding != null)
        {
          string boundProperty = binding.Path.Path;
          object? value = GetPropertyWithPath(obj, boundProperty);
          if (value != null)
          {
            var propertyValue = value.ToString();
            e.Content = propertyValue;
          }
        }
      }
    }
  }

  private static object? GetPropertyWithPath(object obj, string aPath)
  {
    var k = aPath.IndexOf(".");
    if (k > 0)
    {
      var propName = aPath.Substring(0, k);
      aPath = aPath.Substring(k + 1);
      PropertyInfo? pi = obj.GetType().GetProperty(propName);
      if (pi != null)
      {
        object? value = pi.GetValue(obj);
        if (value != null)
        {
          var propertyValue = GetPropertyWithPath(value, aPath);
          return propertyValue;
        }
      }
    }
    else
    {
      PropertyInfo? pi = obj.GetType().GetProperty(aPath);
      if (pi != null)
      {
        object? value = pi.GetValue(obj);
        if (value != null)
        {
          var propertyValue = value.ToString();
          return propertyValue;
        }
      }
    }
    return null;
  }
}

