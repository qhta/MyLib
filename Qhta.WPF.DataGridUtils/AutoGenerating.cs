namespace Qhta.WPF.DataGridUtils;

public static class AutoGenerating
{
  public static void UseDataGridColumnAttribute(object sender, DataGridAutoGeneratingColumnEventArgs e)
  {
    var dataGrid = sender as DataGrid;
    if (dataGrid != null)
    {
      var items = dataGrid.ItemsSource;
      if (items != null)
      {
        var itemsType = items.GetType();
        if (itemsType.IsEnumerable(out var itemType))
        {
          var prop = itemType.GetProperty(e.PropertyName);
          if (prop != null)
          {
            var dataGridColumnAttr = prop.GetCustomAttribute<DataGridColumnAttribute>();
            if (dataGridColumnAttr != null)
            {
              if (!dataGridColumnAttr.IsAutoGenerated)
                e.Cancel = true;
              else
              {
                if (dataGridColumnAttr.Header != null)
                  e.Column.Header = dataGridColumnAttr.Header;
                if (dataGridColumnAttr.HeaderStringFormat != null)
                  e.Column.HeaderStringFormat = dataGridColumnAttr.HeaderStringFormat;
                var b = dataGridColumnAttr.IsReadOnly;
                if (b == true)
                  e.Column.IsReadOnly = (bool)b;
                e.Column.MaxWidth = dataGridColumnAttr.MaxWidth;
                e.Column.MinWidth = dataGridColumnAttr.MinWidth;
                var d = dataGridColumnAttr.Width;
                if (!double.IsNaN(d))
                  e.Column.Width = (double)d;
                e.Column.CanUserReorder = dataGridColumnAttr.CanUserReorder;
                e.Column.CanUserResize = dataGridColumnAttr.CanUserResize;
                e.Column.CanUserSort = dataGridColumnAttr.CanUserSort;
                e.Column.SortMemberPath = dataGridColumnAttr.SortMemberPath;
                e.Column.SortDirection = dataGridColumnAttr.SortDirection;
                var s = dataGridColumnAttr.ClipboardContentPath;
                if (s != null)
                  e.Column.ClipboardContentBinding = new Binding(s);
                var n = dataGridColumnAttr.DisplayIndex;
                if (n >=0)
                  e.Column.DisplayIndex = n;
                n = (int)Convert.ChangeType(dataGridColumnAttr.Visibility, typeof(int));
                e.Column.Visibility = (System.Windows.Visibility)Enum.ToObject(typeof(System.Windows.Visibility), n);
              }
            }
          }
        }
      }
    }
  }


  public static void CreateCollectionCountColumn(object sender, DataGridAutoGeneratingColumnEventArgs e,
    string dataTemplateResourceName)
  {
    var dataGrid = sender as DataGrid;
    if (dataGrid != null)
    {
      if (e.PropertyType != typeof(string) && e.PropertyType.IsCollection())
      {
        var str = ((string)e.Column.Header);
        var ss = str.SplitCamelCase();
        for (int i = 1; i < ss.Length; i++)
          ss[i] = ss[i].ToLower();
        e.Column.Header = String.Join(" ", ss);

        DataTemplate? template = (DataTemplate)(dataGrid.FindResource(dataTemplateResourceName));
        if (template != null)
        {
          var aColumn = (DataGridBoundColumn)e.Column;
          var col = new DataGridCollectionBoundColumn();
          var aBinding = (Binding)aColumn.Binding;
          col.Binding = aBinding;
          col.ContentTemplate = template;
          col.Header = e.Column.Header;
          col.SortMemberPath = aBinding.Path.Path + ".Count";
          col.ClipboardContentBinding =
              new Binding
              {
                Source = aBinding.Source,
                Path = new PropertyPath(aBinding.Path.Path + ".Count"),
              };
          col.CopyingCellClipboardContent += Col_CopyingCellClipboardContent;
          e.Column = col;
        }
      }
    }
  }

  private static void Col_CopyingCellClipboardContent(object? sender, DataGridCellClipboardEventArgs e)
  {
    var column = sender as DataGridCollectionBoundColumn;
    if (column != null)
    {
      var obj = e.Item;
      if (obj != null)
      {
        var binding = (column.ClipboardContentBinding as Binding);
        if (binding != null)
        {
          string boundProperty = binding.Path.Path;
          object? value = GetPropertyWithPath(obj, boundProperty);
          if (value != null)
          {
            var propertyValue = value.ToString();
            e.Content = propertyValue;
          }
        }
      }
    }
  }

  private static object? GetPropertyWithPath(object obj, string aPath)
  {
    var k = aPath.IndexOf(".");
    if (k > 0)
    {
      var propName = aPath.Substring(0, k);
      aPath = aPath.Substring(k + 1);
      PropertyInfo? pi = obj.GetType().GetProperty(propName);
      if (pi != null)
      {
        object? value = pi.GetValue(obj);
        if (value != null)
        {
          var propertyValue = GetPropertyWithPath(value, aPath);
          return propertyValue;
        }
      }
    }
    else
    {
      PropertyInfo? pi = obj.GetType().GetProperty(aPath);
      if (pi != null)
      {
        object? value = pi.GetValue(obj);
        if (value != null)
        {
          var propertyValue = value.ToString();
          return propertyValue;
        }
      }
    }
    return null;
  }
}

