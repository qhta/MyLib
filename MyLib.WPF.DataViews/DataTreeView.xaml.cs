using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;
using MyLib.MVVM;

namespace Wordnet.APP.Views
{
  /// <summary>
  /// Interaction logic for DataSetView.xaml
  /// </summary>
  public partial class DataTreeView : UserControl
  {
    public DataTreeView()
    {
      InitializeComponent();
    }
    private void DataGrid_AutoGeneratingColumn(object sender, DataGridAutoGeneratingColumnEventArgs e)
    {
      //Debug.WriteLine($"DataSetView.DataGrid.AutoGeneratingColumn({e.Column.Header})");
    }

    private void DataGrid_AutoGeneratedColumns(object sender, EventArgs e)
    {
      DataGrid dataGrid = sender as DataGrid;
      List<DataGridColumn> columns = dataGrid.Columns.ToList();
      List<DataColumnViewModel> columnNames = (DataContext as DataSetViewModel).VisibleColumns;
      if (columnNames!=null)
      {
        dataGrid.Columns.Clear();
        foreach (var column in columnNames)
        {
          var dataGridColumn = columns.Where(item =>
            column.Property.Equals(item.Header as String, StringComparison.CurrentCultureIgnoreCase)).FirstOrDefault();
          if (dataGridColumn!=null)
          {
            if (column.Header!=null)
              dataGridColumn.Header = column.Header;
            if (column.MinWidth>0)
              dataGridColumn.MinWidth = column.MinWidth;
            if (column.MaxWidth>0)
              dataGridColumn.MaxWidth = column.MaxWidth;
            if (column.Width>0)
              dataGridColumn.Width = column.Width;
            dataGrid.Columns.Add(dataGridColumn);
          }
        }
      }
    }

    private void Expander_Expanded(object sender, RoutedEventArgs e)
    {
      for (var vis = sender as Visual; vis != null; vis = VisualTreeHelper.GetParent(vis) as Visual)
        if (vis is DataGridRow)
        {
          var row = (DataGridRow)vis;
          row.DetailsVisibility = row.DetailsVisibility == Visibility.Visible ? Visibility.Collapsed : Visibility.Visible;
          break;
        }
    }

    private void Expander_Collapsed(object sender, RoutedEventArgs e)
    {
      for (var vis = sender as Visual; vis != null; vis = VisualTreeHelper.GetParent(vis) as Visual)
        if (vis is DataGridRow)
        {
          var row = (DataGridRow)vis;
          row.DetailsVisibility = row.DetailsVisibility == Visibility.Visible ? Visibility.Collapsed : Visibility.Visible;
          break;
        }
    }

  }
}
