<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Qhta.Xml.Reflection</name>
    </assembly>
    <members>
        <member name="T:Qhta.Xml.Reflection.ArrayContentInfo">
            <summary>
            Information on item type for array types
            </summary>
        </member>
        <member name="P:Qhta.Xml.Reflection.ArrayContentInfo.ValueTypeInfo">
            <summary>
            The value type information.
            </summary>
        </member>
        <member name="M:Qhta.Xml.Reflection.ArrayContentInfo.Equals(Qhta.Xml.Reflection.ContentInfo)">
            <summary>
            Determines whether the specified <see cref="T:Qhta.Xml.Reflection.ContentInfo"/> is equal to the current <see cref="T:Qhta.Xml.Reflection.ContentInfo"/>.
            </summary>
        </member>
        <member name="T:Qhta.Xml.Reflection.CollectionContentInfo">
            <summary>
            Information on item type for collection types
            </summary>
        </member>
        <member name="T:Qhta.Xml.Reflection.ContentInfo">
            <summary>
            Information on type content. It is used for array, collection or dictionary types.
            </summary>
        </member>
        <member name="P:Qhta.Xml.Reflection.ContentInfo.StoresReferences">
            <summary>
             If a collection of objects stores references only.
            </summary>
        </member>
        <member name="P:Qhta.Xml.Reflection.ContentInfo.KnownItemTypes">
            <summary>
              Known types for collection items.
            </summary>
        </member>
        <member name="M:Qhta.Xml.Reflection.ContentInfo.Equals(Qhta.Xml.Reflection.ContentInfo)">
            <summary>
            Indicates whether the content info object is equal to another object of the same type.
            Checks StoresReferences and KnownItemTypes for equality.
            </summary>
        </member>
        <member name="T:Qhta.Xml.Reflection.DictionaryContentInfo">
            <summary>
            Represents information on content of the dictionary type.
            </summary>
        </member>
        <member name="P:Qhta.Xml.Reflection.DictionaryContentInfo.KeyTypeInfo">
            <summary>
            The key type information.
            </summary>
        </member>
        <member name="P:Qhta.Xml.Reflection.DictionaryContentInfo.KeyName">
            <summary>
            Gets or sets the name of the key.
            </summary>
            <value>
            The name of the key.
            </value>
        </member>
        <member name="M:Qhta.Xml.Reflection.DictionaryContentInfo.Equals(Qhta.Xml.Reflection.ContentInfo)">
            <summary>
            Determines whether the specified <see cref="T:Qhta.Xml.Reflection.ContentInfo"/> is equal to the current <see cref="T:Qhta.Xml.Reflection.ContentInfo"/>.
            </summary>
        </member>
        <member name="T:Qhta.Xml.Reflection.IMembersDictionary">
            <summary>
            Interface for KnownMembersCollection to be used as a dictionary
            </summary>
        </member>
        <member name="M:Qhta.Xml.Reflection.IMembersDictionary.ContainsKey(Qhta.Xml.QualifiedName)">
            <summary>
            Checks if it contains a qualified name (name with namespace) as an item key.
            </summary>
            <param name="qualifiedName">QualifiedName to search</param>
            <returns><c>true</c> if name found, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Qhta.Xml.Reflection.IMembersDictionary.ContainsKey(System.String)">
            <summary>
            Checks if it contains a simple name (without namespace) as an item key.
            </summary>
            <param name="name">Simple name to search</param>
            <returns><c>true</c> if name found, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Qhta.Xml.Reflection.IMembersDictionary.TryGetValue(Qhta.Xml.QualifiedName,Qhta.Xml.Reflection.SerializationMemberInfo@)">
            <summary>
            Tries to get an item searching its qualified name (name with namespace).
            </summary>
            <param name="qualifiedName">QualifiedName to search</param>
            <param name="typeInfo">FoundSerializationMemberInfo (or null when not found).</param>
            <returns><c>true</c> if name found, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Qhta.Xml.Reflection.IMembersDictionary.TryGetValue(System.String,Qhta.Xml.Reflection.SerializationMemberInfo@)">
            <summary>
            Tries to get an item searching its simple name (without namespace).
            </summary>
            <param name="name">Simple name to search</param>
            <param name="typeInfo">FoundSerializationMemberInfo (or null when not found).</param>
            <returns><c>true</c> if name found, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:Qhta.Xml.Reflection.INamedElement">
            <summary>
            Interface for an element that provides XML name, XML namespace, and ClrNamespace
            </summary>
        </member>
        <member name="P:Qhta.Xml.Reflection.INamedElement.XmlName">
            <summary>
            Gets the name of the XML element.
            </summary>
        </member>
        <member name="P:Qhta.Xml.Reflection.INamedElement.XmlNamespace">
            <summary>
            Gets the namespace of the XML element.
            </summary>
        </member>
        <member name="P:Qhta.Xml.Reflection.INamedElement.ClrNamespace">
            <summary>
            Gets the programming language namespace of the element.
            </summary>
        </member>
        <member name="P:Qhta.Xml.Reflection.INamedElement.QualifiedName">
            <summary>
            Gets the qualified name (XmlName, XmlNamespace) of the element
            </summary>
        </member>
        <member name="T:Qhta.Xml.Reflection.ITypeNameInfo">
            <summary>
            Extension for INamedElement that provides a Type
            </summary>
            <seealso cref="T:Qhta.Xml.Reflection.INamedElement" />
        </member>
        <member name="P:Qhta.Xml.Reflection.ITypeNameInfo.Type">
            <summary>
            Gets the original type.
            </summary>
        </member>
        <member name="T:Qhta.Xml.Reflection.KnownItemTypesCollection">
            <summary>
            Named collection of serialization item info. Needed for serialization.
            </summary>
        </member>
        <member name="M:Qhta.Xml.Reflection.KnownItemTypesCollection.Add(Qhta.Xml.Reflection.SerializationItemInfo)">
            <summary>
            Adds an item to collection.
            </summary>
            <param name="item">The object to add. />.</param>
        </member>
        <member name="T:Qhta.Xml.Reflection.KnownMembersCollection">
            <summary>
            Named collection of serialization member info.
            </summary>
        </member>
        <member name="M:Qhta.Xml.Reflection.KnownMembersCollection.#ctor(Qhta.Xml.Reflection.SerializationTypeInfo)">
            <summary>
            Initializing constructor
            </summary>
            <param name="ownerTypeInfo"></param>
        </member>
        <member name="M:Qhta.Xml.Reflection.KnownMembersCollection.Dump(System.String,Qhta.Xml.Reflection.KnownNamespacesCollection)">
            <summary>
            Dumps collection to debug output window
            </summary>
            <param name="header">The header.</param>
            <param name="KnownNamespaces">The known namespaces.</param>
        </member>
        <member name="T:Qhta.Xml.Reflection.KnownNamespacesCollection">
            <summary>
            Named collection of xml namespace info
            </summary>
        </member>
        <member name="F:Qhta.Xml.Reflection.KnownNamespacesCollection.Items">
            <summary>
            String indexed items
            </summary>
        </member>
        <member name="P:Qhta.Xml.Reflection.KnownNamespacesCollection.ClrToXmlNamespace">
            <summary>
            Conversion dictionary from C# language namespace to xml namespace
            </summary>
        </member>
        <member name="P:Qhta.Xml.Reflection.KnownNamespacesCollection.XmlNamespaceToPrefix">
            <summary>
            Conversion dictionary from xml namespace to xml prefix
            </summary>
        </member>
        <member name="P:Qhta.Xml.Reflection.KnownNamespacesCollection.PrefixToXmlNamespace">
            <summary>
            Conversion dictionary from xml prefix to xml namespace
            </summary>
        </member>
        <member name="T:Qhta.Xml.Reflection.KnownTypesCollection">
            <summary>
            Named collection of serialization type info
            </summary>
        </member>
        <member name="M:Qhta.Xml.Reflection.KnownTypesCollection.#ctor(Qhta.Xml.Reflection.KnownNamespacesCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:Qhta.Xml.Reflection.KnownTypesCollection"/> class.
            </summary>
            <param name="knownNamespaces">Known namespaces collection.</param>
        </member>
        <member name="M:Qhta.Xml.Reflection.KnownTypesCollection.Dump">
            <summary>
            Dumps this instance to debug output window
            </summary>
        </member>
        <member name="M:Qhta.Xml.Reflection.KnownTypesCollection.Dump(Qhta.Xml.Reflection.SerializationTypeInfo)">
            <summary>
            Dumps the specified type information to debug output window
            </summary>
            <param name="typeInfo">The type information.</param>
        </member>
        <member name="T:Qhta.Xml.Reflection.MappingHelper">
            <summary>
            Helper class with methods used in XmlSerializationInfoMapper 
            </summary>
        </member>
        <member name="F:Qhta.Xml.Reflection.MappingHelper.xsiNamespace">
            <summary>
            URL to XML schema instance
            </summary>
        </member>
        <member name="F:Qhta.Xml.Reflection.MappingHelper.xsdNamespace">
            <summary>
            URL to XML schema
            </summary>
        </member>
        <member name="M:Qhta.Xml.Reflection.MappingHelper.GetTypeTag(System.Type)">
            <summary>
            Creates a tag from a Type. Tag is a full name with two exceptions:
            <list type="bullet">
            <item>
            When a namespace is "System", only type name is returned.
            </item>
            <item>
            When a full name ends with [], then it is changed to "s" suffix.
            </item>
            </list>
            </summary>
            <param name="aType">Type to get name</param>
            <returns>Type tag string</returns>
        </member>
        <member name="M:Qhta.Xml.Reflection.MappingHelper.ChangeCase(System.String,Qhta.Xml.Reflection.NameCase)">
            <summary>
            Changes string case according to the specified mode
            </summary>
            <param name="str">String to change case.</param>
            <param name="nameCase">Mode as enumerated by <see cref="T:Qhta.Xml.Reflection.NameCase"/> type.</param>
            <returns>String with changed case</returns>
        </member>
        <member name="M:Qhta.Xml.Reflection.MappingHelper.FirstLetterToLower(System.String)">
            <summary>
            Changes first letter of the text to lowercase.
            </summary>
        </member>
        <member name="M:Qhta.Xml.Reflection.MappingHelper.FirstLetterToUpper(System.String)">
            <summary>
            Changes first letter of the text to uppercase.
            </summary>
        </member>
        <member name="M:Qhta.Xml.Reflection.MappingHelper.IsFirstLetterLower(System.String)">
            <summary>
            Checks if the first letter of the text is lowercase.
            </summary>
        </member>
        <member name="M:Qhta.Xml.Reflection.MappingHelper.IsFirstLetterUpper(System.String)">
            <summary>
            Checks if the first letter of the text is uppercase.
            </summary>
        </member>
        <member name="M:Qhta.Xml.Reflection.MappingHelper.EncodeStringValue(System.String)">
            <summary>
            Encodes string value to handle invisible chars according to unicode category
            </summary>
        </member>
        <member name="M:Qhta.Xml.Reflection.MappingHelper.EncodeCharValue(System.Char)">
            <summary>
            Encodes string value to handle control chars
            </summary>
        </member>
        <member name="M:Qhta.Xml.Reflection.MappingHelper.DecodeStringValue(System.String)">
            <summary>
            Decodes string value to handle encoded characters.
            </summary>
        </member>
        <member name="M:Qhta.Xml.Reflection.MappingHelper.DecodeEscapeSeq(System.String,System.Int32@)">
            <summary>
            Decodes a single escape char sequence.
            </summary>
        </member>
        <member name="T:Qhta.Xml.Reflection.MappingOptions">
            <summary>
            Class containing mapping options.
            </summary>
        </member>
        <member name="P:Qhta.Xml.Reflection.MappingOptions.IgnoreMissingConstructor">
            <summary>
              Types to be deserialized must have parameterless constructor.
              Whether a type found during scanning available types hase no public parameterless constructor,
              the exception is thrown unless this option is set.
            </summary>
        </member>
        <member name="P:Qhta.Xml.Reflection.MappingOptions.AcceptAllProperties">
            <summary>
              Whether properties not marked with any XmlAttribute/XmlElement attributes are to be serialized.
            </summary>
        </member>
        <member name="P:Qhta.Xml.Reflection.MappingOptions.AcceptDataMembers">
            <summary>
              Whether only properties marked with DataMember attribute are to be serialized.
             XmlAttribute/XmlElement attributes are also recognized.
            </summary>
        </member>
        <member name="P:Qhta.Xml.Reflection.MappingOptions.AcceptFields">
            <summary>
              Whether fields are to be serialized along with properties.
            </summary>
        </member>
        <member name="P:Qhta.Xml.Reflection.MappingOptions.SimplePropertiesAsAttributes">
            <summary>
              Whether simple type properties not marked with any XmlAttribute are to be serialized as attributes.
            </summary>
        </member>
        <member name="P:Qhta.Xml.Reflection.MappingOptions.UniqueMemberTypesAsContentElements">
            <summary>
              Whether members with unique types that are serialized as element are to be serialized as contentElements (without element tag).
            </summary>
        </member>
        <member name="P:Qhta.Xml.Reflection.MappingOptions.AttributeNameCase">
            <summary>
              Whether XML attribute names should change case on serialization.
            </summary>
        </member>
        <member name="P:Qhta.Xml.Reflection.MappingOptions.ElementNameCase">
            <summary>
              Whether XML element names should change case on serialization.
            </summary>
        </member>
        <member name="P:Qhta.Xml.Reflection.MappingOptions.CheckMethod">
            <summary>
              Generic name of the method used to specify if a property should be serialized.
              Asterisk represents a property name.
              The method should be a parameterless function of type boolean.
            </summary>
        </member>
        <member name="T:Qhta.Xml.Reflection.NameCase">
            <summary>
            Specifies modes for name case change.
            </summary>
        </member>
        <member name="F:Qhta.Xml.Reflection.NameCase.Unchanged">
            <summary>
            Leave unchanged
            </summary>
        </member>
        <member name="F:Qhta.Xml.Reflection.NameCase.LowercaseFirstLetter">
            <summary>
            Turn first letter to lowercase
            </summary>
        </member>
        <member name="F:Qhta.Xml.Reflection.NameCase.UppercaseFirstLetter">
            <summary>
            Turn first letter to uppercase
            </summary>
        </member>
        <member name="T:Qhta.Xml.Reflection.PropOrderComparer">
            <summary>
            Class to compare order of properties for serialization.
            </summary>
        </member>
        <member name="M:Qhta.Xml.Reflection.PropOrderComparer.Compare(Qhta.Xml.Reflection.SerializationMemberInfo,Qhta.Xml.Reflection.SerializationMemberInfo)">
            <summary>
            Compares two serialization member info objecst.
            </summary>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <returns>
            A signed integer that indicates the relative values of <paramref name="x" /> and <paramref name="y" />, as shown in the following table.
            <list type="table">
            <listheader><term> Value</term><description> Meaning</description></listheader><item>
            <term> Less than zero</term><description><paramref name="x" /> is less than <paramref name="y" />.</description>
            </item><item><term> Zero</term><description><paramref name="x" /> equals <paramref name="y" />.</description>
            </item><item><term> Greater than zero</term><description><paramref name="x" /> is greater than <paramref name="y" />.</description>
            </item></list>
            </returns>
        </member>
        <member name="T:Qhta.Xml.Reflection.SerializationItemInfo">
            <summary>
              Info of an array property item
            </summary>
        </member>
        <member name="M:Qhta.Xml.Reflection.SerializationItemInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Qhta.Xml.Reflection.SerializationItemInfo"/> class.
            </summary>
        </member>
        <member name="M:Qhta.Xml.Reflection.SerializationItemInfo.#ctor(Qhta.Xml.Reflection.SerializationTypeInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Qhta.Xml.Reflection.SerializationItemInfo"/> class
            using serialization type info.
            </summary>
            <param name="itemTypeInfo">The type info.</param>
        </member>
        <member name="M:Qhta.Xml.Reflection.SerializationItemInfo.#ctor(System.String,Qhta.Xml.Reflection.SerializationTypeInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Qhta.Xml.Reflection.SerializationItemInfo"/> class
            using serialization type info with element name.
            </summary>
            <param name="elementName">Name of the element.</param>
            <param name="itemTypeInfo">The type info.</param>
        </member>
        <member name="M:Qhta.Xml.Reflection.SerializationItemInfo.#ctor(System.String,System.String,Qhta.Xml.Reflection.SerializationTypeInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Qhta.Xml.Reflection.SerializationItemInfo"/> class
            using serialization type info with element name and namespace.
            </summary>
            <param name="elementName">Name of the element.</param>
            <param name="xmlNamespace">Xml Uri namespace</param>
            <param name="itemTypeInfo">The type info.</param>
        </member>
        <member name="P:Qhta.Xml.Reflection.SerializationItemInfo.TypeInfo">
            <summary>
              Refers to the existing TypeInfo
            </summary>
        </member>
        <member name="P:Qhta.Xml.Reflection.SerializationItemInfo.DictionaryInfo">
            <summary>
              Used when this info is a dictionary item info
            </summary>
        </member>
        <member name="P:Qhta.Xml.Reflection.SerializationItemInfo.KeyName">
            <summary>
              Used when this info is a dictionary item info
            </summary>
        </member>
        <member name="P:Qhta.Xml.Reflection.SerializationItemInfo.KeyTypeInfo">
            <summary>
              Used when this info is a dictionary item info
            </summary>
        </member>
        <member name="P:Qhta.Xml.Reflection.SerializationItemInfo.ValueTypeInfo">
            <summary>
              Used when this info is a dictionary item info
            </summary>
        </member>
        <member name="P:Qhta.Xml.Reflection.SerializationItemInfo.Value">
            <summary>
              Preset value of the item
            </summary>
        </member>
        <member name="P:Qhta.Xml.Reflection.SerializationItemInfo.AddMethod">
            <summary>
              Used to add item to collection or dictionary
            </summary>
        </member>
        <member name="P:Qhta.Xml.Reflection.SerializationItemInfo.XmlName">
            <summary>
              Name of the Xml element
            </summary>
        </member>
        <member name="P:Qhta.Xml.Reflection.SerializationItemInfo.XmlNamespace">
            <summary>
              XmlNamespace of the element
            </summary>
        </member>
        <member name="P:Qhta.Xml.Reflection.SerializationItemInfo.ClrNamespace">
            <summary>
              ClrNamespace of the element
            </summary>
        </member>
        <member name="P:Qhta.Xml.Reflection.SerializationItemInfo.Type">
            <summary>
            Gets the original type.
            </summary>
        </member>
        <member name="M:Qhta.Xml.Reflection.SerializationItemInfo.ToString">
            <summary>
            Converts to string in format "name(typename)".
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="P:Qhta.Xml.Reflection.SerializationItemInfo.QualifiedName">
            <summary>
            Gets the qualified name (XmlName, XmlNamespace) of the element
            </summary>
        </member>
        <member name="T:Qhta.Xml.Reflection.SerializationMemberInfo">
            <summary>
              Represents the information about property or field needed for serialization/deserialization.
            </summary>
        </member>
        <member name="M:Qhta.Xml.Reflection.SerializationMemberInfo.#ctor(Qhta.Xml.Reflection.SerializationTypeInfo,System.String,System.Reflection.MemberInfo,System.Int32)">
            <summary>
              Constructor with parameters.
            </summary>
            <param name="parentType">A type to hold this member</param>
            <param name="name">Attribute or element name used for serialization></param>
            <param name="memberInfo">Applied member info. It can be either PropertyInfo or FieldInfo</param>
            <param name="order">Needed to sort the order for serialization</param>
        </member>
        <member name="M:Qhta.Xml.Reflection.SerializationMemberInfo.#ctor(Qhta.Xml.Reflection.SerializationTypeInfo,Qhta.Xml.QualifiedName,System.Reflection.MemberInfo,System.Int32)">
            <summary>
              Constructor with parameters.
            </summary>
            <param name="parentType">A type to hold this member</param>
            <param name="name">Attribute or element name used for serialization></param>
            <param name="memberInfo">Applied member info. It can be either PropertyInfo or FieldInfo</param>
            <param name="order">Needed to sort the order for serialization</param>
        </member>
        <member name="P:Qhta.Xml.Reflection.SerializationMemberInfo.ParentType">
            <summary>
            A serialization info for the type where this member belongs.
            </summary>
        </member>
        <member name="P:Qhta.Xml.Reflection.SerializationMemberInfo.IsField">
            <summary>
            Gets a value indicating whether the member is a field of some class
            </summary>
            <value>
              <c>true</c> if this instance is field; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Qhta.Xml.Reflection.SerializationMemberInfo.Field">
            <summary>
            Converts the member to field reflection info
            </summary>
        </member>
        <member name="P:Qhta.Xml.Reflection.SerializationMemberInfo.Property">
            <summary>
            Converts the member to property reflection info
            </summary>
        </member>
        <member name="P:Qhta.Xml.Reflection.SerializationMemberInfo.MemberType">
            <summary>
            Gets the member type (field type or property type).
            </summary>
        </member>
        <member name="P:Qhta.Xml.Reflection.SerializationMemberInfo.CanWrite">
            <summary>
            Gets a value indicating whether the member can be written in a class instance.
            </summary>
        </member>
        <member name="P:Qhta.Xml.Reflection.SerializationMemberInfo.IsAttribute">
            <summary>
            Specifies whether serialization as XML attribute is preferred over XML element.
            </summary>
        </member>
        <member name="P:Qhta.Xml.Reflection.SerializationMemberInfo.Order">
            <summary>
              Needed to sort the order of properties for serialization.
            </summary>
        </member>
        <member name="P:Qhta.Xml.Reflection.SerializationMemberInfo.Member">
            <summary>
              Applied member info.
            </summary>
        </member>
        <member name="P:Qhta.Xml.Reflection.SerializationMemberInfo.IsCompositeKey">
            <summary>
            Specifies whether the member is part of composite key (multiple members forming a key).
            </summary>
        </member>
        <member name="P:Qhta.Xml.Reflection.SerializationMemberInfo.MoreMembers">
            <summary>
              More members if it is composite key.
            </summary>
        </member>
        <member name="P:Qhta.Xml.Reflection.SerializationMemberInfo.DataType">
            <summary>
              XSD standard data type for simple value text conversion.
            </summary>
        </member>
        <member name="P:Qhta.Xml.Reflection.SerializationMemberInfo.Format">
            <summary>
              Specific format for text conversion.
            </summary>
        </member>
        <member name="P:Qhta.Xml.Reflection.SerializationMemberInfo.Culture">
            <summary>
              Specific culture info for text conversion.
            </summary>
        </member>
        <member name="P:Qhta.Xml.Reflection.SerializationMemberInfo.IsContentElement">
            <summary>
              Specifies whether a member is serialized as parent element content
              (without xml property tag).
            </summary>
        </member>
        <member name="P:Qhta.Xml.Reflection.SerializationMemberInfo.IsNullable">
            <summary>
              Specifies whether a member is nullable.
            </summary>
        </member>
        <member name="P:Qhta.Xml.Reflection.SerializationMemberInfo.IsReference">
            <summary>
              Specifies whether a member is serialized as a reference to an object.
            </summary>
        </member>
        <member name="P:Qhta.Xml.Reflection.SerializationMemberInfo.IdProperty">
            <summary>
              Specifies Id property of referenced type.
            </summary>
        </member>
        <member name="P:Qhta.Xml.Reflection.SerializationMemberInfo.DefaultValue">
            <summary>
              Specifies a default value (for simple types only) which is not serialized.
            </summary>
        </member>
        <member name="P:Qhta.Xml.Reflection.SerializationMemberInfo.ValueType">
            <summary>
              Applied type info of the member value.
            </summary>
        </member>
        <member name="P:Qhta.Xml.Reflection.SerializationMemberInfo.TypeConverter">
            <summary>
              Used for conversion value from/to string.
            </summary>
        </member>
        <member name="P:Qhta.Xml.Reflection.SerializationMemberInfo.XmlConverter">
            <summary>
              Used for conversion value from/to xml.
            </summary>
        </member>
        <member name="P:Qhta.Xml.Reflection.SerializationMemberInfo.CheckMethod">
            <summary>
              A method used to specify if a member should be serialized at run-time.
              The method should be a parameterless function of type boolean.
            </summary>
        </member>
        <member name="P:Qhta.Xml.Reflection.SerializationMemberInfo.HasCheckMethod">
            <summary>
            Specifies whether this instance has a check method.
            </summary>
        </member>
        <member name="P:Qhta.Xml.Reflection.SerializationMemberInfo.IsPolymorphic">
            <summary>
            Gets a value indicating whether this instance has known subtypes.
            </summary>
            <value>
              <c>true</c> if this instance is polymorphic; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Qhta.Xml.Reflection.SerializationMemberInfo.KnownSubtypes">
            <summary>
              If a valueType can be substituted by subclasses then these classes are listed here.
            </summary>
        </member>
        <member name="P:Qhta.Xml.Reflection.SerializationMemberInfo.IsCollection">
            <summary>
              Specifies whether the type is serialized as a collection but not as a dictionary
            </summary>
        </member>
        <member name="P:Qhta.Xml.Reflection.SerializationMemberInfo.IsDictionary">
            <summary>
              Specifies whether the type is serialized as a dictionary but not as a collection
            </summary>
        </member>
        <member name="P:Qhta.Xml.Reflection.SerializationMemberInfo.IsObject">
            <summary>
              Specifies whether the type instance must be serialized as an object, not a simple collection.
            </summary>
        </member>
        <member name="P:Qhta.Xml.Reflection.SerializationMemberInfo.ContentInfo">
            <summary>
              Optional collection info filled if a member is an array, collection or dictionary.
            </summary>
        </member>
        <member name="M:Qhta.Xml.Reflection.SerializationMemberInfo.CompareTo(Qhta.Xml.Reflection.SerializationMemberInfo)">
            <summary>
            Compares the order of two instances. Allows two items of the same order to occur in dictionary.
            </summary>
            <param name="other">An object to compare with this instance.</param>
            <returns>
            A value that indicates the relative order of the objects being compared. The return value has these meanings:
            <list type="table"><listheader><term> Value</term><description> Meaning</description></listheader><item><term> Less than zero</term><description> This instance precedes <paramref name="other" /> in the sort order.</description></item><item><term> Zero</term><description> This instance occurs in the same position in the sort order as <paramref name="other" />.</description></item><item><term> Greater than zero</term><description> This instance follows <paramref name="other" /> in the sort order.</description></item></list>
            </returns>
        </member>
        <member name="P:Qhta.Xml.Reflection.SerializationMemberInfo.XmlName">
            <summary>
              Attribute or element name used for serialization.
            </summary>
        </member>
        <member name="P:Qhta.Xml.Reflection.SerializationMemberInfo.XmlNamespace">
            <summary>
              Attribute or element XML namespace used for serialization.
            </summary>
        </member>
        <member name="P:Qhta.Xml.Reflection.SerializationMemberInfo.ClrNamespace">
            <summary>
              ClrNamespace of the property or field.
            </summary>
        </member>
        <member name="P:Qhta.Xml.Reflection.SerializationMemberInfo.QualifiedName">
            <summary>
            Gets the qualified name (XmlName, XmlNamespace) of the element.
            </summary>
        </member>
        <member name="M:Qhta.Xml.Reflection.SerializationMemberInfo.GetValue(System.Object)">
            <summary>
            Gets the value of the member (field value or property value).
            </summary>
            <param name="obj">The object.</param>
            <returns></returns>
        </member>
        <member name="M:Qhta.Xml.Reflection.SerializationMemberInfo.SetValue(System.Object,System.Object)">
            <summary>
            Sets the value of the member (field value or property value).
            </summary>
            <param name="obj">The object.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Qhta.Xml.Reflection.SerializationMemberInfo.GetKnownSubtypes">
            <summary>
              Gets known subtypes as saved or from ValueType.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Qhta.Xml.Reflection.SerializationMemberInfo.GetCollectionInfo">
            <summary>
              Gets CollectionInfo as saved or from ValueType.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Qhta.Xml.Reflection.SerializationMemberInfo.ToString">
            <summary>
            Converts to string in format 'name(member-name)'
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:Qhta.Xml.Reflection.SerializationMemberInfo.GetTypeConverter">
            <summary>
            Gets the type converter to serialize/deserialize as a string.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Qhta.Xml.Reflection.SerializationTypeInfo">
            <summary>
            Information needed for type serialization
            </summary>
            <seealso cref="T:Qhta.Xml.Reflection.ITypeNameInfo" />
            <seealso cref="T:Qhta.Xml.Reflection.INamedElement" />
        </member>
        <member name="M:Qhta.Xml.Reflection.SerializationTypeInfo.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Qhta.Xml.Reflection.SerializationTypeInfo"/> class.
            </summary>
            <param name="aType">a type.</param>
        </member>
        <member name="P:Qhta.Xml.Reflection.SerializationTypeInfo.IsFullyResolved">
            <summary>
            Specifies whether all information on type are resolved.
            </summary>
        </member>
        <member name="P:Qhta.Xml.Reflection.SerializationTypeInfo.HasKnownConstructor">
            <summary>
            Gets a value indicating whether this instance has known constructor.
            </summary>
            <value>
              <c>true</c> if this instance has known constructor; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Qhta.Xml.Reflection.SerializationTypeInfo.KnownConstructor">
            <summary>
            A public constructor info to invoke while deserialization
            </summary>
        </member>
        <member name="P:Qhta.Xml.Reflection.SerializationTypeInfo.TypeConverter">
            <summary>
              Converter to/from string value.
            </summary>
        </member>
        <member name="P:Qhta.Xml.Reflection.SerializationTypeInfo.XmlConverter">
            <summary>
              Converter to read/write XML.
            </summary>
        </member>
        <member name="P:Qhta.Xml.Reflection.SerializationTypeInfo.KnownMembers">
            <summary>
              Known properties to serialize as XML attributes.
            </summary>
        </member>
        <member name="P:Qhta.Xml.Reflection.SerializationTypeInfo.MembersAsAttributes">
            <summary>
              Known properties to serialize as XML attributes.
            </summary>
        </member>
        <member name="P:Qhta.Xml.Reflection.SerializationTypeInfo.MembersAsElements">
            <summary>
              Known properties to serialize as XML elements.
            </summary>
        </member>
        <member name="P:Qhta.Xml.Reflection.SerializationTypeInfo.TextProperty">
            <summary>
              Known property to accept text content of XmlElement.
            </summary>
        </member>
        <member name="P:Qhta.Xml.Reflection.SerializationTypeInfo.IsSealed">
            <summary>
            Specifies that a derived types can't occur when serializing object values.
            </summary>
        </member>
        <member name="P:Qhta.Xml.Reflection.SerializationTypeInfo.KnownSubtypes">
            <summary>
              If a class can be substituted by subclasses then these classes are listed here.
            </summary>
        </member>
        <member name="P:Qhta.Xml.Reflection.SerializationTypeInfo.IsArray">
            <summary>
              Specifies whether the type is serialized as an array.
            </summary>
        </member>
        <member name="P:Qhta.Xml.Reflection.SerializationTypeInfo.IsCollection">
            <summary>
              Specifies whether the type is serialized as a collection.
            </summary>
        </member>
        <member name="P:Qhta.Xml.Reflection.SerializationTypeInfo.IsDictionary">
            <summary>
              Specifies whether the type is serialized as a dictionary.
            </summary>
        </member>
        <member name="P:Qhta.Xml.Reflection.SerializationTypeInfo.ContentProperty">
            <summary>
              Known property to accept content of XmlElement.
            </summary>
        </member>
        <member name="P:Qhta.Xml.Reflection.SerializationTypeInfo.IdProperty">
            <summary>
              Property that represents the unique identifier of the element.
            </summary>
        </member>
        <member name="P:Qhta.Xml.Reflection.SerializationTypeInfo.IsObject">
            <summary>
              Specifies whether the type instance must be serialized as an object, not a simple collection.
            </summary>
        </member>
        <member name="P:Qhta.Xml.Reflection.SerializationTypeInfo.ContentInfo">
            <summary>
              Optional filled for array, collection or dictionary types.
            </summary>
        </member>
        <member name="P:Qhta.Xml.Reflection.SerializationTypeInfo.XmlName">
            <summary>
              Name of the Xml element
            </summary>
        </member>
        <member name="P:Qhta.Xml.Reflection.SerializationTypeInfo.XmlNamespace">
            <summary>
              XmlNamespace of the element
            </summary>
        </member>
        <member name="P:Qhta.Xml.Reflection.SerializationTypeInfo.ClrNamespace">
            <summary>
              ClrNamespace of the element
            </summary>
        </member>
        <member name="P:Qhta.Xml.Reflection.SerializationTypeInfo.Type">
            <summary>
              Mapped type
            </summary>
        </member>
        <member name="M:Qhta.Xml.Reflection.SerializationTypeInfo.ShouldSerializeType">
            <summary>
            Gets the value that indicates whether the type should be serialized.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Qhta.Xml.Reflection.SerializationTypeInfo.ShouldSerializePropertiesAsAttributes">
            <summary>
            Gets the value that indicates whether there are properties to be serialized as xml attributes.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Qhta.Xml.Reflection.SerializationTypeInfo.ShouldSerializePropertiesAsElements">
            <summary>
            Gets the value that indicates whether there are properties to be serialized as xml properties.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Qhta.Xml.Reflection.SerializationTypeInfo.ToString">
            <summary>
            Converts to string in format "namespace:name"
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="P:Qhta.Xml.Reflection.SerializationTypeInfo.QualifiedName">
            <summary>
            Gets the qualified name (XmlName, XmlNamespace) of the element
            </summary>
        </member>
        <member name="T:Qhta.Xml.Reflection.TypeInfoCollection`1">
            <summary>
            Collection of type name info, which is indexed by type, long name and by short name.
            </summary>
            <typeparam name="TypeNameInfo">The type of the ype name information.</typeparam>
        </member>
        <member name="P:Qhta.Xml.Reflection.TypeInfoCollection`1.TypeIndexedItems">
            <summary>
            Dictionary of items indexed by type.
            </summary>
            <value>
            The type indexed items.
            </value>
        </member>
        <member name="P:Qhta.Xml.Reflection.TypeInfoCollection`1.FullNameIndexedItems">
            <summary>
            Dictionary of items indexed by full name.
            </summary>
            <value>
            The full name indexed items.
            </value>
        </member>
        <member name="P:Qhta.Xml.Reflection.TypeInfoCollection`1.ShortNameIndexedItems">
            <summary>
            Dictionary of items indexed by short name. 
            If some types have same names (and different namespaces), 
            they are registered in <see cref="P:Qhta.Xml.Reflection.TypeInfoCollection`1.DuplicatedShortNames"/>
            </summary>
            <value>
            The short name indexed items.
            </value>
        </member>
        <member name="P:Qhta.Xml.Reflection.TypeInfoCollection`1.DuplicatedShortNames">
            <summary>
            Gets the duplicated short type names.
            The concrete classes can be found in <see cref="P:Qhta.Xml.Reflection.TypeInfoCollection`1.FullNameIndexedItems"/>
            </summary>
            <value>
            The duplicated short names.
            </value>
        </member>
        <member name="M:Qhta.Xml.Reflection.TypeInfoCollection`1.Add(`0)">
            <summary>
            Adds an item to collection.
            </summary>
            <param name="item">The object to add. />.</param>
        </member>
        <member name="M:Qhta.Xml.Reflection.TypeInfoCollection`1.Clear">
            <summary>
            Removes all items from the collection.
            </summary>
        </member>
        <member name="M:Qhta.Xml.Reflection.TypeInfoCollection`1.Remove(`0)">
            <summary>
            Removes the  occurrence of a specific object from the collection />.
            </summary>
            <param name="item">The object to remove from the collection.</param>
            <returns>
              <see langword="true" /> if <paramref name="item" /> was successfully removed from the collection; otherwise, <see langword="false" />. 
              This method also returns <see langword="false" /> if <paramref name="item" /> is not found in the original collection.
            </returns>
        </member>
        <member name="P:Qhta.Xml.Reflection.TypeInfoCollection`1.IsReadOnly">
            <summary>
            Gets a value indicating whether the collection is read-only.
            </summary>
        </member>
        <member name="M:Qhta.Xml.Reflection.TypeInfoCollection`1.Equals(Qhta.Xml.Reflection.TypeInfoCollection{`0})">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
              <see langword="true" /> if the current object is equal to the <paramref name="other" /> parameter; 
              otherwise, <see langword="false" />.
            </returns>
        </member>
        <member name="M:Qhta.Xml.Reflection.TypeInfoCollection`1.TryGetValue(System.Type,`0@)">
            <summary>
            Tries to get the element from the collection indexed by type.
            </summary>
            <param name="type">The type of the searched element.</param>
            <param name="typeInfo">variable to hold the element id found.</param>
            <returns>
              <see langword="true" /> if the element is found; otherwise, <see langword="false" />.
            </returns>
        </member>
        <member name="M:Qhta.Xml.Reflection.TypeInfoCollection`1.TryGetValue(Qhta.Xml.QualifiedName,`0@)">
            <summary>
            Tries to get the element from the collection indexed by full name.
            </summary>
            <param name="qualifiedName">The qualified name of the searched element.</param>
            <param name="typeInfo">variable to hold the element id found.</param>
            <returns>
              <see langword="true" /> if the element is found; otherwise, <see langword="false" />.
            </returns>
        </member>
        <member name="M:Qhta.Xml.Reflection.TypeInfoCollection`1.TryGetValue(Qhta.Xml.XmlQualifiedTagName,`0@)">
            <summary>
            Tries to get the element from the collection indexed by full or short name.
            First the full name index is searched, and if not found then the short name index.
            </summary>
            <param name="tag">The xml qualified tag name of the searched element.</param>
            <param name="typeInfo">variable to hold the element id found.</param>
            <returns>
              <see langword="true" /> if the element is found; otherwise, <see langword="false" />.
            </returns>
        </member>
        <member name="M:Qhta.Xml.Reflection.TypeInfoCollection`1.TryGetValue(System.String,`0@)">
            <summary>
            Tries to get the element from the collection indexed by full or short name.
            First the full name index is searched, and if not found then the short name index.
            </summary>
            <param name="name">Full or short name of the searched element.</param>
            <param name="typeInfo">variable to hold the element id found.</param>
            <returns>
              <see langword="true" /> if the element is found; otherwise, <see langword="false" />.
            </returns>
        </member>
        <member name="M:Qhta.Xml.Reflection.TypeInfoCollection`1.FindTypeInfo(System.Type)">
            <summary>
            Finds the type information by querying the collection.
            </summary>
            <param name="itemType">Type of the item.</param>
            <returns></returns>
        </member>
        <member name="P:Qhta.Xml.Reflection.TypeInfoCollection`1.Keys">
            <summary>
             Type keys stored in collection
            </summary>
            <value>
            The keys.
            </value>
        </member>
        <member name="T:Qhta.Xml.Reflection.XmlNamespaceInfo">
            <summary>
            Compounf information for xml namespace. 
            Contains the xml namespace (uri), C# namespace, xml prefix.
            </summary>
        </member>
        <member name="M:Qhta.Xml.Reflection.XmlNamespaceInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Qhta.Xml.Reflection.XmlNamespaceInfo"/> class.
            </summary>
        </member>
        <member name="M:Qhta.Xml.Reflection.XmlNamespaceInfo.#ctor(System.Xml.XmlQualifiedName)">
            <summary>
            Initializes a new instance of the <see cref="T:Qhta.Xml.Reflection.XmlNamespaceInfo"/> class
            using xml qualified name
            </summary>
            <param name="qname">Xml qualified name.</param>
        </member>
        <member name="P:Qhta.Xml.Reflection.XmlNamespaceInfo.XmlNamespace">
            <summary>
            Gets or sets the XML namespace (uri)
            </summary>
            <value>
            The XML namespace.
            </value>
        </member>
        <member name="P:Qhta.Xml.Reflection.XmlNamespaceInfo.ClrNamespace">
            <summary>
            Gets or sets the C# namespace.
            </summary>
            <value>
            The C# namespace.
            </value>
        </member>
        <member name="P:Qhta.Xml.Reflection.XmlNamespaceInfo.Prefix">
            <summary>
            Gets or sets the XML prefix.
            </summary>
            <value>
            The prefix.
            </value>
        </member>
        <member name="P:Qhta.Xml.Reflection.XmlNamespaceInfo.IsUsed">
            <summary>
            Gets or sets a flag indicating whether this instance is used.
            </summary>
            <value>
              <c>true</c> if this instance is used; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Qhta.Xml.Reflection.XmlNamespaceInfo.ToString">
            <summary>
            Converts to string for debugging.
            </summary>
        </member>
        <member name="T:Qhta.Xml.Reflection.XmlSerializationInfoMapper">
            <summary>
              The purpose of this class is to build serialization info on types and properties
              and map xml element or attribute names to this info.
            </summary>
        </member>
        <member name="M:Qhta.Xml.Reflection.XmlSerializationInfoMapper.#ctor(Qhta.Xml.Reflection.MappingOptions,System.String)">
            <summary>
              To create a mapper you need serialization options.
            </summary>
            <param name="options">Instance of the serialization options - set only once</param>
            <param name="defaultNamespace">default namespace for elements</param>
        </member>
        <member name="P:Qhta.Xml.Reflection.XmlSerializationInfoMapper.DefaultNamespace">
            <summary>
              A XML namespace of the main type.
            </summary>
        </member>
        <member name="P:Qhta.Xml.Reflection.XmlSerializationInfoMapper.KnownNamespaces">
            <summary>
            A collection of known namespaces for serialization and deserialization.
            </summary>
        </member>
        <member name="P:Qhta.Xml.Reflection.XmlSerializationInfoMapper.Options">
            <summary>
              Only some of the options are used:
              <list type="bullet">
                <item>
                  <see cref="P:Qhta.Xml.Reflection.MappingOptions.IgnoreMissingConstructor" />
                  <see cref="P:Qhta.Xml.Reflection.MappingOptions.AttributeNameCase" />
                  <see cref="P:Qhta.Xml.Reflection.MappingOptions.ElementNameCase" />
                </item>
              </list>
            </summary>
        </member>
        <member name="P:Qhta.Xml.Reflection.XmlSerializationInfoMapper.KnownTypes">
            <summary>
              The dictionary of the types known to the serializer.
              Types are registered by the name of the type or by <see cref="T:System.Xml.Serialization.XmlRootAttribute" />,
              <see cref="T:Qhta.Xml.XmlCollectionAttribute" />, or <see cref="T:Qhta.Xml.XmlDictionaryAttribute" />.
            </summary>
        </member>
        <member name="P:Qhta.Xml.Reflection.XmlSerializationInfoMapper.TypeConverters">
            <summary>
            Registered type converters dictionary. The string key is the full type name.
            </summary>
        </member>
        <member name="M:Qhta.Xml.Reflection.XmlSerializationInfoMapper.RegisterType(System.Type)">
            <summary>
            Frequently used method to register a type and create its serialization type info.
            If a type is already registered, its previously created serialization type info is returned.
            </summary>
        </member>
        <member name="M:Qhta.Xml.Reflection.XmlSerializationInfoMapper.CreateTypeInfo(System.Type)">
            <summary>
              A method to create type info from a type.
              If it is a nullable type, then type info is created from it's base type.
            </summary>
            <param name="aType"></param>
            <returns></returns>
        </member>
        <member name="M:Qhta.Xml.Reflection.XmlSerializationInfoMapper.FillTypeInfo(Qhta.Xml.Reflection.SerializationTypeInfo)">
            <summary>
              This method fills the <see cref="T:Qhta.Xml.Reflection.SerializationTypeInfo" /> parameter
              with data taken from a type.
            </summary>
            <param name="typeInfo"></param>
            <exception cref="T:System.InvalidOperationException">
              Thrown if a type has no parameterless public constructor
              and an option <see cref="P:Qhta.Xml.Reflection.MappingOptions.IgnoreMissingConstructor" /> is not set.
            </exception>
        </member>
        <member name="M:Qhta.Xml.Reflection.XmlSerializationInfoMapper.MapPropertiesAndFields(Qhta.Xml.Reflection.SerializationTypeInfo)">
            <summary>
            Recognizes type properties and fields (according to Options) and map the, to member info collection.
            </summary>
            <param name="typeInfo"></param>
        </member>
        <member name="M:Qhta.Xml.Reflection.XmlSerializationInfoMapper.TryAddMemberAsAttribute(Qhta.Xml.Reflection.SerializationTypeInfo,System.Reflection.MemberInfo,System.Xml.Serialization.XmlAttributeAttribute,System.Int32)">
            <summary>
              Adds property/field to <see cref="P:Qhta.Xml.Reflection.SerializationTypeInfo.MembersAsAttributes" />
            </summary>
            <param name="typeInfo">Object to add to</param>
            <param name="memberInfo">Selected property/field</param>
            <param name="xmlAttribute">Found XmlAttributeAttribute</param>
            <param name="defaultOrder">Default order of serialized attribute</param>
        </member>
        <member name="M:Qhta.Xml.Reflection.XmlSerializationInfoMapper.TryAddMemberAsElement(Qhta.Xml.Reflection.SerializationTypeInfo,System.Reflection.MemberInfo,System.Xml.Serialization.XmlElementAttribute,System.Int32)">
            <summary>
              Adds property/field to <see cref="P:Qhta.Xml.Reflection.SerializationTypeInfo.MembersAsElements" />
            </summary>
            <param name="typeInfo">Object to add to</param>
            <param name="memberInfo">Selected property/field</param>
            <param name="xmlAttribute">Found XmlElementAttribute</param>
            <param name="defaultOrder">default order</param>
        </member>
        <member name="M:Qhta.Xml.Reflection.XmlSerializationInfoMapper.TryAddMemberAsContentElement(Qhta.Xml.Reflection.SerializationTypeInfo,System.Reflection.MemberInfo,System.Int32)">
            <summary>
              Adds property/field to <see cref="P:Qhta.Xml.Reflection.SerializationTypeInfo.MembersAsElements" /> 
              with no member tag serialization. Only class tag is serialized.
            </summary>
            <param name="typeInfo">Object to add to</param>
            <param name="memberInfo">Selected property/field</param>
            <param name="defaultOrder">default order</param>
        </member>
        <member name="M:Qhta.Xml.Reflection.XmlSerializationInfoMapper.TryAddMemberAsDictionary(Qhta.Xml.Reflection.SerializationTypeInfo,System.Reflection.MemberInfo,Qhta.Xml.XmlDictionaryAttribute,System.Int32)">
            <summary>
              Adds property/field to <see cref="P:Qhta.Xml.Reflection.SerializationTypeInfo.MembersAsElements" /> with <see cref="T:Qhta.Xml.Reflection.DictionaryContentInfo" />
            </summary>
            <param name="typeInfo">Object to add to</param>
            <param name="memberInfo">Selected property/field</param>
            <param name="attribute">Found XmlDictionaryAttribute</param>
            <param name="defaultOrder">default order</param>
        </member>
        <member name="M:Qhta.Xml.Reflection.XmlSerializationInfoMapper.TryAddMemberAsCollection(Qhta.Xml.Reflection.SerializationTypeInfo,System.Reflection.MemberInfo,System.Xml.Serialization.XmlArrayAttribute,System.Int32)">
            <summary>
              Adds property/field to <see cref="P:Qhta.Xml.Reflection.SerializationTypeInfo.MembersAsElements" /> with <see cref="T:Qhta.Xml.Reflection.CollectionContentInfo" />
            </summary>
            <param name="typeInfo">Object to add to</param>
            <param name="memberInfo">Selected property/field</param>
            <param name="attribute">Found XmlCollectionAttribute</param>
            <param name="defaultOrder">default order</param>
        </member>
        <member name="M:Qhta.Xml.Reflection.XmlSerializationInfoMapper.CreateSerializationMemberInfo(Qhta.Xml.Reflection.SerializationTypeInfo,Qhta.Xml.QualifiedName,System.Reflection.MemberInfo,System.Int32)">
            <summary>
            Creates serialization member info for a member info.
            </summary>
            <param name="typeInfo">Type to which the member belongs.</param>
            <param name="name">Qualified attribute or element name.</param>
            <param name="memberInfo">Member info to create serialization member info</param>
            <param name="order">Order of the attribute or element</param>
            <returns>Created serialization member info</returns>
        </member>
        <member name="M:Qhta.Xml.Reflection.XmlSerializationInfoMapper.GetIdProperty(Qhta.Xml.Reflection.SerializationTypeInfo)">
            <summary>
            Gets a property which is indented to be serialized as identifier the entity.
            First a property which is marked with <see cref="T:System.ComponentModel.DataAnnotations.KeyAttribute"/> is searched.
            If there is more than one such property, then properties are sorted by <see cref="P:System.ComponentModel.DataAnnotations.Schema.ColumnAttribute.Order"/>
            If no property is marked with [Key], then properties started with "Id" or as "[TypeName]Id" or named as "Name" are searched.
            Only the first such property is used. If others are found, an exception is thrown.
            When the id property is found, it is registered in serialization type info.
            </summary>
            <param name="typeInfo">Serialization info for type to reflect</param>
            <returns>A serialization property info or null if not found</returns>
            <exception cref="T:System.InvalidOperationException">
              If a property pointed out with <see cref="T:Qhta.Xml.Serialization.XmlContentPropertyAttribute" /> is not found.
            </exception>
        </member>
        <member name="M:Qhta.Xml.Reflection.XmlSerializationInfoMapper.GetKeyProperties(System.Type)">
            <summary>
            Helper method to get properties marked with [Key] attribute from the type.
            </summary>
            <param name="type"></param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Qhta.Xml.Reflection.XmlSerializationInfoMapper.GetTextProperty(Qhta.Xml.Reflection.SerializationTypeInfo)">
            <summary>
              Registers a property which is indented to be serialized as a text content of the Xml element.
              This is the first property which is marked with <see cref="T:System.Xml.Serialization.XmlTextAttribute" />.
              Note that only the first found property is used. If others are found, an exception is thrown.
            </summary>
            <param name="typeInfo">Serialization info for type to reflect</param>
            <returns>A serialization property info or null if not found</returns>
            <exception cref="T:System.InvalidOperationException">
              If a property pointed out with <see cref="T:Qhta.Xml.Serialization.XmlContentPropertyAttribute" /> is not found.
            </exception>
        </member>
        <member name="M:Qhta.Xml.Reflection.XmlSerializationInfoMapper.GetContentProperty(Qhta.Xml.Reflection.SerializationTypeInfo)">
            <summary>
              Registers a property which is indented to get/set Xml content of the Xml element.
              This property are marked in the type header with <see cref="T:Qhta.Xml.Serialization.XmlContentPropertyAttribute" />.
              Note that System.Windows.Markup.ContentPropertyAttribute is not used to avoid the need of System.Xaml
              package.
            </summary>
            <param name="typeInfo">Serialization info for type to reflect</param>
            <returns>A serialization property info or null if not found</returns>
            <exception cref="T:System.InvalidOperationException">
              If a property pointed out with <see cref="T:Qhta.Xml.Serialization.XmlContentPropertyAttribute" /> is not found.
            </exception>
        </member>
        <member name="M:Qhta.Xml.Reflection.XmlSerializationInfoMapper.GetKnownTypes(System.Type)">
            <summary>
             Get types which are assigned to the class with KnownType attribute.
             Searches a type assembly for types inherited from the type.
            </summary>
            <param name="aType">Type to reflect</param>
            <returns>A dictionary of known item types (or null) if no KnownType attributes found)</returns>
        </member>
        <member name="M:Qhta.Xml.Reflection.XmlSerializationInfoMapper.SearchInheritedTypes(System.Type,System.Reflection.Assembly,Qhta.Xml.Reflection.KnownTypesCollection)">
            <summary>
            Searches
            </summary>
            <param name="aType"></param>
            <param name="assembly"></param>
            <param name="knownTypes"></param>
        </member>
        <member name="M:Qhta.Xml.Reflection.XmlSerializationInfoMapper.GetTypeConverter(System.Type)">
            <summary>
              Gets a type converter for a type. It can be pointed out with a
              <see cref="T:System.ComponentModel.TypeConverterAttribute" />
              in a header of the type. This attribute holds the converter type name.
              To use the converter, it must be defined in the same assembly as the type
              and must have a parameterless public constructor.
            </summary>
            <param name="aType">A type fo reflect</param>
            <returns>Type converter instance</returns>
            <exception cref="T:System.InvalidOperationException">
              Thrown in two cases:
              <list type="number">
                <item>Type converter of the specified name could not be found</item>
                <item>Type converter can not convert to/from string type</item>
              </list>
            </exception>
        </member>
        <member name="M:Qhta.Xml.Reflection.XmlSerializationInfoMapper.GetXmlConverter(System.Type)">
            <summary>
              Registers a converter to read/write using XmlReader/XmlWriter.
              This converter is declared in the type header with <see cref="T:Qhta.Xml.XmlConverterAttribute" />.
            </summary>
            <param name="aType">Type to reflect</param>
        </member>
        <member name="M:Qhta.Xml.Reflection.XmlSerializationInfoMapper.GetXmlTag(System.Type)">
            <summary>
            Gets a qualified tag name for the type.
            If a type is registered in <see cref="P:Qhta.Xml.Reflection.XmlSerializationInfoMapper.KnownTypes"/>, its tag name is returned.
            Otherwise, a new qualified tag name is created for the type.
            </summary>
        </member>
        <member name="M:Qhta.Xml.Reflection.XmlSerializationInfoMapper.GetXmlTag(Qhta.Xml.Reflection.INamedElement)">
            <summary>
            Gets a qualified tag name for the named element.
            If a type is registered in <see cref="P:Qhta.Xml.Reflection.XmlSerializationInfoMapper.KnownTypes"/>, its tag name is returned.
            Otherwise, a new qualified tag name is created for the type.
            </summary>
        </member>
        <member name="M:Qhta.Xml.Reflection.XmlSerializationInfoMapper.ToQualifiedName(System.String)">
            <summary>
            Creates a qualified name for a full type name.
            </summary>
        </member>
        <member name="M:Qhta.Xml.Reflection.XmlSerializationInfoMapper.ToQualifiedName(Qhta.Xml.XmlQualifiedTagName)">
            <summary>
            Converts a qualified xml tag name to a qualified name.
            </summary>
        </member>
        <member name="M:Qhta.Xml.Reflection.XmlSerializationInfoMapper.CreateContentInfo(System.Reflection.MemberInfo)">
            <summary>
            Helper method that creates a content member info for a member.
            </summary>
        </member>
        <member name="M:Qhta.Xml.Reflection.XmlSerializationInfoMapper.GetCollectionInfo(System.Type)">
            <summary>
            Helper method that creates a content member info for a type.
            </summary>
        </member>
        <member name="M:Qhta.Xml.Reflection.XmlSerializationInfoMapper.GetCollectionInfo(System.Reflection.MemberInfo)">
            <summary>
            Helper method that creates a collection info for a member.
            </summary>
        </member>
        <member name="M:Qhta.Xml.Reflection.XmlSerializationInfoMapper.RegisterCollectionItemInfo(System.Type)">
            <summary>
            Helper method that creates and registers a content item info for a collection type.
            </summary>
        </member>
        <member name="M:Qhta.Xml.Reflection.XmlSerializationInfoMapper.CreateCollectionTypeInfo(System.Type,System.Xml.Serialization.XmlArrayItemAttribute[])">
            <summary>
            Helper method that creates a collection info for a collection type with specified XmlArrayItem attributes.
            Remember that XmlArrayItem attributes can be used for type members but not for types.
            </summary>
        </member>
        <member name="M:Qhta.Xml.Reflection.XmlSerializationInfoMapper.CreateDictionaryInfo(System.Type)">
            <summary>
            Helper method that creates dictionary info for a type.
            </summary>
        </member>
        <member name="M:Qhta.Xml.Reflection.XmlSerializationInfoMapper.CreateDictionaryInfo(System.Reflection.MemberInfo)">
            <summary>
            Helper method that creates dictionary info for a member.
            </summary>
        </member>
        <member name="M:Qhta.Xml.Reflection.XmlSerializationInfoMapper.CreateDictionaryInfo(System.Type,System.Collections.Generic.IEnumerable{Qhta.Xml.XmlDictionaryItemAttribute})">
            <summary>
            Helper method that creates a dictionary info info for a type with specific dictionary item attibutes.
            </summary>
        </member>
        <member name="M:Qhta.Xml.Reflection.XmlSerializationInfoMapper.AutoSetPrefixes(System.String)">
            <summary>
            Helper method to set prefixes automatically.
            </summary>
            <param name="defaultNamespace"></param>
        </member>
        <member name="M:Qhta.Xml.Reflection.XmlSerializationInfoMapper.PropOrderComparison(Qhta.Xml.Reflection.SerializationMemberInfo,Qhta.Xml.Reflection.SerializationMemberInfo)">
            <summary>
            Helper method to compare order of member infos.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Qhta.Xml.Reflection.XmlSerializationInfoMapper.FindTypeConverter(System.String)">
            <summary>
            Helper method to find and create a type converter with a specific type name.
            </summary>
            <param name="typeName">Name of the type converter class</param>
            <returns></returns>
        </member>
        <member name="M:Qhta.Xml.Reflection.XmlSerializationInfoMapper.FindType(System.String)">
            <summary>
            Helper method to find a type in current domain assemblies.
            </summary>
            <param name="fullName"></param>
            <returns></returns>
        </member>
        <member name="M:Qhta.Xml.Reflection.XmlSerializationInfoMapper.CreateTypeConverter(System.Type)">
            <summary>
            Helper method to create a type converter method.
            </summary>
            <param name="converterType"></param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Qhta.Xml.Reflection.XmlSerializationInfoMapper.SearchShouldSerializeMethods(System.Type,Qhta.Xml.Reflection.SerializationTypeInfo)">
            <summary>
            Helper method to get a "ShouldSerialize..." method in a type definition according to Options.CheckMethod definition.
            All member infos are searched.
            </summary>
        </member>
        <member name="M:Qhta.Xml.Reflection.XmlSerializationInfoMapper.SearchShouldSerializeMethod(System.Reflection.MethodInfo[],Qhta.Xml.Reflection.SerializationMemberInfo)">
            <summary>
            Helper method to get a "ShouldSerialize..." method in a member info. 
            Found method is added to type member info.
            </summary>
        </member>
    </members>
</doc>
